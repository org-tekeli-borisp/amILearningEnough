{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Am I Learning Enough","text":"<p>This is a comprehensive resource for learning various aspects of computer science and programming.</p>"},{"location":"#available-resources","title":"Available Resources","text":"<ul> <li>Assembly Programming</li> <li>Computer Architecture</li> <li>Cybersecurity</li> <li>Linux Tools and Administration</li> <li>Machine Learning</li> <li>Operating Systems</li> <li>Programming Languages</li> </ul>"},{"location":"#learning-roadmaps","title":"Learning Roadmaps","text":"<ul> <li>Data Structures and Algorithms</li> <li>Machine Learning</li> <li>OS Development</li> <li>Reverse Engineering</li> </ul>"},{"location":"resources/assembly/asm/","title":"\ud83d\udda5\ufe0f From Zero to Assembly Programming Master: The Binary Expedition","text":""},{"location":"resources/assembly/asm/#phase-1-foundational-knowledge","title":"Phase 1: Foundational Knowledge","text":""},{"location":"resources/assembly/asm/#1-computer-architecture-understanding","title":"1. Computer Architecture Understanding","text":""},{"location":"resources/assembly/asm/#books","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"Computer Organization and Design\" by Patterson and Hennessy</li> <li>\ud83d\udcd8 \"Computer Architecture: A Quantitative Approach\" by Hennessy and Patterson</li> </ul>"},{"location":"resources/assembly/asm/#online-courses","title":"Online Courses","text":"<ul> <li>\ud83c\udf10 Coursera: Computer Architecture</li> <li>\ud83c\udf10 edX: Computer Architecture Fundamentals</li> </ul>"},{"location":"resources/assembly/asm/#documentation-resources","title":"Documentation &amp; Resources","text":"<ul> <li>\ud83d\udcc4 Intel Architecture Manuals</li> <li>\ud83d\udcc4 AMD Developer Guides</li> </ul>"},{"location":"resources/assembly/asm/#2-number-systems-and-representation","title":"2. Number Systems and Representation","text":""},{"location":"resources/assembly/asm/#books_1","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"Digital Design\" by Morris Mano</li> <li>\ud83d\udcd8 \"Numerical Methods for Engineers\" by Steven Chapra</li> </ul>"},{"location":"resources/assembly/asm/#online-tutorials","title":"Online Tutorials","text":"<ul> <li>\ud83c\udf10 Binary and Hexadecimal Tutorial</li> <li>\ud83c\udf10 Khan Academy: Binary</li> </ul>"},{"location":"resources/assembly/asm/#video-resources","title":"Video Resources","text":"<ul> <li>\ud83d\udcfa Ben Eater's Digital Logic Series on YouTube</li> <li>\ud83d\udcfa Computerphile YouTube Channel - Number Systems Playlist</li> </ul>"},{"location":"resources/assembly/asm/#phase-2-low-level-programming-foundations","title":"Phase 2: Low-Level Programming Foundations","text":""},{"location":"resources/assembly/asm/#1-c-programming-fundamentals","title":"1. C Programming Fundamentals","text":""},{"location":"resources/assembly/asm/#books_2","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"C Programming Absolute Beginner's Guide\" by Perry and Miller</li> <li>\ud83d\udcd8 \"The C Programming Language\" by Kernighan and Ritchie</li> </ul>"},{"location":"resources/assembly/asm/#online-courses_1","title":"Online Courses","text":"<ul> <li>\ud83c\udf10 CS50 Introduction to Programming</li> <li>\ud83c\udf10 Udacity: Introduction to C Programming</li> </ul>"},{"location":"resources/assembly/asm/#practice-platforms","title":"Practice Platforms","text":"<ul> <li>\ud83d\udda5\ufe0f HackerRank C Programming</li> <li>\ud83d\udda5\ufe0f LeetCode C Problems</li> </ul>"},{"location":"resources/assembly/asm/#2-system-level-programming-concepts","title":"2. System-Level Programming Concepts","text":""},{"location":"resources/assembly/asm/#books_3","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"Computer Systems: A Programmer's Perspective\" </li> <li>\ud83d\udcd8 \"Advanced Programming in the UNIX Environment\"</li> </ul>"},{"location":"resources/assembly/asm/#online-resources","title":"Online Resources","text":"<ul> <li>\ud83c\udf10 MIT OpenCourseWare: Computer System Engineering</li> <li>\ud83d\udcc4 Linux Kernel Documentation</li> </ul>"},{"location":"resources/assembly/asm/#phase-3-x86-assembly-introduction","title":"Phase 3: x86 Assembly Introduction","text":""},{"location":"resources/assembly/asm/#1-assembly-language-basics","title":"1. Assembly Language Basics","text":""},{"location":"resources/assembly/asm/#books_4","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"Professional Assembly Language\" by Richard Blum</li> <li>\ud83d\udcd8 \"Assembly Language Step-by-Step\" by Jeff Duntemann</li> </ul>"},{"location":"resources/assembly/asm/#online-tutorials_1","title":"Online Tutorials","text":"<ul> <li>\ud83c\udf10 NASM Tutorial Official</li> <li>\ud83c\udf10 Assembly Language Programming Tutorials</li> </ul>"},{"location":"resources/assembly/asm/#video-courses","title":"Video Courses","text":"<ul> <li>\ud83d\udcfa Udemy: x86 Assembly Language Programming</li> <li>\ud83d\udcfa YouTube: \"x86 Assembly Crash Course\" series</li> </ul>"},{"location":"resources/assembly/asm/#2-practical-assembly-programming","title":"2. Practical Assembly Programming","text":""},{"location":"resources/assembly/asm/#practice-platforms_1","title":"Practice Platforms","text":"<ul> <li>\ud83d\udda5\ufe0f HackThisSite Assembly Challenges</li> <li>\ud83d\udda5\ufe0f WarGames: Bandit Challenges</li> </ul>"},{"location":"resources/assembly/asm/#online-coding-environments","title":"Online Coding Environments","text":"<ul> <li>\ud83c\udf10 Compiler Explorer</li> <li>\ud83c\udf10 Online x86 Assembler</li> </ul>"},{"location":"resources/assembly/asm/#phase-4-advanced-assembly-techniques","title":"Phase 4: Advanced Assembly Techniques","text":""},{"location":"resources/assembly/asm/#1-optimization-and-advanced-techniques","title":"1. Optimization and Advanced Techniques","text":""},{"location":"resources/assembly/asm/#books_5","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"Performance Optimization in Assembly\"</li> <li>\ud83d\udcd8 \"Agner Fog's Optimization Manuals\"</li> </ul>"},{"location":"resources/assembly/asm/#research-resources","title":"Research Resources","text":"<ul> <li>\ud83d\udcc4 Intel Optimization Manuals</li> <li>\ud83d\udcc4 Academic Papers on Compiler Optimization</li> </ul>"},{"location":"resources/assembly/asm/#2-specialized-domains","title":"2. Specialized Domains","text":""},{"location":"resources/assembly/asm/#reverse-engineering","title":"Reverse Engineering","text":""},{"location":"resources/assembly/asm/#books_6","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"Practical Malware Analysis\"</li> <li>\ud83d\udcd8 \"Practical Reverse Engineering\"</li> </ul>"},{"location":"resources/assembly/asm/#platforms","title":"Platforms","text":"<ul> <li>\ud83d\udda5\ufe0f Crackmes</li> <li>\ud83d\udda5\ufe0f Reverse Engineering Challenges</li> </ul>"},{"location":"resources/assembly/asm/#exploit-development","title":"Exploit Development","text":""},{"location":"resources/assembly/asm/#books_7","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"The Shellcoder's Handbook\"</li> <li>\ud83d\udcd8 \"Practical Malware Analysis\"</li> </ul>"},{"location":"resources/assembly/asm/#training-platforms","title":"Training Platforms","text":"<ul> <li>\ud83c\udf10 Offensive Security PWK Course</li> <li>\ud83c\udf10 VulnHub Exploit Challenges</li> </ul>"},{"location":"resources/assembly/asm/#phase-5-mastery-and-specialization","title":"Phase 5: Mastery and Specialization","text":""},{"location":"resources/assembly/asm/#1-operating-system-internals","title":"1. Operating System Internals","text":""},{"location":"resources/assembly/asm/#books_8","title":"Books","text":"<ul> <li>\ud83d\udcd8 \"Operating Systems: Three Easy Pieces\"</li> <li>\ud83d\udcd8 \"Linux Kernel Development\" by Robert Love</li> </ul>"},{"location":"resources/assembly/asm/#online-courses_2","title":"Online Courses","text":"<ul> <li>\ud83c\udf10 MIT Operating Systems Course</li> <li>\ud83c\udf10 Linux Foundation Kernel Courses</li> </ul>"},{"location":"resources/assembly/asm/#2-advanced-specializations","title":"2. Advanced Specializations","text":""},{"location":"resources/assembly/asm/#resources","title":"Resources","text":"<ul> <li>\ud83d\udcc4 Embedded Systems Programming Resources</li> <li>\ud83d\udcc4 Device Driver Development Guides</li> </ul>"},{"location":"resources/assembly/asm/#recommended-learning-communities","title":"Recommended Learning Communities","text":"<ul> <li>\ud83c\udf10 Reddit: r/ReverseEngineering</li> <li>\ud83c\udf10 Stack Overflow: Assembly Language Tag</li> <li>\ud83c\udf10 Discord: Reverse Engineering Servers</li> </ul>"},{"location":"resources/assembly/asm/#final-wisdom","title":"Final Wisdom \ud83d\ude80","text":"<ol> <li>Consistency is key</li> <li>Practice daily</li> <li>Build small projects</li> <li>Contribute to open-source</li> <li>Never stop learning</li> </ol> <p>The journey of a thousand lines of Assembly begins with a single instruction! \ud83d\udcbb</p>"},{"location":"resources/cheatsheets/riscv-32bit/","title":"RISC-V Assembler Cheat Sheet","text":"<p>A thorough reference to 32-bit RISC-V instructions, registers, and fundamental concepts. This guide is intended for software developers working with the RISC-V assembly language and includes grouped instructions by purpose, common pseudoinstructions, and usage examples.</p>"},{"location":"resources/cheatsheets/riscv-32bit/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Arithmetic Instructions</li> <li>Bitwise Logic Instructions</li> <li>Shift Instructions</li> <li>Load Immediate Instructions</li> <li>Load and Store Instructions</li> <li>Jump and Function Instructions</li> <li>Branch Instructions</li> <li>Set Instructions</li> <li>Counter Instructions</li> <li>Miscellaneous Instructions</li> <li>Instruction Terminology</li> <li>RV32 ABI Registers</li> <li>RISC-V Concepts</li> <li>Usage Examples</li> </ol>"},{"location":"resources/cheatsheets/riscv-32bit/#arithmetic-instructions","title":"Arithmetic Instructions","text":"<p>Arithmetic operations perform basic mathematical computations.</p> Instruction Description Usage Result Guide <code>add</code> Add <code>add rd, rs1, rs2</code> <code>rd = rs1 + rs2</code> Arithmetic <code>addi</code> Add Immediate <code>addi rd, rs1, imm</code> <code>rd = rs1 + imm</code> Arithmetic <code>neg</code> Negate (pseudoinstruction) <code>neg rd, rs2</code> <code>rd = -rs2</code> Arithmetic <code>sub</code> Subtract <code>sub rd, rs1, rs2</code> <code>rd = rs1 - rs2</code> Arithmetic <code>mul</code> Multiply <code>mul rd, rs1, rs2</code> <code>rd = (rs1 * rs2)[31:0]</code> Multiply <code>mulh</code> Multiply High <code>mulh rd, rs1, rs2</code> <code>rd = (rs1 * rs2)[63:32]</code> Multiply <code>mulhu</code> Multiply High Unsigned <code>mulhu rd, rs1, rs2</code> <code>rd = (rs1 * rs2)[63:32]</code> Multiply <code>mulhsu</code> Multiply High Signed Unsigned <code>mulhsu rd, rs1, rs2</code> <code>rd = (rs1 * rs2)[63:32]</code> Multiply <code>div</code> Divide <code>div rd, rs1, rs2</code> <code>rd = rs1 / rs2</code> Divide <code>rem</code> Remainder <code>rem rd, rs1, rs2</code> <code>rd = rs1 % rs2</code> Divide <p>Notes: - Use <code>addi</code> for subtracting with an immediate value: <code>addi rd, rs1, -imm</code> - Multiply and divide instructions require the M extension.</p>"},{"location":"resources/cheatsheets/riscv-32bit/#example","title":"Example:","text":"<pre><code>addi t0, t1, 10      # t0 = t1 + 10\nsub t2, t0, t1       # t2 = t0 - t1\nmul t3, t2, t1       # t3 = t2 * t1\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#bitwise-logic-instructions","title":"Bitwise Logic Instructions","text":"<p>Perform logical operations on binary data.</p> Instruction Description Usage Result Guide <code>and</code> Logical AND <code>and rd, rs1, rs2</code> <code>rd = rs1 &amp; rs2</code> Logical <code>andi</code> AND Immediate <code>andi rd, rs1, imm</code> <code>rd = rs1 &amp; imm</code> Logical <code>not</code> Logical NOT (pseudoinstruction) <code>not rd, rs1</code> <code>rd = ~rs1</code> Logical <code>or</code> Logical OR <code>or rd, rs1, rs2</code> <code>rd = rs1 | rs2</code> Logical <code>ori</code> OR Immediate <code>ori rd, rs1, imm</code> <code>rd = rs1 | imm</code> Logical <code>xor</code> Logical XOR <code>xor rd, rs1, rs2</code> <code>rd = rs1 ^ rs2</code> Logical <code>xori</code> XOR Immediate <code>xori rd, rs1, imm</code> <code>rd = rs1 ^ imm</code> Logical"},{"location":"resources/cheatsheets/riscv-32bit/#example_1","title":"Example:","text":"<pre><code>and t0, t1, t2       # t0 = t1 &amp; t2\nori t3, t0, 0xFF     # t3 = t0 | 0xFF\nnot t4, t3           # t4 = ~t3\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#shift-instructions","title":"Shift Instructions","text":"<p>Handle bitwise shifting operations.</p> Instruction Description Usage Result Guide <code>sll</code> Shift Left Logical <code>sll rd, rs1, rs2</code> <code>rd = rs1 &lt;&lt; rs2</code> Shift <code>slli</code> Shift Left Logical Immediate <code>slli rd, rs1, imm</code> <code>rd = rs1 &lt;&lt; imm</code> Shift <code>srl</code> Shift Right Logical <code>srl rd, rs1, rs2</code> <code>rd = rs1 &gt;&gt; rs2</code> Shift <code>srli</code> Shift Right Logical Immediate <code>srli rd, rs1, imm</code> <code>rd = rs1 &gt;&gt; imm</code> Shift <code>sra</code> Shift Right Arithmetic <code>sra rd, rs1, rs2</code> <code>rd = rs1 &gt;&gt;&gt; rs2</code> Shift <code>srai</code> Shift Right Arithmetic Immediate <code>srai rd, rs1, imm</code> <code>rd = rs1 &gt;&gt;&gt; imm</code> Shift"},{"location":"resources/cheatsheets/riscv-32bit/#example_2","title":"Example:","text":"<pre><code>slli t0, t1, 2       # t0 = t1 &lt;&lt; 2\nsrli t2, t0, 1       # t2 = t0 &gt;&gt; 1\nsra t3, t2, t1       # t3 = t2 &gt;&gt;&gt; t1\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#load-immediate-instructions","title":"Load Immediate Instructions","text":"<p>Load immediate values into registers.</p> Instruction Description Usage Result Guide <code>li</code> Load Immediate (pseudoinstruction) <code>li rd, imm</code> <code>rd = imm</code> Arithmetic <code>lui</code> Load Upper Immediate <code>lui rd, imm</code> <code>rd = imm &lt;&lt; 12</code> Arithmetic <code>auipc</code> Add Upper Immediate to PC <code>auipc rd, imm</code> <code>rd = pc + (imm &lt;&lt; 12)</code> Branch"},{"location":"resources/cheatsheets/riscv-32bit/#example_3","title":"Example:","text":"<pre><code>li t0, 100           # t0 = 100\nlui t1, 0x1F         # t1 = 0x1F000\nauipc t2, 0x10       # t2 = pc + 0x10000\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#load-and-store-instructions","title":"Load and Store Instructions","text":"<p>Manage data movement between registers and memory.</p> Instruction Description Usage Result Guide <code>lw</code> Load Word <code>lw rd, imm(rs1)</code> <code>rd = mem[rs1 + imm]</code> Load <code>lh</code> Load Half <code>lh rd, imm(rs1)</code> <code>rd = mem[rs1 + imm][0:15]</code> Load <code>lhu</code> Load Half Unsigned <code>lhu rd, imm(rs1)</code> <code>rd = mem[rs1 + imm][0:15]</code> Load <code>lb</code> Load Byte <code>lb rd, imm(rs1)</code> <code>rd = mem[rs1 + imm][0:7]</code> Load <code>lbu</code> Load Byte Unsigned <code>lbu rd, imm(rs1)</code> <code>rd = mem[rs1 + imm][0:7]</code> Load <code>la</code> Load Symbol Address (pseudoinstruction) <code>la rd, symbol</code> <code>rd = &amp;symbol</code> Load <code>sw</code> Store Word <code>sw rs2, imm(rs1)</code> <code>mem[rs1 + imm] = rs2</code> Store <code>sh</code> Store Half <code>sh rs2, imm(rs1)</code> <code>mem[rs1 + imm][0:15] = rs2</code> Store <code>sb</code> Store Byte <code>sb rs2, imm(rs1)</code> <code>mem[rs1 + imm][0:7] = rs2</code> Store"},{"location":"resources/cheatsheets/riscv-32bit/#example_4","title":"Example:","text":"<pre><code>lw t0, 0(sp)         # t0 = mem[sp + 0]\nsw t1, 4(sp)         # mem[sp + 4] = t1\nla t2, data_label    # t2 = address of data_label\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#jump-and-function-instructions","title":"Jump and Function Instructions","text":"<p>Control the flow of the program through jumps and function calls.</p> Instruction Description Usage Result Guide <code>j</code> Jump (pseudoinstruction) <code>j imm</code> <code>pc += imm</code> Jump <code>jal</code> Jump and Link <code>jal rd, imm</code> <code>rd = pc + 4; pc += imm</code> Jump <code>jalr</code> Jump and Link Register <code>jalr rd, rs1, imm</code> <code>rd = pc + 4; pc = rs1 + imm</code> Jump <code>call</code> Call Function (pseudoinstruction) <code>call symbol</code> <code>ra = pc + 4; pc = &amp;symbol</code> Function <code>ret</code> Return from Function (pseudoinstruction) <code>ret</code> <code>pc = ra</code> Function <p>Notes: - Labels can be used in place of immediate values for jump instructions.</p>"},{"location":"resources/cheatsheets/riscv-32bit/#example_5","title":"Example:","text":"<pre><code>jal ra, function_label    # Jump to function_label and store return address in ra\ncall main                 # Call the main function\nret                       # Return from the current function\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#branch-instructions","title":"Branch Instructions","text":"<p>Conditional branching based on comparisons.</p> Instruction Description Usage Result Guide <code>beq</code> Branch Equal <code>beq rs1, rs2, imm</code> <code>if(rs1 == rs2) pc += imm</code> Branch <code>beqz</code> Branch Equal Zero (pseudoinstruction) <code>beqz rs1, imm</code> <code>if(rs1 == 0) pc += imm</code> Branch <code>bne</code> Branch Not Equal <code>bne rs1, rs2, imm</code> <code>if(rs1 \u2260 rs2) pc += imm</code> Branch <code>bnez</code> Branch Not Equal Zero (pseudoinstruction) <code>bnez rs1, imm</code> <code>if(rs1 \u2260 0) pc += imm</code> Branch <code>blt</code> Branch Less Than <code>blt rs1, rs2, imm</code> <code>if(rs1 &lt; rs2) pc += imm</code> Branch <code>bltu</code> Branch Less Than Unsigned <code>bltu rs1, rs2, imm</code> <code>if(rs1 &lt; rs2) pc += imm</code> Branch <code>bltz</code> Branch Less Than Zero (pseudoinstruction) <code>bltz rs1, imm</code> <code>if(rs1 &lt; 0) pc += imm</code> Branch <code>bgt</code> Branch Greater Than (pseudoinstruction) <code>bgt rs1, rs2, imm</code> <code>if(rs1 &gt; rs2) pc += imm</code> Branch <code>bgtu</code> Branch Greater Than Unsigned (pseudoinstruction) <code>bgtu rs1, rs2, imm</code> <code>if(rs1 &gt; rs2) pc += imm</code> Branch <code>bgtz</code> Branch Greater Than Zero (pseudoinstruction) <code>bgtz rs1, imm</code> <code>if(rs1 &gt; 0) pc += imm</code> Branch <code>ble</code> Branch Less or Equal (pseudoinstruction) <code>ble rs1, rs2, imm</code> <code>if(rs1 \u2264 rs2) pc += imm</code> Branch <code>bleu</code> Branch Less or Equal Unsigned (pseudoinstruction) <code>bleu rs1, rs2, imm</code> <code>if(rs1 \u2264 rs2) pc += imm</code> Branch <code>blez</code> Branch Less or Equal Zero (pseudoinstruction) <code>blez rs1, imm</code> <code>if(rs1 \u2264 0) pc += imm</code> Branch <code>bge</code> Branch Greater or Equal <code>bge rs1, rs2, imm</code> <code>if(rs1 \u2265 rs2) pc += imm</code> Branch <code>bgeu</code> Branch Greater or Equal Unsigned <code>bgeu rs1, rs2, imm</code> <code>if(rs1 \u2265 rs2) pc += imm</code> Branch <code>bgez</code> Branch Greater or Equal Zero (pseudoinstruction) <code>bgez rs1, imm</code> <code>if(rs1 \u2265 0) pc += imm</code> Branch <p>Notes: - Labels can be used in place of immediate values for branch instructions.</p>"},{"location":"resources/cheatsheets/riscv-32bit/#example_6","title":"Example:","text":"<pre><code>beq t0, t1, equal_label    # If t0 == t1, jump to equal_label\nbnez t2, not_zero_label    # If t2 != 0, jump to not_zero_label\nblt t3, t4, less_than_label # If t3 &lt; t4, jump to less_than_label\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#set-instructions","title":"Set Instructions","text":"<p>Set register values based on comparisons.</p> Instruction Description Usage Result Guide <code>slt</code> Set Less Than <code>slt rd, rs1, rs2</code> <code>rd = (rs1 &lt; rs2)</code> Set <code>slti</code> Set Less Than Immediate <code>slti rd, rs1, imm</code> <code>rd = (rs1 &lt; imm)</code> Set <code>sltu</code> Set Less Than Unsigned <code>sltu rd, rs1, rs2</code> <code>rd = (rs1 &lt; rs2)</code> Set <code>sltiu</code> Set Less Than Immediate Unsigned <code>sltiu rd, rs1, imm</code> <code>rd = (rs1 &lt; imm)</code> Set <code>seqz</code> Set Equal Zero (pseudoinstruction) <code>seqz rd, rs1</code> <code>rd = (rs1 == 0)</code> Set <code>snez</code> Set Not Equal Zero (pseudoinstruction) <code>snez rd, rs1</code> <code>rd = (rs1 \u2260 0)</code> Set <code>sltz</code> Set Less Than Zero (pseudoinstruction) <code>sltz rd, rs1</code> <code>rd = (rs1 &lt; 0)</code> Set <code>sgtz</code> Set Greater Than Zero (pseudoinstruction) <code>sgtz rd, rs1</code> <code>rd = (rs1 &gt; 0)</code> Set"},{"location":"resources/cheatsheets/riscv-32bit/#example_7","title":"Example:","text":"<pre><code>slt t0, t1, t2        # t0 = (t1 &lt; t2)\nslti t3, t0, 5        # t3 = (t0 &lt; 5)\nseqz t4, t3           # t4 = (t3 == 0)\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#counter-instructions","title":"Counter Instructions","text":"<p>Access CPU cycle and instruction counters. Note: These instructions require the Zicntr and Zicsr extensions and are not yet available in all implementations.</p> Instruction Description Usage Result Guide <code>rdcycle</code> CPU Cycle Count (pseudoinstruction) <code>rdcycle rd</code> <code>rd = csr_cycle[31:0]</code> Not Available <code>rdcycleh</code> CPU Cycle Count High (pseudoinstruction) <code>rdcycleh rd</code> <code>rd = csr_cycle[63:32]</code> Not Available <code>rdtime</code> Current Time (pseudoinstruction) <code>rdtime rd</code> <code>rd = csr_time[31:0]</code> Not Available <code>rdtimeh</code> Current Time High (pseudoinstruction) <code>rdtimeh rd</code> <code>rd = csr_time[63:32]</code> Not Available <code>rdinstret</code> CPU Instructions Retired (pseudoinstruction) <code>rdinstret rd</code> <code>rd = csr_instret[31:0]</code> Not Available <code>rdinstreth</code> CPU Instructions Retired High (pseudoinstruction) <code>rdinstreth rd</code> <code>rd = csr_instret[63:32]</code> Not Available"},{"location":"resources/cheatsheets/riscv-32bit/#miscellaneous-instructions","title":"Miscellaneous Instructions","text":"<p>Additional instructions for various purposes.</p> Instruction Description Usage Result Guide <code>ebreak</code> Environment Break (Debugger Call) <code>ebreak</code> - Not Available <code>ecall</code> Environment Call (OS Function) <code>ecall</code> - Not Available <code>fence</code> I/O Ordering <code>fence</code> - Not Available <code>mv</code> Copy Register (pseudoinstruction) <code>mv rd, rs1</code> <code>rd = rs1</code> Arithmetic <code>nop</code> No Operation (pseudoinstruction) <code>nop</code> - Arithmetic <p>Notes: - The <code>fence</code> instruction requires the Zifencei extension.</p>"},{"location":"resources/cheatsheets/riscv-32bit/#example_8","title":"Example:","text":"<pre><code>mv t0, t1            # t0 = t1\nnop                  # No operation\necall                # Environment call\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#instruction-terminology","title":"Instruction Terminology","text":"<p>Understanding the terminology used in RISC-V assembly instructions.</p> Term Description <code>imm</code> Immediate value (normally sign-extended) <code>mem</code> Memory <code>(p)</code> Pseudoinstruction <code>pc</code> Program counter <code>pc+4</code> Next instruction on RV32 <code>ra</code> Return address register (x1) <code>rd</code> Destination register <code>rs1</code> First source register <code>rs2</code> Second source register <code>symbol</code> Symbol (may be a label in assembly)"},{"location":"resources/cheatsheets/riscv-32bit/#rv32-abi-registers","title":"RV32 ABI Registers","text":"<p>Overview of the ABI (Application Binary Interface) registers for RV32.</p> ABI Name Register Description Preserved <code>zero</code> <code>x0</code> Always 0 (zero) N/A <code>ra</code> <code>x1</code> Return address No <code>sp</code> <code>x2</code> Stack pointer Yes <code>gp</code> <code>x3</code> Global pointer* N/A <code>tp</code> <code>x4</code> Thread pointer* N/A <code>t0</code> <code>x5</code> Temporary No <code>t1</code> <code>x6</code> Temporary No <code>t2</code> <code>x7</code> Temporary No <code>fp (s0)</code> <code>x8</code> Frame pointer\u2020 Yes <code>s1</code> <code>x9</code> Saved register Yes <code>a0</code> <code>x10</code> Function argument\u2021 No <code>a1</code> <code>x11</code> Function argument\u2021 No <code>a2</code> <code>x12</code> Function argument No <code>a3</code> <code>x13</code> Function argument No <code>a4</code> <code>x14</code> Function argument No <code>a5</code> <code>x15</code> Function argument No <code>a6</code> <code>x16</code> Function argument No <code>a7</code> <code>x17</code> Function argument No <code>s2</code> <code>x18</code> Saved register Yes <code>s3</code> <code>x19</code> Saved register Yes <code>s4</code> <code>x20</code> Saved register Yes <code>s5</code> <code>x21</code> Saved register Yes <code>s6</code> <code>x22</code> Saved register Yes <code>s7</code> <code>x23</code> Saved register Yes <code>s8</code> <code>x24</code> Saved register Yes <code>s9</code> <code>x25</code> Saved register Yes <code>s10</code> <code>x26</code> Saved register Yes <code>s11</code> <code>x27</code> Saved register Yes <code>t3</code> <code>x28</code> Temporary No <code>t4</code> <code>x29</code> Temporary No <code>t5</code> <code>x30</code> Temporary No <code>t6</code> <code>x31</code> Temporary No <p>Notes: - * Let the compiler/linker use the global <code>gp</code> and thread <code>tp</code> pointers; ignore them in your own code. - \u2020 The frame pointer <code>fp</code> supports local variables but can be used as a regular saved register. - \u2021 Argument registers <code>a0</code> and <code>a1</code> also handle the function return value.</p>"},{"location":"resources/cheatsheets/riscv-32bit/#risc-v-concepts","title":"RISC-V Concepts","text":"<p>Key concepts to understand when working with RISC-V assembly:</p> <ul> <li>Extensions: RISC-V is modular, allowing for different extensions (e.g., M for Multiply/Divide, A for Atomic, etc.) to add functionality.</li> <li>Base Instruction Set: This cheat sheet focuses on the base integer instruction set (RV32I).</li> <li>Pseudoinstructions: These are simplified instructions that are translated into one or more actual RISC-V instructions by the assembler.</li> </ul>"},{"location":"resources/cheatsheets/riscv-32bit/#usage-examples","title":"Usage Examples","text":"<p>Below are examples demonstrating how to use various RISC-V instructions in assembly code.</p>"},{"location":"resources/cheatsheets/riscv-32bit/#example-1-simple-arithmetic-operations","title":"Example 1: Simple Arithmetic Operations","text":"<pre><code>.section .text\n.globl main\n\nmain:\n    li t0, 10          # Load immediate 10 into t0\n    li t1, 20          # Load immediate 20 into t1\n    add t2, t0, t1     # t2 = t0 + t1 (30)\n    sub t3, t1, t0     # t3 = t1 - t0 (10)\n    mul t4, t2, t3     # t4 = t2 * t3 (300)\n    ecall              # Exit program\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#example-2-branching-based-on-comparison","title":"Example 2: Branching Based on Comparison","text":"<pre><code>.section .text\n.globl main\n\nmain:\n    li t0, 5           # t0 = 5\n    li t1, 10          # t1 = 10\n    blt t0, t1, less_than_label  # If t0 &lt; t1, jump to less_than_label\n    j end_label        # Else, jump to end_label\n\nless_than_label:\n    li a0, 1           # Set a0 to 1 (indicating true)\n    j end_label\n\nend_label:\n    li a0, 0           # Set a0 to 0 (indicating false)\n    ecall              # Exit program\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#example-3-function-call-and-return","title":"Example 3: Function Call and Return","text":"<pre><code>.section .text\n.globl main\n\nmain:\n    jal ra, function_label  # Jump to function_label and save return address\n    li a0, 0               # Set return value to 0\n    ecall                  # Exit program\n\nfunction_label:\n    addi sp, sp, -16       # Allocate stack space\n    sw ra, 12(sp)          # Save return address\n    li t0, 42              # Perform some operations\n    lw ra, 12(sp)          # Restore return address\n    addi sp, sp, 16        # Deallocate stack space\n    jalr ra, 0(ra)         # Return to caller\n</code></pre>"},{"location":"resources/cheatsheets/riscv-32bit/#additional-resources","title":"Additional Resources","text":"<ul> <li>Project F RISC-V Assembler Guide</li> <li>RISC-V Specification</li> </ul> <p>This cheat sheet covers the base integer instruction set (RV32I) and some standard extensions. Make sure to consult the official RISC-V documentation for comprehensive information and updates.</p>"},{"location":"resources/computerArchitecture/compArch/","title":"Computer Architecture Resources","text":""},{"location":"resources/computerArchitecture/compArch/#essential-books","title":"Essential Books","text":"<ol> <li>\"Computer Organization and Design: The Hardware/Software Interface (RISC-V Edition)\"</li> <li>Authors: David A. Patterson, John L. Hennessy</li> <li> <p>Link: https://www.elsevier.com/books/computer-organization-and-design-risc-v-edition/patterson/978-0-12-820331-6</p> </li> <li> <p>\"Computer Architecture: A Quantitative Approach (6th Edition)\"</p> </li> <li>Authors: John L. Hennessy, David A. Patterson</li> <li> <p>Link: https://www.elsevier.com/books/computer-architecture/hennessy/978-0-12-811905-1</p> </li> <li> <p>\"Digital Design and Computer Architecture: ARM Edition\"</p> </li> <li>Authors: Sarah Harris, David Harris</li> <li> <p>Link: https://www.elsevier.com/books/digital-design-and-computer-architecture/harris/978-0-12-800056-4</p> </li> <li> <p>\"Modern Processor Design: Fundamentals of Superscalar Processors\"</p> </li> <li>Authors: John Paul Shen, Mikko H. Lipasti</li> <li> <p>Link: https://www.waveland.com/browse.php?t=392</p> </li> <li> <p>\"Structured Computer Organization (6th Edition)\"</p> </li> <li>Author: Andrew S. Tanenbaum</li> <li> <p>Link: https://www.pearson.com/en-us/subject-catalog/p/structured-computer-organization/P200000003427</p> </li> <li> <p>\"Parallel Computer Architecture: A Hardware/Software Approach\"</p> </li> <li>Authors: David Culler, Jaswinder Pal Singh</li> <li> <p>Link: https://dl.acm.org/doi/book/10.5555/286076</p> </li> <li> <p>\"Memory Systems: Cache, DRAM, Disk\"</p> </li> <li>Authors: Bruce Jacob, Spencer Ng, David Wang</li> <li> <p>Link: https://www.elsevier.com/books/memory-systems/jacob/978-0-12-379751-3</p> </li> <li> <p>\"The RISC-V Reader: An Open Architecture Atlas\"</p> </li> <li>Authors: David Patterson, Andrew Waterman</li> <li> <p>Link: https://www.riscvbook.com/</p> </li> <li> <p>\"Inside the Machine: An Illustrated Introduction\"</p> </li> <li>Author: Jon Stokes</li> <li> <p>Link: https://www.oreilly.com/library/view/inside-the-machine/9781593271046/</p> </li> <li> <p>\"Computer Architecture: Concepts and Evolution\"</p> <ul> <li>Authors: Gerrit A. Blaauw, Frederick P. Brooks Jr.</li> <li>Link: https://dl.acm.org/doi/book/10.5555/521847</li> </ul> </li> </ol>"},{"location":"resources/computerArchitecture/compArch/#research-papers","title":"Research Papers","text":"<ol> <li>\"The Case for RISC\" (1985)</li> <li> <p>Link: https://dl.acm.org/doi/10.1109/MC.1985.1662901</p> </li> <li> <p>\"The Evolution of RISC Technology at IBM\"</p> </li> <li> <p>Link: https://ieeexplore.ieee.org/document/5387628</p> </li> <li> <p>\"A Survey of Processor Architecture for AI and ML\"</p> </li> <li> <p>Link: https://ieeexplore.ieee.org/document/9099537</p> </li> <li> <p>\"The Microarchitecture of Intel, AMD, and VIA CPUs\"</p> </li> <li> <p>Link: https://www.agner.org/optimize/microarchitecture.pdf</p> </li> <li> <p>\"BOOM: Berkeley Out-of-Order Machine\"</p> </li> <li> <p>Link: https://www2.eecs.berkeley.edu/Pubs/TechRpts/2015/EECS-2015-167.html</p> </li> <li> <p>\"Limits of Instruction-Level Parallelism\"</p> </li> <li> <p>Link: https://dl.acm.org/doi/10.1145/106972.106991</p> </li> <li> <p>\"The Case for Quantum Computing\"</p> </li> <li> <p>Link: https://dl.acm.org/doi/10.1145/3408039</p> </li> <li> <p>\"A Primer on Memory Consistency and Cache Coherence\"</p> </li> <li> <p>Link: https://dl.acm.org/doi/book/10.2200/S00962ED2V01Y201910CAC049</p> </li> <li> <p>\"Branch Prediction: Methods and Challenges\"</p> </li> <li> <p>Link: https://ieeexplore.ieee.org/document/8445839</p> </li> <li> <p>\"Deep Learning Processing: Recent Trends\"</p> <ul> <li>Link: https://ieeexplore.ieee.org/document/9199918</li> </ul> </li> <li> <p>\"The Evolution of ARM Architecture\"</p> <ul> <li>Link: https://ieeexplore.ieee.org/document/8534545</li> </ul> </li> <li> <p>\"RISC-V: An Open Standard for SoCs\"</p> <ul> <li>Link: https://dl.acm.org/doi/10.1145/3069384.3069392</li> </ul> </li> <li> <p>\"Spectre Attacks: Exploiting Speculative Execution\"</p> <ul> <li>Link: https://spectreattack.com/spectre.pdf</li> </ul> </li> <li> <p>\"Vector Processing in Modern Computer Architecture\"</p> <ul> <li>Link: https://ieeexplore.ieee.org/document/9312501</li> </ul> </li> <li> <p>\"Quantum Computing: State of the Art and Challenges\"</p> <ul> <li>Link: https://dl.acm.org/doi/10.1145/3310273</li> </ul> </li> </ol>"},{"location":"resources/computerArchitecture/compArch/#online-resources-and-tools","title":"Online Resources and Tools","text":"<ol> <li>gem5 Simulator</li> <li>Link: https://www.gem5.org/</li> <li> <p>Purpose: Full system simulation</p> </li> <li> <p>MARS MIPS Simulator</p> </li> <li>Link: http://courses.missouristate.edu/kenvollmar/mars/</li> <li> <p>Purpose: MIPS assembly simulation</p> </li> <li> <p>Logisim Evolution</p> </li> <li>Link: https://github.com/logisim-evolution/logisim-evolution</li> <li> <p>Purpose: Digital logic design</p> </li> <li> <p>RISC-V Toolchain</p> </li> <li>Link: https://github.com/riscv-collab/riscv-gnu-toolchain</li> <li> <p>Purpose: RISC-V development</p> </li> <li> <p>Intel\u00ae Architecture Code Analyzer</p> </li> <li>Link: https://software.intel.com/content/www/us/en/develop/articles/intel-architecture-code-analyzer.html</li> <li> <p>Purpose: Code optimization</p> </li> <li> <p>SimpleScalar</p> </li> <li>Link: http://www.simplescalar.com/</li> <li> <p>Purpose: Processor simulation</p> </li> <li> <p>Verilator</p> </li> <li>Link: https://www.veripool.org/verilator/</li> <li> <p>Purpose: Verilog simulation</p> </li> <li> <p>QEMU</p> </li> <li>Link: https://www.qemu.org/</li> <li>Purpose: Hardware emulation</li> </ol>"},{"location":"resources/computerArchitecture/compArch/#specialized-topics","title":"Specialized Topics","text":"<ol> <li>Quantum Computing Architecture</li> <li>Resource: IBM Quantum Experience</li> <li> <p>Link: https://quantum-computing.ibm.com/</p> </li> <li> <p>Neuromorphic Computing</p> </li> <li>Resource: Intel's Neuromorphic Research Community</li> <li> <p>Link: https://www.intel.com/content/www/us/en/research/neuromorphic-computing.html</p> </li> <li> <p>In-Memory Computing</p> </li> <li>Resource: Stanford In-Memory Computing</li> <li> <p>Link: https://arxiv.org/abs/2012.03775</p> </li> <li> <p>Hardware Security</p> </li> <li>Resource: MIT Hardware Security Course</li> <li> <p>Link: https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/</p> </li> <li> <p>Energy-Efficient Computing</p> </li> <li>Resource: Berkeley ASPIRE</li> <li> <p>Link: https://aspire.eecs.berkeley.edu/</p> </li> <li> <p>Machine Learning Hardware</p> </li> <li>Resource: MLSys Conference</li> <li>Link: https://mlsys.org/</li> </ol>"},{"location":"resources/computerArchitecture/compArch/#conference-proceedings-and-journals","title":"Conference Proceedings and Journals","text":"<ol> <li>ISCA (International Symposium on Computer Architecture)</li> <li>Link: https://iscaconf.org/</li> <li> <p>Impact Factor: 4.6</p> </li> <li> <p>MICRO (International Symposium on Microarchitecture)</p> </li> <li>Link: https://www.microarch.org/</li> <li> <p>Impact Factor: 3.8</p> </li> <li> <p>IEEE Transactions on Computers</p> </li> <li>Link: https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=12</li> <li> <p>Impact Factor: 3.1</p> </li> <li> <p>ACM TOCS (Transactions on Computer Systems)</p> </li> <li>Link: https://dl.acm.org/journal/tocs</li> <li> <p>Impact Factor: 2.9</p> </li> <li> <p>Journal of Systems Architecture</p> </li> <li>Link: https://www.journals.elsevier.com/journal-of-systems-architecture</li> <li>Impact Factor: 3.2</li> </ol>"},{"location":"resources/computerArchitecture/compArch/#online-communities-and-forums","title":"Online Communities and Forums","text":"<ol> <li>Computer Architecture Stack Exchange</li> <li>Link: https://cs.stackexchange.com/questions/tagged/computer-architecture</li> <li> <p>Focus: Q&amp;A</p> </li> <li> <p>Reddit r/ComputerEngineering</p> </li> <li>Link: https://www.reddit.com/r/ComputerEngineering/</li> <li> <p>Focus: Discussion</p> </li> <li> <p>IEEE Computer Society</p> </li> <li>Link: https://www.computer.org/</li> <li> <p>Focus: Professional Organization</p> </li> <li> <p>ACM SIGARCH</p> </li> <li>Link: https://www.sigarch.org/</li> <li> <p>Focus: Special Interest Group</p> </li> <li> <p>RISC-V Forums</p> </li> <li>Link: https://groups.google.com/a/groups.riscv.org/g/sw-dev</li> <li> <p>Focus: RISC-V Development</p> </li> <li> <p>OpenCores Community</p> </li> <li>Link: https://opencores.org/</li> <li>Focus: Open Source Hardware</li> </ol>"},{"location":"resources/cybersecurity/cybsec/","title":"Cybersecurity Learning Resources Guide","text":""},{"location":"resources/cybersecurity/cybsec/#youtube-channels","title":"YouTube Channels","text":""},{"location":"resources/cybersecurity/cybsec/#general-cybersecurity-coverage","title":"General Cybersecurity Coverage","text":"<ul> <li>Hak5 - Hardware security, penetration testing tools, and security news</li> <li>ITPro.TV - IT certification and professional development</li> <li>DC CyberSec - General cybersecurity content and tutorials</li> <li>David Bombal - Networking, cybersecurity, and certification prep</li> <li>Network Chuck - Networking and cybersecurity tutorials</li> <li>InfoSec Live - Information security news and tutorials</li> <li>Security Weekly - Security news and detailed technical discussions</li> <li>Hack eXPlorer - Ethical hacking tutorials</li> <li>Cyber CDH - Cybersecurity and digital forensics</li> <li>Black Hills Information Security - Enterprise security and pentesting</li> </ul>"},{"location":"resources/cybersecurity/cybsec/#bug-bounty-and-ethical-hacking","title":"Bug Bounty and Ethical Hacking","text":"<ul> <li>The XSS Rat - Web security and bug bounty hunting</li> <li>Bugcrowd - Bug bounty platform content and tutorials</li> <li>Nahamsec - Bug bounty hunting and web security</li> <li>InsiderPHD - Getting started with bug bounty hunting</li> <li>HackerSploit - Penetration testing and ethical hacking</li> <li>Z-winK University - Ethical hacking education</li> <li>Peter Yaworski - Web security and bug bounty hunting</li> <li>ST\u00d6K - Bug bounty hunting and web security</li> <li>LiveOverflow - Binary exploitation and security research</li> <li>The Cyber Mentor - Ethical hacking and penetration testing</li> </ul>"},{"location":"resources/cybersecurity/cybsec/#certifications-and-career-development","title":"Certifications and Career Development","text":"<ul> <li>Outpost Gray - Cybersecurity career guidance</li> <li>Professor Messer - IT certification preparation</li> <li>Cyberspatial - Cybersecurity career development</li> <li>Simply Cyber - Cybersecurity career advice</li> </ul>"},{"location":"resources/cybersecurity/cybsec/#web-application-security","title":"Web-Application Security","text":"<ul> <li>OWASP Foundation - Web application security standards</li> <li>Security Now - Security news and web security</li> <li>Null Byte - Ethical hacking and security tutorials</li> </ul>"},{"location":"resources/cybersecurity/cybsec/#cloud-security","title":"Cloud Security","text":"<ul> <li>Day Cyberwox - Cloud security and DevSecOps</li> </ul>"},{"location":"resources/cybersecurity/cybsec/#offensive-security-and-penetration-testing","title":"Offensive Security and Penetration Testing","text":"<ul> <li>SANS Offensive Operations - Advanced penetration testing</li> <li>Offensive Security - Penetration testing training</li> <li>Pentester Academy TV - Technical penetration testing tutorials</li> </ul>"},{"location":"resources/cybersecurity/cybsec/#online-learning-platforms","title":"Online Learning Platforms","text":""},{"location":"resources/cybersecurity/cybsec/#websites","title":"Websites","text":"<ul> <li>Udemy - Online courses marketplace</li> <li>Coursera - University-partnered online courses</li> <li>edX - University-level online courses</li> <li>Udacity - Technical and professional courses</li> <li>Stanford Online - Stanford University's online courses</li> <li>Cybrary - Cybersecurity-focused training</li> <li>SANS - Professional cybersecurity training</li> <li>W3Schools - Web development tutorials</li> </ul>"},{"location":"resources/cybersecurity/cybsec/#practice-platforms","title":"Practice Platforms","text":"<ul> <li>TryHackMe - Guided cybersecurity challenges</li> <li>HackTheBox - Advanced penetration testing labs</li> <li>PentesterLab - Web penetration testing practice</li> <li>RootMe - Hacking challenges</li> <li>VulnHub - Vulnerable virtual machines</li> <li>OverTheWire - Security wargames</li> <li>TCM Security - Security training and labs</li> <li>Let's Defend - Blue team training platform</li> </ul>"},{"location":"resources/cybersecurity/cybsec/#mobile-apps","title":"Mobile Apps","text":"<ul> <li>Learn Cybersecurity</li> <li>Learn Hacking</li> <li>Cybrary</li> <li>Ethical Hacking University</li> <li>HackerX</li> <li>Learn Kali Linux</li> </ul> <p>Note: Always ensure you're using these resources legally and ethically. Many of these platforms offer both free and paid content. Practice your skills only in authorized environments and never use these skills for malicious purposes.</p>"},{"location":"resources/linux/bpftrace-eBPF-tools/","title":"BPFtrace and eBPF Tools Guide","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>System Layer Overview</li> <li>Tool Categories</li> <li>Detailed Tool Analysis</li> <li>Command Reference</li> </ol>"},{"location":"resources/linux/bpftrace-eBPF-tools/#introduction","title":"Introduction","text":"<p>This guide covers the comprehensive set of bpftrace and eBPF tools available for Linux system analysis and performance monitoring across different layers of the system stack.</p>"},{"location":"resources/linux/bpftrace-eBPF-tools/#system-layer-overview","title":"System Layer Overview","text":"<p>The tools are organized across these main layers: 1. Applications &amp; Runtimes 2. System Libraries 3. System Call Interface 4. Kernel Subsystems:    - VFS (Virtual File System)    - Network Stack (Sockets, TCP/UDP, IP)    - Scheduler    - Virtual Memory    - Device Drivers</p>"},{"location":"resources/linux/bpftrace-eBPF-tools/#tool-categories","title":"Tool Categories","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#application-level-tools","title":"Application Level Tools","text":"Tool Purpose Layer opensnoop Trace file opens Application statsnoop Trace stat() syscalls Application syncsnoop Trace sync operations Application bashreadline Trace bash commands Application gethostlatency DNS latency analysis System Libraries"},{"location":"resources/linux/bpftrace-eBPF-tools/#system-call-interface-tools","title":"System Call Interface Tools","text":"Tool Purpose Layer syscount Count syscalls System Call execsnoop Trace new processes System Call killsnoop Trace kill() syscalls System Call pidpersec New processes per second System Call"},{"location":"resources/linux/bpftrace-eBPF-tools/#file-system-tools","title":"File System Tools","text":"Tool Purpose Layer vfscount VFS operation counts VFS vfsstat VFS operation stats VFS writeback Trace file writeback File Systems xfsdist XFS operation latency File Systems mdflush Trace md RAID flush events Volume Manager"},{"location":"resources/linux/bpftrace-eBPF-tools/#block-device-tools","title":"Block Device Tools","text":"Tool Purpose Layer biosnoop Trace block I/O Block Device biolatency Block I/O latency Block Device bitesize Block I/O size analysis Block Device"},{"location":"resources/linux/bpftrace-eBPF-tools/#network-tools","title":"Network Tools","text":"Tool Purpose Layer tcpconnect Trace TCP connections TCP/UDP tcpaccept Trace TCP accepts TCP/UDP tcpretrans Trace TCP retransmits TCP/UDP tcpdrop Trace TCP drops TCP/UDP"},{"location":"resources/linux/bpftrace-eBPF-tools/#cpuscheduler-tools","title":"CPU/Scheduler Tools","text":"Tool Purpose Layer cpuwalk CPU instruction analysis Scheduler runqlat Run queue latency Scheduler runqlen Run queue length Scheduler offcputime Off-CPU analysis Scheduler"},{"location":"resources/linux/bpftrace-eBPF-tools/#memory-management-tools","title":"Memory Management Tools","text":"Tool Purpose Layer oomkill Trace OOM killer Virtual Memory capable Trace capability checks System"},{"location":"resources/linux/bpftrace-eBPF-tools/#detailed-tool-analysis","title":"Detailed Tool Analysis","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#application-monitoring-tools","title":"Application Monitoring Tools","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#opensnoop","title":"opensnoop","text":"<pre><code># Trace all file opens\nopensnoop\n\n# Trace specific process\nopensnoop -p 1234\n\n# Include stack traces\nopensnoop --stack\n\n# Filter by file name\nopensnoop -n \"*.txt\"\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#statsnoop","title":"statsnoop","text":"<pre><code># Trace all stat() calls\nstatsnoop\n\n# Show failed stats only\nstatsnoop -x\n\n# Filter by process name\nstatsnoop -n \"nginx\"\n\n# Include extended details\nstatsnoop -v\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#bashreadline","title":"bashreadline","text":"<pre><code># Trace all bash commands\nbashreadline\n\n# Include timestamps\nbashreadline -t\n\n# Trace specific shell PID\nbashreadline -p 1234\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#network-analysis-tools","title":"Network Analysis Tools","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#tcpconnect","title":"tcpconnect","text":"<pre><code># Trace all TCP connections\ntcpconnect\n\n# Show port numbers\ntcpconnect -p\n\n# Include timestamps\ntcpconnect -t\n\n# Filter by port\ntcpconnect -P 80\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#tcpretrans","title":"tcpretrans","text":"<pre><code># Trace TCP retransmissions\ntcpretrans\n\n# Include TCP state\ntcpretrans -s\n\n# Show stack traces\ntcpretrans --stack\n\n# Filter by IP\ntcpretrans -i 192.168.1.1\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#file-system-analysis","title":"File System Analysis","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#vfscount","title":"vfscount","text":"<pre><code># Count VFS operations\nvfscount\n\n# Group by operation type\nvfscount -g\n\n# Include stack traces\nvfscount --stack\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#writeback","title":"writeback","text":"<pre><code># Trace file writeback\nwriteback\n\n# Show per-device stats\nwriteback -d\n\n# Include process info\nwriteback -p\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#block-device-analysis","title":"Block Device Analysis","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#biosnoop","title":"biosnoop","text":"<pre><code># Trace block I/O\nbiosnoop\n\n# Show queued time\nbiosnoop -q\n\n# Filter by device\nbiosnoop -d sda\n\n# Include process info\nbiosnoop -p\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#biolatency","title":"biolatency","text":"<pre><code># Show block I/O latency\nbiolatency\n\n# Use microsecond units\nbiolatency -u\n\n# Create histogram\nbiolatency -h\n\n# Filter by device\nbiolatency -d sda\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#cpu-and-scheduler-analysis","title":"CPU and Scheduler Analysis","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#runqlat","title":"runqlat","text":"<pre><code># Show run queue latency\nrunqlat\n\n# Use microsecond units\nrunqlat -u\n\n# Filter by CPU\nrunqlat -c 0\n\n# Create histogram\nrunqlat --hist\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#offcputime","title":"offcputime","text":"<pre><code># Trace off-CPU time\noffcputime\n\n# Filter by process\noffcputime -p 1234\n\n# Set duration\noffcputime -d 10\n\n# Include user stacks\noffcputime -u\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#command-reference","title":"Command Reference","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#general-options","title":"General Options","text":"<p>Most bpftrace tools support these common options:</p> <pre><code>-h          # Show help message\n-v          # Verbose output\n-d          # Debug output\n-p PID      # Filter by process ID\n-t          # Include timestamps\n--stack     # Show stack traces\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#advanced-usage","title":"Advanced Usage","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#custom-scripts","title":"Custom Scripts","text":"<pre><code># Create custom bpftrace script\ncat &gt; custom.bt &lt;&lt; 'EOF'\n#!/usr/bin/bpftrace\ntracepoint:syscalls:sys_enter_open\n{\n    printf(\"%s opened %s\\n\", comm, str(args-&gt;filename));\n}\nEOF\n\n# Run custom script\nbpftrace custom.bt\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Monitor system calls\nsyscount -i 1\n\n# Monitor process creation\npidpersec -i 5\n\n# Track OOM kills\noomkill -t\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#best-practices","title":"Best Practices","text":"<ol> <li>Resource Usage</li> <li>Be cautious with stack traces in production</li> <li>Use sampling for high-frequency events</li> <li> <p>Monitor overhead with top/htop</p> </li> <li> <p>Filtering</p> </li> <li>Use specific filters to reduce overhead</li> <li>Combine multiple conditions when possible</li> <li> <p>Consider using time-based filters</p> </li> <li> <p>Output Control</p> </li> <li>Use appropriate output formats</li> <li>Consider logging to files for analysis</li> <li> <p>Use aggregation for high-volume data</p> </li> <li> <p>Troubleshooting</p> </li> <li>Start with broad tools</li> <li>Narrow down to specific events</li> <li>Use multiple tools for correlation</li> </ol>"},{"location":"resources/linux/bpftrace-eBPF-tools/#performance-considerations","title":"Performance Considerations","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#overhead-management","title":"Overhead Management","text":"<pre><code># Reduce overhead with sampling\nbiolatency --sample-rate 10\n\n# Use efficient filters\nopensnoop -n '*.log'\n\n# Limit stack traces\ntcpconnect --stack --stack-storage-size 1024\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#production-usage","title":"Production Usage","text":"<ol> <li>Test tools in development first</li> <li>Use appropriate filtering</li> <li>Monitor system impact</li> <li>Set appropriate buffer sizes</li> <li>Use time-based execution limits</li> </ol>"},{"location":"resources/linux/bpftrace-eBPF-tools/#common-use-cases","title":"Common Use Cases","text":""},{"location":"resources/linux/bpftrace-eBPF-tools/#performance-analysis","title":"Performance Analysis","text":"<pre><code># Analyze disk I/O\nbiolatency -h\nbiosnoop -p\n\n# Network performance\ntcpretrans -s\ntcpconnect -t\n\n# CPU scheduling\nrunqlat --hist\noffcputime -p 1234\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#troubleshooting","title":"Troubleshooting","text":"<pre><code># File system issues\nopensnoop -t\nvfscount\n\n# Network problems\ntcpdrop\ntcpretrans\n\n# Memory issues\noomkill -t\n</code></pre>"},{"location":"resources/linux/bpftrace-eBPF-tools/#security-monitoring","title":"Security Monitoring","text":"<pre><code># Track capability checks\ncapable -v\n\n# Monitor process creation\nexecsnoop -t\n\n# Track file access\nopensnoop -t\n</code></pre>"},{"location":"resources/linux/linux-networking-tools/","title":"Every Linux Networking Tool You Need to Know","text":"<p>This comprehensive cheatsheet covers a wide range of Linux networking tools, providing a one-stop reference for Linux users.</p>"},{"location":"resources/linux/linux-networking-tools/#ping","title":"<code>ping</code>","text":"<p>The <code>ping</code> command is used to check if a remote computer is connected and making HTTP requests. It sends ICMP echo request packets to the target host and waits for a response.</p> <p>Usage Examples: - <code>ping &lt;hostname&gt;</code>: Sends ICMP echo requests to the specified hostname. - <code>ping &lt;IP_address&gt;</code>: Sends ICMP echo requests to the specified IP address. - <code>ping -c &lt;count&gt; &lt;target&gt;</code>: Sends a specified number of ICMP echo requests and then exits. - <code>ping -i &lt;interval&gt; &lt;target&gt;</code>: Sets the interval between sent packets in seconds. - <code>ping -s &lt;size&gt; &lt;target&gt;</code>: Specifies the size of the ICMP echo request packet.</p>"},{"location":"resources/linux/linux-networking-tools/#curl","title":"<code>curl</code>","text":"<p><code>curl</code> is a versatile tool for making HTTP requests, providing more control and flexibility than <code>ping</code>. It supports a wide range of protocols, including HTTP, FTP, SFTP, and more.</p> <p>Usage Examples: - <code>curl &lt;URL&gt;</code>: Sends a GET request to the specified URL and outputs the response. - <code>curl -X POST -d \"data=value\" &lt;URL&gt;</code>: Sends a POST request with form data. - <code>curl -H \"Content-Type: application/json\" -d '{\"key\":\"value\"}' &lt;URL&gt;</code>: Sends a POST request with JSON data. - <code>curl -o &lt;filename&gt; &lt;URL&gt;</code>: Saves the response to a file instead of printing it to the console. - <code>curl -L &lt;URL&gt;</code>: Follows redirects automatically.</p>"},{"location":"resources/linux/linux-networking-tools/#httpie","title":"<code>httpie</code>","text":"<p><code>httpie</code> is a user-friendly command-line tool for making HTTP requests. It has a more intuitive syntax compared to <code>curl</code>, making it easier to use for some users.</p> <p>Usage Examples: - <code>http &lt;URL&gt;</code>: Sends a GET request to the specified URL. - <code>http POST &lt;URL&gt; key=value</code>: Sends a POST request with form data. - <code>http PUT &lt;URL&gt; key:value</code>: Sends a PUT request with JSON data. - <code>http -h</code>: Displays the available options and headers. - <code>http --json &lt;URL&gt; key=value</code>: Sends a POST request with JSON data.</p>"},{"location":"resources/linux/linux-networking-tools/#wget","title":"<code>wget</code>","text":"<p><code>wget</code> is a command-line tool used for downloading files from the web. It supports recursive downloads, mirroring, and background downloads.</p> <p>Usage Examples: - <code>wget &lt;URL&gt;</code>: Downloads the file at the specified URL. - <code>wget -c &lt;URL&gt;</code>: Resumes a partially downloaded file. - <code>wget -r &lt;URL&gt;</code>: Recursively downloads all linked files from the specified URL. - <code>wget -b &lt;URL&gt;</code>: Runs the download in the background. - <code>wget -O &lt;filename&gt; &lt;URL&gt;</code>: Saves the downloaded file with a specific filename.</p>"},{"location":"resources/linux/linux-networking-tools/#tc","title":"<code>tc</code>","text":"<p><code>tc</code> (Traffic Control) is a Linux command-line tool used for fine-grained control over network traffic on a Linux router. It allows you to control your brother's internet bandwidth and other network-related settings.</p> <p>Usage Examples: - <code>tc qdisc add dev &lt;interface&gt; root tbf rate &lt;rate&gt; burst &lt;burst&gt; lat &lt;latency&gt;</code>: Adds a Token Bucket Filter (TBF) to the specified network interface with the given rate, burst, and latency parameters. - <code>tc qdisc del dev &lt;interface&gt; root</code>: Removes the traffic control settings for the specified network interface. - <code>tc class add dev &lt;interface&gt; parent &lt;parent_class&gt; classid &lt;class_id&gt; tbf rate &lt;rate&gt; burst &lt;burst&gt; lat &lt;latency&gt;</code>: Adds a TBF class to the specified network interface. - <code>tc filter add dev &lt;interface&gt; protocol ip parent &lt;parent_class&gt; u32 match ip dst &lt;IP_address&gt;/&lt;mask&gt; flowid &lt;class_id&gt;</code>: Adds a filter to the specified network interface to map traffic to a specific class.</p>"},{"location":"resources/linux/linux-networking-tools/#dignslookup","title":"<code>dig/nslookup</code>","text":"<p><code>dig</code> (Domain Information Groper) and <code>nslookup</code> are tools used to look up the IP address for a given domain name.</p> <p>Usage Examples: - <code>dig &lt;domain&gt;</code>: Performs a DNS lookup for the specified domain and displays the results. - <code>dig @&lt;nameserver&gt; &lt;domain&gt;</code>: Performs a DNS lookup using the specified nameserver. - <code>dig -x &lt;IP_address&gt;</code>: Performs a reverse DNS lookup to find the domain name associated with the given IP address. - <code>nslookup &lt;domain&gt;</code>: Performs a DNS lookup for the specified domain and displays the results. - <code>nslookup -type=&lt;record_type&gt; &lt;domain&gt;</code>: Performs a DNS lookup for a specific record type (e.g., A, MX, NS).</p>"},{"location":"resources/linux/linux-networking-tools/#whois","title":"<code>whois</code>","text":"<p>The <code>whois</code> command is used to check if a domain is registered and to retrieve information about the domain's registration.</p> <p>Usage Examples: - <code>whois &lt;domain&gt;</code>: Retrieves the registration information for the specified domain. - <code>whois -h &lt;whois_server&gt; &lt;domain&gt;</code>: Queries a specific WHOIS server for the domain information. - <code>whois -a &lt;domain&gt;</code>: Displays the full WHOIS record for the domain, including contact information. - <code>whois -r &lt;domain&gt;</code>: Checks the availability of the specified domain.</p>"},{"location":"resources/linux/linux-networking-tools/#ssh","title":"<code>ssh</code>","text":"<p><code>ssh</code> (Secure Shell) is a command-line tool used to establish a secure connection to a remote server or computer.</p> <p>Usage Examples: - <code>ssh &lt;username&gt;@&lt;remote_host&gt;</code>: Connects to the specified remote host with the given username. - <code>ssh -p &lt;port&gt; &lt;username&gt;@&lt;remote_host&gt;</code>: Connects to the remote host using the specified port. - <code>ssh -i &lt;private_key_file&gt; &lt;username&gt;@&lt;remote_host&gt;</code>: Connects to the remote host using the specified private key file for authentication. - <code>ssh-keygen -t rsa -b 4096 -C \"&lt;comment&gt;\"</code>: Generates a new RSA SSH key pair with the specified comment. - <code>ssh-copy-id &lt;username&gt;@&lt;remote_host&gt;</code>: Copies the local user's public key to the remote host's authorized_keys file.</p>"},{"location":"resources/linux/linux-networking-tools/#scp","title":"<code>scp</code>","text":"<p><code>scp</code> (Secure Copy) is a command-line tool used to securely copy files between a local and a remote system over an SSH connection.</p> <p>Usage Examples: - <code>scp &lt;local_file&gt; &lt;username&gt;@&lt;remote_host&gt;:&lt;remote_path&gt;</code>: Copies a local file to a remote system. - <code>scp &lt;username&gt;@&lt;remote_host&gt;:&lt;remote_file&gt; &lt;local_path&gt;</code>: Copies a file from a remote system to the local machine. - <code>scp -r &lt;local_directory&gt; &lt;username&gt;@&lt;remote_host&gt;:&lt;remote_path&gt;</code>: Recursively copies a local directory to a remote system. - <code>scp -P &lt;port&gt; &lt;source&gt; &lt;destination&gt;</code>: Specifies the port to use for the SSH connection. - <code>scp -i &lt;private_key_file&gt; &lt;source&gt; &lt;destination&gt;</code>: Uses the specified private key file for authentication.</p>"},{"location":"resources/linux/linux-networking-tools/#rsync","title":"<code>rsync</code>","text":"<p><code>rsync</code> is a command-line tool used to efficiently synchronize files and directories between a local and a remote system over an SSH connection. It only transfers the changed parts of files, which can save a significant amount of time and bandwidth.</p> <p>Usage Examples: - <code>rsync -avz &lt;source_directory&gt; &lt;username&gt;@&lt;remote_host&gt;:&lt;destination_directory&gt;</code>: Synchronizes a local directory to a remote system, preserving permissions and timestamps, and using compression. - <code>rsync -avz &lt;username&gt;@&lt;remote_host&gt;:&lt;source_directory&gt; &lt;local_directory&gt;</code>: Synchronizes a remote directory to the local system. - <code>rsync -avz --delete &lt;source_directory&gt; &lt;username&gt;@&lt;remote_host&gt;:&lt;destination_directory&gt;</code>: Synchronizes a local directory to a remote system, deleting files on the remote that are not present in the local directory. - <code>rsync -avz --exclude &lt;pattern&gt; &lt;source_directory&gt; &lt;username&gt;@&lt;remote_host&gt;:&lt;destination_directory&gt;</code>: Synchronizes a local directory to a remote system, excluding files or directories that match the specified pattern. - <code>rsync -avz --partial --progress &lt;source&gt; &lt;destination&gt;</code>: Resumes a partially transferred file and shows the progress during the transfer.</p>"},{"location":"resources/linux/linux-networking-tools/#grep","title":"<code>grep</code>","text":"<p><code>grep</code> is a command-line tool used to search for and match patterns in text data, including network output.</p> <p>Usage Examples: - <code>grep &lt;pattern&gt; &lt;file&gt;</code>: Searches for the specified pattern in the given file and displays the matching lines. - <code>grep -i &lt;pattern&gt; &lt;file&gt;</code>: Performs a case-insensitive search for the pattern. - <code>grep -r &lt;pattern&gt; &lt;directory&gt;</code>: Recursively searches for the pattern in all files within the specified directory. - <code>grep -v &lt;pattern&gt; &lt;file&gt;</code>: Displays the lines that do not match the specified pattern. - <code>grep -n &lt;pattern&gt; &lt;file&gt;</code>: Displays the line numbers of the matching lines.</p>"},{"location":"resources/linux/linux-networking-tools/#tcpdump","title":"<code>tcpdump</code>","text":"<p><code>tcpdump</code> is a powerful command-line tool used for capturing and analyzing network packets on a specific network interface.</p> <p>Usage Examples: - <code>tcpdump -i &lt;interface&gt;</code>: Captures packets on the specified network interface. - <code>tcpdump -n -i &lt;interface&gt; port &lt;port&gt;</code>: Captures packets on the specified port, without resolving hostnames. - <code>tcpdump -r &lt;pcap_file&gt;</code>: Analyzes a previously captured packet capture (PCAP) file. - <code>tcpdump -w &lt;pcap_file&gt; -i &lt;interface&gt;</code>: Captures packets and saves them to a PCAP file. - <code>tcpdump -D</code>: Lists the available network interfaces that can be used for capturing packets.</p>"},{"location":"resources/linux/linux-networking-tools/#wireshark","title":"<code>wireshark</code>","text":"<p><code>wireshark</code> is a graphical network protocol analyzer that provides a powerful GUI for capturing, analyzing, and visualizing network packets.</p> <p>Usage Examples: - <code>wireshark</code>: Starts the Wireshark application, allowing you to select a network interface and begin capturing packets. - <code>wireshark -i &lt;interface&gt;</code>: Starts Wireshark and immediately begins capturing packets on the specified network interface. - <code>wireshark -r &lt;pcap_file&gt;</code>: Opens a previously captured PCAP file in Wireshark for analysis. - <code>wireshark -k</code>: Starts Wireshark and immediately begins capturing packets (the <code>-k</code> option starts the capture automatically). - <code>wireshark -f \"&lt;capture_filter&gt;\"</code>: Starts Wireshark and applies the specified capture filter to the packet capture.</p>"},{"location":"resources/linux/linux-networking-tools/#arp","title":"<code>arp</code>","text":"<p><code>arp</code> (Address Resolution Protocol) is a command-line tool used to display and manage the system's ARP table, which maps IP addresses to MAC addresses.</p> <p>Usage Examples: - <code>arp -a</code>: Displays the current ARP table, showing the IP-to-MAC address mappings. - <code>arp -d &lt;IP_address&gt;</code>: Deletes the specified IP address from the ARP table. - <code>arp -s &lt;IP_address&gt; &lt;MAC_address&gt;</code>: Statically adds an IP-to-MAC address mapping to the ARP table. - <code>arp -v</code>: Displays the ARP table with verbose output, including the network interface and timestamp information. - <code>arp -n</code>: Displays the ARP table without resolving hostnames.</p>"},{"location":"resources/linux/linux-networking-tools/#ip","title":"<code>ip</code>","text":"<p>The <code>ip</code> command is a more comprehensive tool for managing network interfaces and routing compared to the older <code>ifconfig</code> command.</p> <p>Usage Examples: - <code>ip addr show</code>: Displays information about all network interfaces, including their IP addresses and MAC addresses. - <code>ip link set &lt;interface&gt; up/down</code>: Brings the specified network interface up or down. - <code>ip route show</code>: Displays the current routing table. - <code>ip route add default via &lt;gateway&gt;</code>: Adds a default gateway to the routing table. - <code>ip neigh show</code>: Displays the neighbor (ARP) table, which maps IP addresses to MAC addresses.</p>"},{"location":"resources/linux/linux-networking-tools/#route","title":"<code>route</code>","text":"<p>The <code>route</code> command is used to view and manipulate the kernel's IP routing table.</p> <p>Usage Examples: - <code>route -n</code>: Displays the routing table without resolving hostnames. - <code>route add -net &lt;network&gt;/&lt;mask&gt; gw &lt;gateway&gt;</code>: Adds a new route to the routing table. - <code>route del -net &lt;network&gt;/&lt;mask&gt;</code>: Deletes a route from the routing table. - <code>route -C</code>: Displays the kernel's routing cache, which is used for faster lookups. - <code>route -v</code>: Displays the routing table with verbose output.</p>"},{"location":"resources/linux/linux-networking-tools/#nmap","title":"<code>nmap</code>","text":"<p><code>nmap</code> (Network Mapper) is a powerful tool for network discovery and security auditing. It can be used to scan networks and identify active hosts and open ports.</p> <p>Usage Examples: - <code>nmap &lt;target_host&gt;</code>: Performs a basic TCP connect scan on the specified target host. - <code>nmap -sV &lt;target_host&gt;</code>: Performs a version scan to determine the running services and their versions on the target host. - <code>nmap -sU -p &lt;port&gt; &lt;target_host&gt;</code>: Performs a UDP scan on the specified port of the target host. - <code>nmap -p- &lt;target_host&gt;</code>: Scans all 65,535 TCP ports on the target host. - <code>nmap -sS -p22,80,443 &lt;target_host&gt;</code>: Performs a SYN scan on the specified ports of the target host.</p>"},{"location":"resources/linux/linux-networking-tools/#zenmap","title":"<code>zenmap</code>","text":"<p><code>zenmap</code> is the graphical user interface (GUI) for the <code>nmap</code> tool, providing a more user-friendly experience for network scanning and exploration.</p> <p>Usage Examples: - <code>zenmap</code>: Starts the Zenmap GUI application. - <code>zenmap &lt;target_host&gt;</code>: Starts Zenmap and immediately scans the specified target host. - <code>zenmap -p22,80,443 &lt;target_host&gt;</code>: Starts Zenmap and scans the specified ports on the target host. - <code>zenmap -sV &lt;target_host&gt;</code>: Starts Zenmap and performs a version scan on the target host. - <code>zenmap -oX &lt;output_file&gt; &lt;target_host&gt;</code>: Starts Zenmap, scans the target host, and saves the results to an XML file.</p>"},{"location":"resources/linux/linux-networking-tools/#p0f","title":"<code>p0f</code>","text":"<p><code>p0f</code> is a passive TCP/IP fingerprinting tool that can be used to identify the operating system of network hosts by analyzing their TCP/IP stack behavior.</p> <p>Usage Examples: - <code>p0f -i &lt;interface&gt;</code>: Runs <code>p0f</code> in passive mode, listening on the specified network interface for traffic. - <code>p0f -r &lt;pcap_file&gt;</code>: Analyzes a previously captured packet capture (PCAP) file. - <code>p0f -p &lt;pid&gt;</code>: Attaches <code>p0f</code> to the specified process and analyzes its network traffic. - <code>p0f -s &lt;socket&gt;</code>: Connects to the specified Unix domain socket and analyzes the traffic. - <code>p0f -U</code>: Runs <code>p0f</code> in interactive mode, displaying the identified operating systems in real-time.</p>"},{"location":"resources/linux/linux-networking-tools/#openvpn","title":"<code>openvpn</code>","text":"<p><code>openvpn</code> is a command-line tool used to establish a secure Virtual Private Network (VPN) connection.</p> <p>Usage Examples: - <code>openvpn --config &lt;config_file&gt;</code>: Starts OpenVPN using the specified configuration file. - <code>openvpn --client --remote &lt;server_address&gt; --auth-user-pass &lt;credentials_file&gt;</code>: Starts OpenVPN in client mode, connecting to the specified server with user credentials. - <code>openvpn --server --dev tun --ifconfig &lt;local_ip&gt; &lt;remote_ip&gt;</code>: Starts OpenVPN in server mode, creating a TUN interface with the specified IP addresses. - <code>openvpn --status &lt;status_file&gt;</code>: Outputs the current status of the OpenVPN connection to the specified file. - <code>openvpn --log &lt;log_file&gt;</code>: Writes the OpenVPN logs to the specified file.</p>"},{"location":"resources/linux/linux-networking-tools/#wireguard","title":"<code>wireguard</code>","text":"<p><code>wireguard</code> is a command-line tool used to manage the WireGuard VPN protocol, which is a newer, faster, and more secure alternative to OpenVPN.</p> <p>Usage Examples: - <code>wg-quick up &lt;interface&gt;</code>: Brings up a WireGuard interface and establishes the VPN connection. - <code>wg-quick down &lt;interface&gt;</code>: Tears down the WireGuard VPN connection and brings the interface down. - <code>wg show &lt;interface&gt;</code>: Displays the current status and configuration of the WireGuard interface. - <code>wg set &lt;interface&gt; peer &lt;public_key&gt; endpoint &lt;server_address&gt;:&lt;port&gt;</code>: Adds a new peer (server) to the WireGuard interface configuration. - <code>wg-quick save &lt;interface&gt;</code>: Saves the current WireGuard interface configuration to a file.</p>"},{"location":"resources/linux/linux-networking-tools/#netcat-nc","title":"netcat (nc)","text":"<p><code>netcat</code> (or <code>nc</code>) is a versatile network utility that can be used for a variety of tasks, including:</p> <p>Usage Examples:</p> <ul> <li><code>nc -l -p &lt;port&gt;</code>: Listens on the specified port for incoming connections.</li> <li><code>nc &lt;host&gt; &lt;port&gt;</code>: Connects to the specified host and port.</li> <li><code>nc -u -l -p &lt;port&gt;</code>: Listens on the specified port for incoming UDP connections.</li> <li><code>nc -u &lt;host&gt; &lt;port&gt;</code>: Connects to the specified host and port using UDP.</li> <li><code>nc -e &lt;program&gt; &lt;host&gt; &lt;port&gt;</code>: Executes the specified program upon connection.</li> <li><code>nc -c &lt;shell&gt; &lt;host&gt; &lt;port&gt;</code>: Executes the specified shell upon connection.</li> <li><code>nc -z &lt;host&gt; &lt;start_port&gt;-&lt;end_port&gt;</code>: Performs a TCP port scan on the specified port range.</li> <li><code>nc -vv &lt;host&gt; &lt;port&gt;</code>: Connects to the specified host and port in verbose mode.</li> <li><code>nc -w &lt;timeout&gt; &lt;host&gt; &lt;port&gt;</code>: Sets a timeout for the connection attempt.</li> <li><code>nc -4</code>: Forces netcat to use IPv4.</li> <li><code>nc -6</code>: Forces netcat to use IPv6.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#socat","title":"socat","text":"<p><code>socat</code> is a command-line tool that can be used to proxy a TCP socket to a UNIX domain socket, allowing for more complex network setups.</p> <p>Usage Examples:</p> <ul> <li><code>socat TCP4-LISTEN:&lt;port&gt;,reuseaddr,fork UNIX-CONNECT:/path/to/socket</code>: Listens on the specified port and forwards the connection to a UNIX domain socket.</li> <li><code>socat UNIX-LISTEN:/path/to/socket,fork TCP4:&lt;remote_host&gt;:&lt;remote_port&gt;</code>: Listens on a UNIX domain socket and forwards the connection to a remote TCP host and port.</li> <li><code>socat - TCP4:&lt;remote_host&gt;:&lt;remote_port&gt;</code>: Creates a simple TCP client, connecting to the specified remote host and port.</li> <li><code>socat - SYSTEM:'&lt;command&gt;'</code>: Executes a system command and uses the standard input/output as a socket.</li> <li><code>socat -d -d FILE:/path/to/file TCP4-LISTEN:&lt;port&gt;</code>: Listens on a port and logs all traffic to a file.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#tftptftp3","title":"tftp/tftp3","text":"<p><code>tftp</code> (Trivial File Transfer Protocol) is a simple file transfer protocol that can be used to transfer files, often for booting diskless systems or embedded devices.</p> <p>Usage Examples:</p> <ul> <li><code>tftp &lt;host&gt;</code>: Enters the interactive TFTP prompt, allowing you to transfer files.</li> <li><code>tftp &lt;host&gt; get &lt;remote_file&gt; &lt;local_file&gt;</code>: Downloads a file from the remote host to the local file.</li> <li><code>tftp &lt;host&gt; put &lt;local_file&gt; &lt;remote_file&gt;</code>: Uploads a file from the local system to the remote host.</li> <li><code>tftp -l &lt;local_file&gt; -r &lt;remote_file&gt; &lt;host&gt;</code>: Downloads a file from the remote host to the specified local file.</li> <li><code>tftp -c get &lt;remote_file&gt; &lt;local_file&gt; &lt;host&gt;</code>: Performs a one-time file download without entering the interactive prompt.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#iptables","title":"iptables","text":"<p><code>iptables</code> is the command-line tool used to configure the Linux kernel's Netfilter firewall and Network Address Translation (NAT) rules.</p> <p>Usage Examples:</p> <ul> <li><code>iptables -L</code>: Lists the current firewall rules.</li> <li><code>iptables -A &lt;chain&gt; -j &lt;target&gt;</code>: Appends a new rule to the specified chain.</li> <li><code>iptables -I &lt;chain&gt; &lt;rule_number&gt; -j &lt;target&gt;</code>: Inserts a new rule at the specified position in the chain.</li> <li><code>iptables -D &lt;chain&gt; &lt;rule_number&gt;</code>: Deletes the specified rule from the chain.</li> <li><code>iptables -t &lt;table&gt; &lt;commands&gt;</code>: Applies the specified commands to the given table (e.g., nat, mangle, raw).</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#nftables","title":"nftables","text":"<p><code>nftables</code> is a newer and more flexible firewall and packet filtering framework that replaces the older <code>iptables</code> tool.</p> <p>Usage Examples:</p> <ul> <li><code>nft add table ip filter</code>: Creates a new IP filter table.</li> <li><code>nft add chain ip filter forward { type filter hook forward priority 0; }</code>: Creates a new forward chain in the IP filter table.</li> <li><code>nft add rule ip filter forward ip protocol tcp drop</code>: Adds a rule to the forward chain to drop all TCP traffic.</li> <li><code>nft list ruleset</code>: Displays the current nftables ruleset.</li> <li><code>nft flush chain ip filter forward</code>: Flushes all rules from the specified chain.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#hping3","title":"hping3","text":"<p><code>hping3</code> is a command-line tool used to construct custom TCP/IP packets, making it useful for network testing and security assessments.</p> <p>Usage Examples:</p> <ul> <li><code>hping3 --syn --spoof &lt;src_ip&gt; &lt;dst_ip&gt;</code>: Sends a SYN packet with a spoofed source IP address to the specified destination.</li> <li><code>hping3 --udp --rand-source &lt;dst_ip&gt; --port &lt;dst_port&gt;</code>: Sends random source UDP packets to the specified destination and port.</li> <li><code>hping3 --icmp --flood &lt;dst_ip&gt;</code>: Sends a flood of ICMP echo request packets to the specified destination.</li> <li><code>hping3 --scan &lt;start_port&gt;-&lt;end_port&gt; &lt;dst_ip&gt;</code>: Performs a port scan on the specified IP address and port range.</li> <li><code>hping3 --listen</code>: Listens for incoming packets and displays their contents.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#traceroutemtr","title":"traceroute/mtr","text":"<p><code>traceroute</code> and <code>mtr</code> (My TraceRoute) are tools used to trace the network path to a remote host, displaying the latency and hop information along the way.</p> <p>Usage Examples:</p> <ul> <li><code>traceroute &lt;host&gt;</code>: Traces the network path to the specified host, displaying each hop and the round-trip time.</li> <li><code>traceroute -n &lt;host&gt;</code>: Disables DNS lookup, showing the IP addresses instead of hostnames.</li> <li><code>traceroute -p &lt;port&gt; &lt;host&gt;</code>: Specifies the destination port to use for the trace.</li> <li><code>mtr &lt;host&gt;</code>: Starts the interactive mtr tool, which provides a continuously updated traceroute-like display.</li> <li><code>mtr --report &lt;host&gt;</code>: Runs mtr in report mode, generating a single report and then exiting.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#tcptrace","title":"tcptrace","text":"<p><code>tcptrace</code> is a command-line tool used to analyze TCP dump files, providing insights into TCP connections and performance.</p> <p>Usage Examples:</p> <ul> <li><code>tcptrace &lt;pcap_file&gt;</code>: Analyzes the specified packet capture (PCAP) file and displays detailed information about the TCP connections.</li> <li><code>tcptrace --all-connections &lt;pcap_file&gt;</code>: Displays information about all TCP connections in the PCAP file.</li> <li><code>tcptrace --csv &lt;pcap_file&gt;</code>: Exports the TCP connection data to a CSV file.</li> <li><code>tcptrace --plot-tcptrace &lt;pcap_file&gt;</code>: Generates a TCP connection flow graph from the PCAP file.</li> <li><code>tcptrace --hints &lt;pcap_file&gt;</code>: Provides hints and suggestions based on the analysis of the TCP connections.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#ethtool","title":"ethtool","text":"<p><code>ethtool</code> is a command-line tool used to manage and configure Ethernet-based network device settings, such as link speed, duplex mode, and more.</p> <p>Usage Examples:</p> <ul> <li><code>ethtool &lt;interface&gt;</code>: Displays the current configuration of the specified network interface.</li> <li><code>ethtool -s &lt;interface&gt; speed &lt;speed&gt; duplex &lt;mode&gt;</code>: Sets the speed and duplex mode of the network interface.</li> <li><code>ethtool -g &lt;interface&gt;</code>: Displays the ring buffer parameters for the network interface.</li> <li><code>ethtool -k &lt;interface&gt;</code>: Displays the offload feature settings for the network interface.</li> <li><code>ethtool -i &lt;interface&gt;</code>: Displays the driver information for the network interface.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#iwconfigiw","title":"iwconfig/iw","text":"<p><code>iwconfig</code> and <code>iw</code> are tools used to configure wireless network settings, such as SSID, encryption, and other parameters.</p> <p>Usage Examples:</p> <ul> <li><code>iwconfig &lt;interface&gt; mode managed essid &lt;SSID&gt;</code>: Sets the wireless interface to managed mode and configures the SSID.</li> <li><code>iwconfig &lt;interface&gt; freq &lt;frequency&gt;</code>: Sets the frequency or channel of the wireless interface.</li> <li><code>iwconfig &lt;interface&gt; key &lt;key&gt;</code>: Sets the encryption key for the wireless interface.</li> <li><code>iw dev &lt;interface&gt; set type managed</code>: Sets the wireless interface to managed mode.</li> <li><code>iw dev &lt;interface&gt; scan</code>: Scans for available wireless networks.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#sysctl","title":"sysctl","text":"<p><code>sysctl</code> is a command-line tool used to configure Linux kernel parameters at runtime, allowing you to tune network-related settings.</p> <p>Usage Examples:</p> <ul> <li><code>sysctl -a</code>: Lists all available kernel parameters.</li> <li><code>sysctl net.ipv4.ip_forward</code>: Displays the current value of the <code>net.ipv4.ip_forward</code> kernel parameter.</li> <li><code>sysctl -w net.ipv4.ip_forward=1</code>: Sets the <code>net.ipv4.ip_forward</code> kernel parameter to 1, enabling IP forwarding.</li> <li><code>sysctl -p</code>: Loads the kernel parameters from the <code>/etc/sysctl.conf</code> file.</li> <li><code>sysctl -w net.core.somaxconn=1024</code>: Sets the maximum number of queued connection requests.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#openssl","title":"openssl","text":"<p><code>openssl</code> is a command-line tool used to generate and manage SSL/TLS certificates, which are used for secure network connections.</p> <p>Usage Examples:</p> <ul> <li><code>openssl req -new -x509 -keyout &lt;key_file&gt; -out &lt;cert_file&gt;</code>: Generates a new self-signed X.509 certificate and private key.</li> <li><code>openssl x509 -in &lt;cert_file&gt; -text -noout</code>: Displays the contents of an X.509 certificate.</li> <li><code>openssl rsa -in &lt;key_file&gt; -check</code>: Verifies the integrity of a private key.</li> <li><code>openssl s_client -connect &lt;host&gt;:&lt;port&gt;</code>: Establishes a TLS connection to the specified host and port.</li> <li><code>openssl dhparam -out &lt;dhparam_file&gt; 2048</code>: Generates Diffie-Hellman parameters for use in TLS configurations.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#stunnel","title":"stunnel","text":"<p><code>stunnel</code> is a command-line tool used to create an SSL/TLS proxy, which can be used to secure network connections to an insecure server.</p> <p>Usage Examples:</p> <ul> <li><code>stunnel &lt;config_file&gt;</code>: Runs stunnel using the specified configuration file.</li> <li><code>stunnel -p &lt;cert_file&gt; -k &lt;key_file&gt;</code>: Runs stunnel with the specified certificate and private key files.</li> <li><code>stunnel -c -d &lt;local_port&gt; -r &lt;remote_host&gt;:&lt;remote_port&gt;</code>: Runs stunnel in client mode, forwarding local connections to a remote host and port.</li> <li><code>stunnel -l &lt;local_port&gt; -r &lt;remote_host&gt;:&lt;remote_port&gt;</code>: Runs stunnel in server mode, accepting local connections and forwarding them to a remote host and port.</li> <li><code>stunnel -v</code>: Runs stunnel in verbose mode, providing more detailed logging.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#iptrafnethogs","title":"iptraf/nethogs","text":"<p><code>iptraf</code> and <code>nethogs</code> are command-line tools used to provide real-time information about network bandwidth usage and performance.</p> <p>Usage Examples:</p> <ul> <li><code>iptraf -i &lt;interface&gt;</code>: Runs the interactive iptraf tool, displaying network traffic statistics for the specified interface.</li> <li><code>iptraf -s &lt;interface&gt;</code>: Runs iptraf in server mode, writing the traffic statistics to a log file.</li> <li><code>nethogs &lt;interface&gt;</code>: Runs the nethogs tool, which displays the network traffic per process.</li> <li><code>nethogs -t</code>: Runs nethogs in terse mode, showing only the process names and their network usage.</li> <li><code>nethogs -u</code>: Runs nethogs in user mode, showing the network usage per user instead of per process.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#abjmeterwrk","title":"ab/JMeter/wrk","text":"<p><code>ab</code> (Apache Bench), <code>JMeter</code>, and <code>wrk</code> are popular benchmarking tools used for testing the performance of web servers and APIs.</p> <p>Usage Examples:</p> <ul> <li><code>ab -n &lt;requests&gt; -c &lt;concurrency&gt; &lt;url&gt;</code>: Runs the Apache Bench tool, performing the specified number of requests with the given concurrency level.</li> <li><code>jmeter -n -t &lt;jmx_file&gt; -l &lt;results_file&gt;</code>: Runs JMeter in non-GUI mode, using the specified test plan file and writing the results to a file.</li> <li><code>wrk -t&lt;threads&gt; -c&lt;connections&gt; -d&lt;duration&gt; &lt;url&gt;</code>: Runs the wrk tool, simulating the specified number of threads and connections for the given duration.</li> <li><code>jmeter -h</code>: Displays the help menu for the JMeter command-line options.</li> <li><code>wrk --latency &lt;url&gt;</code>: Runs wrk and displays the latency statistics in addition to the throughput.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#python-m-simplehttpserver","title":"python -m SimpleHTTPServer","text":"<p>The <code>python -m SimpleHTTPServer</code> command can be used to quickly serve files from the current directory using a simple HTTP server.</p> <p>Usage Examples:</p> <ul> <li><code>python -m SimpleHTTPServer &lt;port&gt;</code>: Starts a simple HTTP server on the specified port, serving files from the current directory.</li> <li><code>python -m http.server &lt;port&gt;</code>: The Python 3 equivalent of the above command, starting a simple HTTP server on the specified port.</li> <li><code>python -m SimpleHTTPServer</code>: Starts a simple HTTP server on the default port 8000, serving files from the current directory.</li> <li><code>python -m http.server</code>: The Python 3 equivalent of the above command, starting a simple HTTP server on the default port 8000.</li> <li><code>python -m SimpleHTTPServer --help</code>: Displays the available options for the SimpleHTTPServer module.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#ipealc","title":"ipealc","text":"<p><code>ipealc</code> is a command-line tool used to calculate IP addresses and subnet information.</p> <p>Usage Examples:</p> <ul> <li><code>ipealc &lt;ip_address&gt; &lt;subnet_mask&gt;</code>: Calculates the network address, broadcast address, and available host range for the specified IP address and subnet mask.</li> <li><code>ipealc -c &lt;cidr_notation&gt;</code>: Calculates the subnet mask and other information based on the CIDR notation.</li> <li><code>ipealc -n &lt;network_address&gt; &lt;prefix_length&gt;</code>: Calculates the network information based on the network address and prefix length.</li> <li><code>ipealc -h</code>: Displays the help menu for the ipealc tool, including all available options and usage examples.</li> <li><code>ipealc -v</code>: Displays the version information for the ipealc tool.</li> </ul>"},{"location":"resources/linux/linux-networking-tools/#nsenter","title":"nsenter","text":"<p><code>nsenter</code> is a command-line tool used to enter a container's network namespace, allowing you to troubleshoot and manage the container's network settings.</p> <p>Usage Examples:</p> <ul> <li><code>nsenter -t &lt;container_pid&gt; -n &lt;command&gt;</code>: Runs the specified command in the context of the container's network namespace.</li> <li><code>nsenter -t &lt;container_pid&gt; -n ip addr</code>: Displays the network interfaces and IP addresses within the container's network namespace.</li> <li><code>nsenter -t &lt;container_pid&gt; -n ip route</code>: Displays the routing table within the container's network namespace.</li> <li><code>nsenter -t &lt;container_pid&gt; -n tcpdump -i eth0</code>: Captures network traffic within the container's network namespace.</li> <li><code>nsenter -t &lt;container_pid&gt; -n /bin/bash</code>: Starts an interactive shell within the context of the container's network namespace.</li> </ul>"},{"location":"resources/linux/linux-perf-benchmark-tools/","title":"Linux Performance Benchmark Tools Guide","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Architecture Overview</li> <li>Benchmark Tools by Layer</li> <li>Hardware Layer Benchmarks</li> <li>Operating System Layer Benchmarks</li> <li>Application Layer Benchmarks</li> <li>Network Performance Tools</li> <li>Detailed Tool Reference</li> </ol>"},{"location":"resources/linux/linux-perf-benchmark-tools/#system-architecture-overview","title":"System Architecture Overview","text":"<p>The Linux system architecture can be benchmarked at multiple layers using specialized tools. Here's a breakdown of the architecture and associated benchmark tools:</p>"},{"location":"resources/linux/linux-perf-benchmark-tools/#hardware-components","title":"Hardware Components","text":"<ul> <li>CPUs</li> <li>GPUs/TPUs</li> <li>DRAM</li> <li>HBM (High Bandwidth Memory)</li> <li>FPGAs</li> <li>I/O Controllers</li> <li>Network Controllers</li> <li>SMC (System Management Controller)</li> <li>Fans</li> </ul>"},{"location":"resources/linux/linux-perf-benchmark-tools/#operating-system-components","title":"Operating System Components","text":"<ol> <li>Device Drivers</li> <li>Block Device</li> <li>Network Device</li> <li>Virtual Memory</li> <li>File Systems</li> <li>TCP/UDP</li> <li>IP Stack</li> <li>System Call Interface</li> <li>Scheduler</li> </ol>"},{"location":"resources/linux/linux-perf-benchmark-tools/#application-layer","title":"Application Layer","text":"<ul> <li>Applications</li> <li>System Libraries</li> <li>VFS (Virtual File System)</li> <li>Sockets</li> </ul>"},{"location":"resources/linux/linux-perf-benchmark-tools/#benchmark-tools-by-layer","title":"Benchmark Tools by Layer","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#system-benchmarks","title":"System Benchmarks","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#sysbench","title":"sysbench","text":"<pre><code># CPU benchmark\nsysbench cpu run\n\n# Memory benchmark\nsysbench memory run\n\n# File I/O benchmark\nsysbench fileio --file-test-mode=seqwr run\n\n# MySQL benchmark\nsysbench mysql-oltp-read-write run\n\n# Common options\n--threads=4              # Number of threads to use\n--time=60               # Test duration in seconds\n--events=1000           # Number of events to process\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#unixbench","title":"UnixBench","text":"<pre><code># Run complete benchmark suite\n./Run\n\n# Run specific tests\n./Run dhry2reg\n./Run whetstone\n./Run execl\n./Run file1\n./Run shell1\n\n# Multi-CPU tests\n./Run -c 4              # Test with 4 copies\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#application-level-benchmarks","title":"Application Level Benchmarks","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#ab-apache-benchmark","title":"ab (Apache Benchmark)","text":"<pre><code># Basic HTTP GET benchmark\nab -n 1000 -c 10 http://localhost/\n\n# POST request benchmark\nab -n 1000 -c 10 -p post.data http://localhost/form\n\n# Common options\n-k                      # Use HTTP KeepAlive\n-H \"Header: value\"      # Add custom header\n-C \"cookie=value\"       # Add cookie\n-T \"content/type\"       # Set content-type\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#wrk-http-benchmarking-tool","title":"wrk (HTTP Benchmarking Tool)","text":"<pre><code># Basic HTTP benchmark\nwrk -t12 -c400 -d30s http://localhost\n\n# With custom script\nwrk -t2 -c100 -d30s -s script.lua http://localhost\n\n# Common options\n-t12                    # 12 threads\n-c400                   # 400 connections\n-d30s                   # 30 second duration\n--timeout 30s           # 30 second timeout\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#hardware-benchmarks","title":"Hardware Benchmarks","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#mlperf-machine-learning-performance","title":"MLPerf (Machine Learning Performance)","text":"<pre><code># Run training benchmark\nmlperf-train --config=resnet50 --framework=tensorflow\n\n# Run inference benchmark\nmlperf-inference --scenario=Server --model=resnet50\n\n# Common options\n--backend=gpu           # Use GPU backend\n--precision=fp16        # Use FP16 precision\n--dataset=imagenet      # Specify dataset\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#perf-bench","title":"perf bench","text":"<pre><code># Scheduler benchmarks\nperf bench sched pipe\nperf bench sched messaging\n\n# Memory benchmarks\nperf bench mem memcpy\nperf bench mem memset\n\n# Futex benchmarks\nperf bench futex wake\nperf bench futex wake-parallel\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#storage-benchmarks","title":"Storage Benchmarks","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#fio-flexible-io-tester","title":"fio (Flexible I/O Tester)","text":"<pre><code># Sequential read test\nfio --name=seq-read --rw=read --size=4G\n\n# Random write test\nfio --name=rand-write --rw=randwrite --bs=4k --size=1G\n\n# Mixed workload\nfio --name=mixed --rw=randrw --bs=4k --size=1G\n\n# Common options\n--iodepth=16           # I/O queue depth\n--direct=1             # Use O_DIRECT\n--numjobs=4            # Number of parallel jobs\n--runtime=60           # Test duration in seconds\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#dd-disk-performance","title":"dd (Disk Performance)","text":"<pre><code># Write speed test\ndd if=/dev/zero of=test bs=1G count=1 oflag=direct\n\n# Read speed test\ndd if=test of=/dev/null bs=1G count=1 iflag=direct\n\n# Common options\nbs=1M                  # Block size\ncount=1000             # Number of blocks\nconv=fdatasync         # Sync data before finishing\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#network-benchmarks","title":"Network Benchmarks","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#iperfiperf3","title":"iperf/iperf3","text":"<pre><code># Server mode\niperf3 -s\n\n# Client mode TCP test\niperf3 -c server_ip\n\n# UDP bandwidth test\niperf3 -c server_ip -u -b 100M\n\n# Common options\n-P 4                   # Number of parallel streams\n-i 1                   # Report interval\n-t 30                  # Test duration\n-w 256K                # Window size\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#ttcp-test-tcp","title":"ttcp (Test TCP)","text":"<pre><code># Receiver mode\nttcp -r -s\n\n# Transmitter mode\nttcp -t -s server_ip\n\n# Common options\n-l 8192                # Buffer size\n-n 2048                # Number of buffers\n-p 5001                # Port number\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#system-call-benchmarks","title":"System Call Benchmarks","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#lmbench","title":"lmbench","text":"<pre><code># Run complete benchmark suite\nlmbench-run\n\n# Memory latency benchmark\nlat_mem_rd 1024 512\n\n# Context switch benchmark\nlat_ctx -s 64K 2 4 8 16\n\n# Common options\n-P 1                   # Number of processes\n-W 3                   # Warmup time\n-N 5                   # Number of runs\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#system-tools","title":"System Tools","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#jmeter-application-performance-testing","title":"jmeter (Application Performance Testing)","text":"<pre><code># Run test plan\njmeter -n -t test.jmx -l results.jtl\n\n# Generate HTML report\njmeter -g results.jtl -o report_directory\n\n# Common options\n-Jthreads=10           # Number of threads\n-Jduration=300         # Test duration\n-Jrampup=60            # Ramp-up period\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#network-diagnostic-tools","title":"Network Diagnostic Tools","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#hping3","title":"hping3","text":"<pre><code># TCP SYN flood test\nhping3 -S -p 80 --flood target_ip\n\n# ICMP ping test\nhping3 -1 target_ip\n\n# Common options\n--fast                 # Send packets fast\n--rand-source         # Random source address\n-i u100               # Wait 100 microseconds between packets\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#pchar-network-performance","title":"pchar (Network Performance)","text":"<pre><code># Measure path characteristics\npchar network_path\n\n# Common options\n-i interface           # Specify interface\n-q                     # Quiet mode\n-v                     # Verbose output\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#hardware-parameter-tools","title":"Hardware Parameter Tools","text":""},{"location":"resources/linux/linux-perf-benchmark-tools/#hdparm-hard-drive-parameters","title":"hdparm (Hard Drive Parameters)","text":"<pre><code># Disk read timing\nhdparm -t /dev/sda\n\n# Cache read timing\nhdparm -T /dev/sda\n\n# Common options\n-i                     # Show device information\n-I                     # Detailed device information\n--direct               # Use O_DIRECT\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#best-practices-for-benchmarking","title":"Best Practices for Benchmarking","text":"<ol> <li>Preparation</li> <li>Clean system state</li> <li>Consistent environment</li> <li>Minimal background processes</li> <li> <p>Representative workloads</p> </li> <li> <p>Execution</p> </li> <li>Multiple iterations</li> <li>Varying parameters</li> <li>Record all conditions</li> <li> <p>Monitor system state</p> </li> <li> <p>Analysis</p> </li> <li>Statistical analysis</li> <li>Outlier detection</li> <li>Performance regression</li> <li> <p>Bottleneck identification</p> </li> <li> <p>Documentation</p> </li> <li>Hardware configuration</li> <li>Software versions</li> <li>Test parameters</li> <li>Environmental factors</li> </ol>"},{"location":"resources/linux/linux-perf-benchmark-tools/#common-benchmarking-scenarios","title":"Common Benchmarking Scenarios","text":"<ol> <li>Web Server Performance</li> </ol> <pre><code># Using ab\nab -n 10000 -c 100 http://localhost/\n# Using wrk\nwrk -t4 -c100 -d30s http://localhost/\n</code></pre> <ol> <li>Database Performance</li> </ol> <pre><code># Using sysbench\nsysbench oltp_read_write --table-size=1000000 prepare\nsysbench oltp_read_write --table-size=1000000 run\n</code></pre> <ol> <li>Storage Performance</li> </ol> <pre><code># Using fio\nfio --name=randwrite --ioengine=libaio --iodepth=1 --rw=randwrite --bs=4k --size=4g\n</code></pre> <ol> <li>Network Performance</li> </ol> <pre><code># Using iperf3\niperf3 -c server_ip -t 60 -P 4\n</code></pre>"},{"location":"resources/linux/linux-perf-benchmark-tools/#performance-metrics-to-monitor","title":"Performance Metrics to Monitor","text":"<ol> <li>CPU Metrics</li> <li>Utilization</li> <li>Load average</li> <li>Context switches</li> <li> <p>Cache hits/misses</p> </li> <li> <p>Memory Metrics</p> </li> <li>Usage</li> <li>Page faults</li> <li>Swap usage</li> <li> <p>Cache efficiency</p> </li> <li> <p>Disk Metrics</p> </li> <li>IOPS</li> <li>Throughput</li> <li>Latency</li> <li> <p>Queue depth</p> </li> <li> <p>Network Metrics</p> </li> <li>Bandwidth</li> <li>Latency</li> <li>Packet loss</li> <li>Connection states</li> </ol>"},{"location":"resources/linux/linux-perf-benchmark-tools/#additional-resources","title":"Additional Resources","text":"<ol> <li>Documentation</li> <li>Man pages for tools</li> <li>Vendor documentation</li> <li>Performance tuning guides</li> <li> <p>Benchmark specifications</p> </li> <li> <p>Monitoring Tools</p> </li> <li>Grafana</li> <li>Prometheus</li> <li>Telegraf</li> <li> <p>Ganglia</p> </li> <li> <p>Analysis Tools</p> </li> <li>R Statistical Software</li> <li>Python with NumPy/Pandas</li> <li>Jupyter Notebooks</li> <li> <p>Excel/LibreOffice Calc</p> </li> <li> <p>Community Resources</p> </li> <li>Linux Performance website</li> <li>Performance mailing lists</li> <li>Tool-specific forums</li> <li>Academic papers</li> </ol>"},{"location":"resources/linux/linux-performace-tuning-tools/","title":"Linux Performance Tuning Tools Cheatlist","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>System Architecture Overview</li> <li>Performance Tool Categories</li> <li>Detailed Tool Analysis</li> <li>Command Cheatsheet</li> </ol>"},{"location":"resources/linux/linux-performace-tuning-tools/#introduction","title":"Introduction","text":"<p>This comprehensive guide covers Linux performance analysis and tuning tools across different layers of the operating system stack, from applications to hardware. The tools are organized based on their operational layer and specific functionality.</p>"},{"location":"resources/linux/linux-performace-tuning-tools/#system-architecture-overview","title":"System Architecture Overview","text":"<p>The Linux system architecture consists of several layers:</p> <ol> <li>Application Layer</li> <li>System Libraries</li> <li>System Call Interface</li> <li>Kernel Space</li> <li>VFS (Virtual File System)</li> <li>Network Stack</li> <li>Scheduler</li> <li>Device Drivers</li> <li>Hardware Layer</li> </ol>"},{"location":"resources/linux/linux-performace-tuning-tools/#performance-tool-categories","title":"Performance Tool Categories","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#application-level-tools","title":"Application Level Tools","text":"Tool Layer Purpose App Config Application Application configuration management env System Libraries Environment variable management tune2fs File System File system parameters tuning"},{"location":"resources/linux/linux-performace-tuning-tools/#system-level-tools","title":"System Level Tools","text":"Tool Layer Purpose nice/renice Scheduler Process priority adjustment taskset CPU Management CPU affinity control ulimit Resource Control Resource limits management sysctl Kernel Parameters Kernel parameter tuning"},{"location":"resources/linux/linux-performace-tuning-tools/#kernel-level-tools","title":"Kernel Level Tools","text":"Tool Layer Purpose stap Kernel Tracing SystemTap scripts for kernel analysis kpatch Kernel Patching Live kernel patching ionice I/O Scheduling I/O priority management MegaCli Storage Management RAID controller management"},{"location":"resources/linux/linux-performace-tuning-tools/#network-tools","title":"Network Tools","text":"Tool Layer Purpose ip route Network Stack IP routing table management tc Traffic Control Network traffic control ethtool Network Driver Network interface configuration"},{"location":"resources/linux/linux-performace-tuning-tools/#storage-tools","title":"Storage Tools","text":"Tool Layer Purpose hdparm Disk Management Hard drive parameter management blockdev Block Devices Block device management swapon Memory Management Swap space control"},{"location":"resources/linux/linux-performace-tuning-tools/#detailed-tool-analysis","title":"Detailed Tool Analysis","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#system-control-tools","title":"System Control Tools","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#sysctl","title":"sysctl","text":"<pre><code># View all system parameters\nsysctl -a\n\n# Set a specific parameter\nsysctl -w vm.swappiness=60\n\n# Load settings from file\nsysctl -p /etc/sysctl.conf\n\n# Common parameters\nsysctl kernel.pid_max=4194304\nsysctl vm.max_map_count=262144\nsysctl net.ipv4.tcp_wmem=\"4096 87380 16777216\"\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#nicerenice","title":"nice/renice","text":"<pre><code># Start a process with specific priority (-20 to 19)\nnice -n 10 ./myprocess\n\n# Change priority of running process\nrenice -n 5 -p PID\n\n# Change priority for all processes of a user\nrenice -n 3 -u username\n\n# Change priority for process group\nrenice -n 7 -g process_group\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#taskset","title":"taskset","text":"<pre><code># Launch process on specific CPU\ntaskset -c 0 ./myprocess\n\n# Move running process to specific CPU\ntaskset -pc 1 PID\n\n# View process CPU affinity\ntaskset -p PID\n\n# Set CPU affinity using mask\ntaskset 0x01 ./myprocess\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#storage-management-tools","title":"Storage Management Tools","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#ionice","title":"ionice","text":"<pre><code># Set I/O scheduling class and priority\nionice -c 2 -n 0 -p PID\n\n# Run command with best-effort scheduling\nionice -c 2 -n 0 command\n\n# View process I/O scheduling\nionice -p PID\n\n# Set real-time I/O priority\nionice -c 1 -n 0 command\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#hdparm","title":"hdparm","text":"<pre><code># Get drive parameters\nhdparm -I /dev/sda\n\n# Set drive performance parameters\nhdparm -d1 -A1 -m16 -u1 -a64 /dev/sda\n\n# Perform drive speed test\nhdparm -tT /dev/sda\n\n# Enable/disable drive caching\nhdparm -W1 /dev/sda\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#blockdev","title":"blockdev","text":"<pre><code># Get device parameters\nblockdev --getsize64 /dev/sda\n\n# Set read-ahead buffer\nblockdev --setra 4096 /dev/sda\n\n# Flush device buffers\nblockdev --flushbufs /dev/sda\n\n# Set device read-only\nblockdev --setro /dev/sda\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#network-management-tools","title":"Network Management Tools","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#ethtool","title":"ethtool","text":"<pre><code># View interface settings\nethtool eth0\n\n# Set interface speed and duplex\nethtool -s eth0 speed 1000 duplex full\n\n# Show interface statistics\nethtool -S eth0\n\n# Set rx/tx ring parameters\nethtool -G eth0 rx 4096 tx 4096\n\n# Enable/disable features\nethtool -K eth0 tso on gso on gro on\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#tc-traffic-control","title":"tc (Traffic Control)","text":"<pre><code># Add traffic shaping rule\ntc qdisc add dev eth0 root tbf rate 1mbit burst 32kbit latency 400ms\n\n# Show queueing disciplines\ntc qdisc show dev eth0\n\n# Add classification rule\ntc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dst 192.168.1.0/24 flowid 1:1\n\n# Delete all traffic rules\ntc qdisc del dev eth0 root\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#ip-route","title":"ip route","text":"<pre><code># Show routing table\nip route show\n\n# Add static route\nip route add 192.168.2.0/24 via 192.168.1.1\n\n# Add route with metric\nip route add default via 192.168.1.1 metric 100\n\n# Delete route\nip route del 192.168.2.0/24\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#memory-management-tools","title":"Memory Management Tools","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#numactls","title":"numactls","text":"<pre><code># Show NUMA topology\nnumactl --hardware\n\n# Run process on specific node\nnumactl --membind=0 --cpunodebind=0 command\n\n# Show NUMA statistics\nnumactl --show\n\n# Set NUMA policy\nnumactl --interleave=all command\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#swaponswapoff","title":"swapon/swapoff","text":"<pre><code># Enable swap file/partition\nswapon /swapfile\n\n# Disable swap\nswapoff -a\n\n# Show swap usage\nswapon --show\n\n# Set swap priority\nswapon -p 1 /dev/sda2\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#kernel-tracing-tools","title":"Kernel Tracing Tools","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#systemtap-stap","title":"SystemTap (stap)","text":"<pre><code># Compile and run SystemTap script\nstap script.stp\n\n# List available probe points\nstap -l 'kernel.function(\"*\")'\n\n# Create kernel module\nstap -p4 script.stp\n\n# Run with verbose output\nstap -v script.stp\n\n# Example SystemTap script for syscall tracing\ncat &lt;&lt; EOF &gt; syscall_trace.stp\nprobe syscall.* {\n  printf(\"%s(%d) syscall: %s\\n\",\n         execname(), pid(), name)\n}\nEOF\nstap syscall_trace.stp\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#kpatch","title":"kpatch","text":"<pre><code># List active patches\nkpatch list\n\n# Apply kernel patch\nkpatch load patch.ko\n\n# Remove kernel patch\nkpatch unload patch.ko\n\n# Enable automatic loading\nkpatch enable patch.ko\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#file-system-tools","title":"File System Tools","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#tune2fs","title":"tune2fs","text":"<pre><code># Show filesystem information\ntune2fs -l /dev/sda1\n\n# Change filesystem parameters\ntune2fs -c 30 -i 60d /dev/sda1\n\n# Enable/disable filesystem features\ntune2fs -O has_journal,extent /dev/sda1\n\n# Set filesystem label\ntune2fs -L \"ROOT_FS\" /dev/sda1\n</code></pre>"},{"location":"resources/linux/linux-performace-tuning-tools/#command-cheatsheet","title":"Command Cheatsheet","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#system-analysis","title":"System Analysis","text":"Command Purpose Common Usage <code>top</code> Process monitoring <code>top -b -n 1</code> <code>htop</code> Interactive process viewer <code>htop -d 10</code> <code>vmstat</code> Virtual memory statistics <code>vmstat 1 10</code> <code>iostat</code> I/O statistics <code>iostat -xz 1</code> <code>mpstat</code> CPU statistics <code>mpstat -P ALL 1</code> <code>sar</code> System activity reporter <code>sar -n DEV 1</code>"},{"location":"resources/linux/linux-performace-tuning-tools/#resource-limits","title":"Resource Limits","text":"Command Purpose Example <code>ulimit -n</code> File descriptor limit <code>ulimit -n 65535</code> <code>ulimit -u</code> Process limit <code>ulimit -u 16384</code> <code>ulimit -m</code> Memory limit <code>ulimit -m unlimited</code> <code>ulimit -v</code> Virtual memory limit <code>ulimit -v unlimited</code>"},{"location":"resources/linux/linux-performace-tuning-tools/#network-analysis","title":"Network Analysis","text":"Command Purpose Example <code>ss</code> Socket statistics <code>ss -tunapl</code> <code>netstat</code> Network statistics <code>netstat -tulpn</code> <code>iptraf</code> Real-time network statistics <code>iptraf-ng -i all</code> <code>tcpdump</code> Packet analyzer <code>tcpdump -i eth0</code>"},{"location":"resources/linux/linux-performace-tuning-tools/#storage-analysis","title":"Storage Analysis","text":"Command Purpose Example <code>df</code> Disk space usage <code>df -h</code> <code>du</code> Directory space usage <code>du -sh *</code> <code>iotop</code> I/O monitoring <code>iotop -o</code> <code>lsof</code> List open files <code>lsof -p PID</code>"},{"location":"resources/linux/linux-performace-tuning-tools/#process-management","title":"Process Management","text":"Command Purpose Example <code>ps</code> Process status <code>ps aux</code> <code>pstree</code> Process tree <code>pstree -p</code> <code>strace</code> System call tracer <code>strace -p PID</code> <code>ltrace</code> Library call tracer <code>ltrace -p PID</code>"},{"location":"resources/linux/linux-performace-tuning-tools/#memory-analysis","title":"Memory Analysis","text":"Command Purpose Example <code>free</code> Memory usage <code>free -m</code> <code>pmap</code> Process memory map <code>pmap -x PID</code> <code>smem</code> Memory reporter <code>smem -t</code> <code>valgrind</code> Memory debugger <code>valgrind --leak-check=full</code>"},{"location":"resources/linux/linux-performace-tuning-tools/#performance-profiling","title":"Performance Profiling","text":"Command Purpose Example <code>perf</code> Performance analysis <code>perf record -a</code> <code>oprofile</code> System profiler <code>operf ./myapp</code> <code>gprof</code> GNU profiler <code>gprof ./myapp</code> <code>ftrace</code> Function tracer <code>trace-cmd record -p function</code>"},{"location":"resources/linux/linux-performace-tuning-tools/#best-practices","title":"Best Practices","text":"<ol> <li>Monitoring Hierarchy</li> <li>Start with high-level tools (top, vmstat)</li> <li>Drill down with specific tools (iostat, netstat)</li> <li> <p>Use specialized tools for detailed analysis</p> </li> <li> <p>Resource Management</p> </li> <li>Set appropriate limits with ulimit</li> <li>Monitor resource usage regularly</li> <li> <p>Implement proper capacity planning</p> </li> <li> <p>Performance Tuning</p> </li> <li>Make one change at a time</li> <li>Document all changes</li> <li> <p>Measure impact before and after</p> </li> <li> <p>Network Optimization</p> </li> <li>Monitor bandwidth usage</li> <li>Configure appropriate buffer sizes</li> <li> <p>Use traffic shaping when needed</p> </li> <li> <p>Storage Performance</p> </li> <li>Monitor I/O patterns</li> <li>Set appropriate scheduler</li> <li> <p>Optimize filesystem parameters</p> </li> <li> <p>Process Management</p> </li> <li>Set appropriate priorities</li> <li>Monitor resource consumption</li> <li>Use cgroups for resource control</li> </ol>"},{"location":"resources/linux/linux-performace-tuning-tools/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"resources/linux/linux-performace-tuning-tools/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>High CPU Usage</li> </ol> <pre><code># Identify CPU-intensive processes\ntop -b -n 1 | head -n 20\n\n# Check process priorities\nps -el | sort -nr -k 4\n\n# Set CPU affinity\ntaskset -pc 0-3 PID\n</code></pre> <ol> <li>Memory Problems</li> </ol> <pre><code># Check memory usage\nfree -h\nvmstat 1\n\n# Find memory leaks\nvalgrind --leak-check=full ./application\n\n# Clear page cache\necho 3 &gt; /proc/sys/vm/drop_caches\n</code></pre> <ol> <li>I/O Bottlenecks</li> </ol> <pre><code># Monitor I/O usage\niostat -xz 1\n\n# Check I/O scheduling\ncat /sys/block/sda/queue/scheduler\n\n# Set I/O priority\nionice -c 2 -n 0 -p PID\n</code></pre> <ol> <li>Network Issues</li> </ol> <pre><code># Monitor network traffic\niftop -i eth0\n\n# Check network settings\nethtool eth0\n\n# Monitor connections\nnetstat -tunapl\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/","title":"Linux Static Performance Tools Cheatsheet","text":""},{"location":"resources/linux/linux-static-performace-tools/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Architecture Overview</li> <li>Performance Analysis Tools by Layer</li> <li>Hardware Layer Tools</li> <li>Operating System Layer Tools</li> <li>Application Layer Tools</li> <li>Detailed Tool Reference</li> </ol>"},{"location":"resources/linux/linux-static-performace-tools/#system-architecture-overview","title":"System Architecture Overview","text":"<p>The Linux system architecture consists of multiple layers, each with specific performance monitoring and analysis tools. Here's a detailed breakdown of each layer and its components:</p>"},{"location":"resources/linux/linux-static-performace-tools/#hardware-layer","title":"Hardware Layer","text":"<ul> <li>CPUs</li> <li>DRAM</li> <li>I/O Controllers</li> <li>Network Controllers</li> <li>Storage Devices</li> </ul>"},{"location":"resources/linux/linux-static-performace-tools/#operating-system-layer-components","title":"Operating System Layer Components","text":"<ol> <li>Device Drivers</li> <li>Block Device</li> <li>Network Device</li> <li>Virtual Memory</li> <li>File Systems</li> <li>TCP/UDP</li> <li>IP Stack</li> <li>System Call Interface</li> <li>Scheduler</li> <li>Clock Source</li> </ol>"},{"location":"resources/linux/linux-static-performace-tools/#application-layer","title":"Application Layer","text":"<ul> <li>Applications</li> <li>System Libraries</li> <li>VFS (Virtual File System)</li> <li>Sockets</li> </ul>"},{"location":"resources/linux/linux-static-performace-tools/#performance-analysis-tools-by-layer","title":"Performance Analysis Tools by Layer","text":""},{"location":"resources/linux/linux-static-performace-tools/#hardware-level-tools","title":"Hardware Level Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#cpu-analysis-tools","title":"CPU Analysis Tools","text":"<pre><code># CPU information and statistics\n/proc/cpuinfo    # Detailed CPU information\ncpuid            # CPU identification and features\nlscpu            # CPU architecture information\ncpu-x            # CPU identification tool\n\n# CPU Performance Monitoring\nnumact1          # NUMA topology and statistics\nlstopo           # Hardware topology viewer\ndmidecode        # DMI table decoder\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#memory-analysis","title":"Memory Analysis","text":"<pre><code># Memory statistics and information\nfree -m          # Memory usage overview\nvmstat           # Virtual memory statistics\ndmidecode        # Memory hardware information\n\n# Memory Performance Tools\nlstopo           # Memory topology visualization\nnumact1          # NUMA memory statistics\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#operating-system-level-tools","title":"Operating System Level Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#file-system-tools","title":"File System Tools","text":"<pre><code># Disk and Filesystem Analysis\ndf -h            # Filesystem usage\nlsblk            # Block device information\nblockdev         # Block device operations\nsmartctl         # SMART disk monitoring\nfdisk -l         # Disk partition information\nlsusb            # USB device information\n\n# Advanced Storage Analysis\nmdadm            # RAID management and monitoring\ndmesg            # Storage device messages\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#network-analysis-tools","title":"Network Analysis Tools","text":"<pre><code># Basic Network Tools\nip route         # IP routing table\ntc              # Traffic control\nethtool         # Network interface settings\niwconfig        # Wireless interface configuration\nlldptool        # Link Layer Discovery Protocol tool\n\n# Network Statistics\nnetstat         # Network statistics\nss              # Socket statistics\nip              # IP configuration and statistics\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#system-call-interface-tools","title":"System Call Interface Tools","text":"<pre><code># System Call Monitoring\nstrace          # System call tracer\nltrace          # Library call tracer\nsyscall         # System call information\nsysctl          # Kernel parameter configuration\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#scheduler-analysis","title":"Scheduler Analysis","text":"<pre><code># Scheduler Tools\nschedtool       # Process scheduler configuration\nchrt            # Real-time scheduler priorities\ntaskset         # CPU affinity configuration\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#application-level-tools","title":"Application Level Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#process-analysis","title":"Process Analysis","text":"<pre><code># Process Monitoring\ntop             # Process activity monitoring\nhtop            # Interactive process viewer\nps              # Process status\npstree          # Process hierarchy view\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#system-library-analysis","title":"System Library Analysis","text":"<pre><code># Library Tools\nldd             # Shared library dependencies\nldconfig        # Library path configuration\nld              # Link editor for object files\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#detailed-tool-reference","title":"Detailed Tool Reference","text":""},{"location":"resources/linux/linux-static-performace-tools/#system-information-tools","title":"System Information Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#sysctl","title":"sysctl","text":"<pre><code># View all system parameters\nsysctl -a\n\n# View specific parameter\nsysctl kernel.hostname\n\n# Modify parameter\nsysctl -w kernel.hostname=newname\n\n# Load settings from file\nsysctl -p /etc/sysctl.conf\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#dmesg","title":"dmesg","text":"<pre><code># View kernel messages\ndmesg\n\n# Clear kernel ring buffer\ndmesg -c\n\n# Show human-readable timestamps\ndmesg -T\n\n# Follow new messages\ndmesg -w\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#storage-performance-tools","title":"Storage Performance Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#smartctl","title":"smartctl","text":"<pre><code># Check disk health\nsmartctl -a /dev/sda\n\n# Run short self-test\nsmartctl -t short /dev/sda\n\n# Show test results\nsmartctl -l selftest /dev/sda\n\n# Enable SMART\nsmartctl -s on /dev/sda\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#iostat","title":"iostat","text":"<pre><code># Basic I/O statistics\niostat\n\n# Extended statistics\niostat -x\n\n# Device utilization\niostat -d\n\n# Updates every 2 seconds\niostat 2\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#network-performance-tools","title":"Network Performance Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#ethtool","title":"ethtool","text":"<pre><code># Show interface settings\nethtool eth0\n\n# Show interface statistics\nethtool -S eth0\n\n# Set interface speed\nethtool -s eth0 speed 1000\n\n# Check link status\nethtool -i eth0\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#tc-traffic-control","title":"tc (Traffic Control)","text":"<pre><code># Show queueing discipline\ntc qdisc show\n\n# Add rate limiting\ntc qdisc add dev eth0 root tbf rate 1mbit burst 32kbit latency 400ms\n\n# Show filter rules\ntc filter show dev eth0\n\n# Delete all rules\ntc qdisc del dev eth0 root\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#process-management-tools","title":"Process Management Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#schedtool","title":"schedtool","text":"<pre><code># Show process scheduler info\nschedtool -p 1234\n\n# Set SCHED_FIFO policy\nschedtool -F -p 50 1234\n\n# Set CPU affinity\nschedtool -a 0-3 1234\n\n# Show all scheduler policies\nschedtool -h\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#numact1","title":"numact1","text":"<pre><code># Show NUMA topology\nnumactl --hardware\n\n# Run command on specific node\nnumactl --membind=0 command\n\n# Show NUMA statistics\nnumactl --show\n\n# Set memory policy\nnumactl --preferred=0 command\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#virtual-memory-analysis","title":"Virtual Memory Analysis","text":""},{"location":"resources/linux/linux-static-performace-tools/#vmstat","title":"vmstat","text":"<pre><code># Memory statistics\nvmstat\n\n# Detailed memory info\nvmstat -s\n\n# Active/inactive memory\nvmstat -a\n\n# Disk statistics\nvmstat -d\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#advanced-analysis-tools","title":"Advanced Analysis Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#systemtap","title":"SystemTap","text":"<pre><code># Create simple probe\nstap -e 'probe syscall.open { println(execname()) }'\n\n# Monitor file operations\nstap -e 'probe vfs.read { printf(\"%s read %d bytes\\n\", execname(), count) }'\n\n# Track process creation\nstap -e 'probe process.begin { printf(\"%s started\\n\", execname()) }'\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#perf","title":"perf","text":"<pre><code># CPU performance counters\nperf stat command\n\n# System-wide sampling\nperf record -a sleep 10\n\n# Show recorded data\nperf report\n\n# Live performance monitoring\nperf top\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#hardware-management","title":"Hardware Management","text":""},{"location":"resources/linux/linux-static-performace-tools/#dmidecode","title":"dmidecode","text":"<pre><code># Show all hardware info\ndmidecode\n\n# Show memory info\ndmidecode -t memory\n\n# Show CPU info\ndmidecode -t processor\n\n# Show system info\ndmidecode -t system\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#volume-management-tools","title":"Volume Management Tools","text":""},{"location":"resources/linux/linux-static-performace-tools/#megacli","title":"MegaCli","text":"<pre><code># Show RAID configuration\nMegaCli -CfgDsply -aALL\n\n# Check battery status\nMegaCli -AdpBbuCmd -aALL\n\n# Show drive information\nMegaCli -PDList -aALL\n\n# Check rebuild status\nMegaCli -PDRbld -ShowProg -physdrv[252:2] -aALL\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#performance-monitoring-best-practices","title":"Performance Monitoring Best Practices","text":"<ol> <li>Regular Monitoring</li> <li>Set up baseline measurements</li> <li>Monitor trends over time</li> <li> <p>Create alerts for anomalies</p> </li> <li> <p>Resource Usage</p> </li> <li>Track CPU utilization</li> <li>Monitor memory consumption</li> <li>Watch I/O patterns</li> <li> <p>Analyze network traffic</p> </li> <li> <p>System Health</p> </li> <li>Check system logs</li> <li>Monitor hardware status</li> <li>Track error rates</li> <li> <p>Verify service status</p> </li> <li> <p>Performance Optimization</p> </li> <li>Identify bottlenecks</li> <li>Tune system parameters</li> <li>Optimize application settings</li> <li>Balance resource allocation</li> </ol>"},{"location":"resources/linux/linux-static-performace-tools/#common-performance-issues-and-solutions","title":"Common Performance Issues and Solutions","text":"<ol> <li>CPU Bottlenecks</li> <li>Use <code>top</code> and <code>htop</code> to identify high CPU processes</li> <li>Check process priorities with <code>nice</code> and <code>renice</code></li> <li>Monitor CPU scheduling with <code>schedtool</code></li> <li> <p>Analyze system load with <code>uptime</code></p> </li> <li> <p>Memory Problems</p> </li> <li>Check memory usage with <code>free</code> and <code>vmstat</code></li> <li>Monitor swap usage</li> <li>Analyze memory leaks</li> <li> <p>Tune kernel memory parameters</p> </li> <li> <p>Disk I/O Issues</p> </li> <li>Monitor disk activity with <code>iostat</code></li> <li>Check disk health with <code>smartctl</code></li> <li>Analyze I/O patterns with <code>iotop</code></li> <li> <p>Optimize filesystem parameters</p> </li> <li> <p>Network Performance</p> </li> <li>Monitor bandwidth with <code>iftop</code></li> <li>Analyze connections with <code>netstat</code></li> <li>Check network errors with <code>ethtool</code></li> <li>Tune network parameters with <code>sysctl</code></li> </ol>"},{"location":"resources/linux/linux-static-performace-tools/#quick-reference-commands","title":"Quick Reference Commands","text":"<pre><code># System Overview\ntop                     # Process activity\nhtop                    # Interactive process viewer\nuptime                  # Load average\ndmesg                   # Kernel messages\n\n# Memory Analysis\nfree -m                 # Memory usage\nvmstat                  # Virtual memory stats\npmap                    # Process memory map\nsmem                    # Memory reporting\n\n# Disk Operations\niostat                  # I/O statistics\niotop                   # I/O monitoring\nfdisk -l                # Disk partitions\ndf -h                   # Filesystem usage\n\n# Network Analysis\nnetstat                 # Network statistics\nss                      # Socket statistics\niftop                   # Network bandwidth\ntcpdump                 # Packet analysis\n\n# Process Management\nps aux                  # Process status\npstree                  # Process tree\nnice                    # Process priority\nrenice                  # Change priority\n\n# System Information\nuname -a                # System information\nlscpu                   # CPU information\nlsblk                   # Block devices\nlspci                   # PCI devices\n</code></pre>"},{"location":"resources/linux/linux-static-performace-tools/#additional-resources","title":"Additional Resources","text":"<ol> <li>Documentation</li> <li>Man pages for each tool</li> <li>Linux kernel documentation</li> <li>Distribution-specific guides</li> <li> <p>Tool-specific documentation</p> </li> <li> <p>Performance Tuning Guides</p> </li> <li>Red Hat Performance Tuning Guide</li> <li>Ubuntu Server Guide</li> <li>Linux Performance website</li> <li> <p>Kernel documentation</p> </li> <li> <p>Monitoring Tools</p> </li> <li>Nagios</li> <li>Zabbix</li> <li>Prometheus</li> <li> <p>Grafana</p> </li> <li> <p>Training Resources</p> </li> <li>Linux Foundation courses</li> <li>Distribution certification programs</li> <li>Online tutorials</li> <li>Community forums</li> </ol>"},{"location":"resources/linux/sed/","title":"SED","text":"<p>This document provides a collection of useful one-line scripts for <code>sed</code>, the Unix stream editor.  These commands are designed for quick manipulation and modification of text files directly from the command line.</p>"},{"location":"resources/linux/sed/#text-transformations","title":"Text Transformations","text":"<ul> <li> <p>Inserting Blank Lines:</p> <ul> <li><code>sed G</code>: Double-space a file by inserting a blank line after each line.</li> <li><code>sed '/^$/d;G'</code>: Double-space a file, preserving existing single blank lines.</li> <li><code>sed 'G;G'</code>: Triple-space a file.</li> <li><code>sed '/regex/{x;p;x;}'</code>: Insert a blank line before each line matching <code>regex</code>.</li> <li><code>sed '/regex/G'</code>: Insert a blank line after each line matching <code>regex</code>.</li> </ul> </li> <li> <p>Removing Whitespace:</p> <ul> <li><code>sed 's/^[ \\t]*//'</code>: Remove leading whitespace (spaces and tabs).</li> <li><code>sed 's/[ \\t]*$//'</code>: Remove trailing whitespace.</li> <li><code>sed 's/^[ \\t]*//;s/[ \\t]*$//'</code>: Remove both leading and trailing whitespace.</li> </ul> </li> <li> <p>Centering/Aligning Text:</p> <ul> <li><code>sed -e :a -e 's/^.\\{1,78\\}$/ &amp;/;ta'</code>: Right-align text within a 79-character width.</li> <li><code>sed  -e :a -e 's/^.\\{1,77\\}$/ &amp; /;ta'</code>: Center text within a 79-character width (method 1, leading spaces significant).</li> <li><code>sed  -e :a -e 's/^.\\{1,77\\}$/ &amp;/;ta' -e 's/\\( *\\)\\1/\\1/'</code>: Center text (method 2, leading spaces discarded).</li> </ul> </li> </ul>"},{"location":"resources/linux/sed/#line-numbering-and-counting","title":"Line Numbering and Counting","text":"<ul> <li><code>sed = filename | sed 'N;s/\\n/\\t/'</code>: Number each line, left-aligned, using tabs for spacing.</li> <li><code>sed = filename | sed 'N; s/^/     /; s/ *\\(.\\{6,\\}\\)\\n/\\1  /'</code>: Number each line, left-aligned, right-justified numbers.</li> <li><code>sed '/./=' filename | sed '/./N; s/\\n/ /'</code>: Number only non-blank lines.</li> <li><code>sed -n '$='</code>: Count the number of lines in a file (similar to <code>wc -l</code>).</li> </ul>"},{"location":"resources/linux/sed/#string-manipulation-and-substitution","title":"String Manipulation and Substitution","text":"<ul> <li><code>sed 's/foo/bar/'</code>: Replace the first instance of \"foo\" with \"bar\" on each line.</li> <li><code>sed 's/foo/bar/g'</code>: Replace all instances of \"foo\" with \"bar\" on each line.</li> <li><code>sed 's/\\(.*\\)foo/\\1bar/'</code>: Replace only the last occurrence of \"foo\" with \"bar\" on each line.</li> <li><code>sed 's/scarlet/red/g;s/ruby/red/g;s/puce/red/g'</code>: Replace multiple words (\"scarlet\", \"ruby\", \"puce\") with \"red\".</li> <li><code>gsed 's/scarlet\\|ruby\\|puce/red/g'</code>:  Same as above, using GNU sed's alternation feature.</li> <li><code>sed '$!N;s/\\n/ /'</code>: Join consecutive lines with a space. Useful for formatting or combining data.</li> <li><code>gsed ':a;s/\\B[0-9]\\{3\\}\\&gt;/,&amp;/;ta'</code>: Insert commas into numbers (e.g., 1234567 becomes 1,234,567) using GNU sed.</li> </ul>"},{"location":"resources/linux/sed/#line-and-paragraph-manipulation","title":"Line and Paragraph Manipulation","text":"<ul> <li><code>sed '1!G;h;$!d'</code>: Reverse the order of lines in a file (similar to <code>tac</code>).</li> <li><code>sed -e :a -e '/\\\\$/N; s/\\\\\\n//; ta'</code>: Join lines ending with a backslash with the next line. Useful for handling multi-line entries.</li> <li><code>sed -n '/^$/{p;h;};/./{x;/./p;}'</code>: Delete the last line of each paragraph (paragraphs separated by blank lines).</li> </ul>"},{"location":"resources/linux/sed/#content-filtering-and-extraction","title":"Content Filtering and Extraction","text":"<ul> <li><code>sed 10q</code>: Print only the first 10 lines (similar to <code>head</code>).</li> <li><code>sed -n '8,12p'</code>: Print lines 8 through 12.</li> <li><code>sed '52!d'</code>: Print only line 52.</li> <li><code>sed -n '/regexp/p'</code>: Print only lines matching the regular expression <code>regexp</code> (similar to <code>grep</code>).</li> <li><code>sed '/regexp/d'</code>: Delete lines matching the regular expression <code>regexp</code>.</li> <li><code>sed -n '/Iowa/,/Montana/p'</code>: Print the block of lines starting with a line containing \"Iowa\" and ending with a line containing \"Montana\".</li> <li><code>sed '/Iowa/,/Montana/d'</code>: Delete the block of lines between \"Iowa\" and \"Montana\".</li> <li><code>sed '$!N; /^\\(.*\\)\\n\\1$/!P; D'</code>: Remove duplicate, consecutive lines (similar to <code>uniq</code>).</li> </ul>"},{"location":"resources/linux/sed/#newline-conversion","title":"Newline Conversion","text":"<ul> <li><code>sed 's/.$//'</code>: Convert DOS/Windows newlines (CRLF) to Unix newlines (LF).  Assumes all lines end in CRLF.</li> <li><code>sed 's/$/\\r/'</code>: Convert Unix newlines (LF) to DOS/Windows newlines (CRLF).</li> </ul>"},{"location":"resources/linux/sed/#special-applications","title":"Special Applications","text":"<ul> <li><code>sed \"s/.</code>echo \\\\b<code>//g\"</code>: Remove nroff overstrikes (often seen in older man pages).</li> <li><code>sed '/^$/q'</code>: Extract the header of an email message (up to the first blank line).</li> </ul>"},{"location":"resources/linux/sed/#sed-execution-and-quoting","title":"Sed Execution and Quoting","text":"<p>Sed commands can be piped or applied directly to files:</p> <pre><code>sed 'command' filename          # Applies the command to the file\ncat filename | sed 'command'   # Equivalent command using pipes\nsed 'command' filename &gt; output # Redirects output to a new file\n</code></pre> <p>Use single quotes (<code>'...'</code>) around <code>sed</code> commands to prevent shell interpretation of special characters like <code>$</code> and backticks. Double quotes are usually required in DOS versions of <code>sed</code>.</p>"},{"location":"resources/linux/sed/#performance-optimization","title":"Performance Optimization","text":"<p>For large files, using an address range or the <code>q</code> command can dramatically improve speed.  For example:</p> <pre><code>sed -n '51q;45,50p' filename  #  Prints lines 45-50 and quits, much faster for large files.\n</code></pre> <p>Placing the pattern before the <code>s</code> command in substitutions can also improve performance:</p> <pre><code>sed '/foo/s/foo/bar/g' filename # Faster than sed 's/foo/bar/g' filename\n</code></pre> <p>This cheat sheet provides a starting point for using <code>sed</code>.  For more advanced usage and a deeper understanding of regular expressions, consult the <code>sed</code> man page (<code>man sed</code>) and dedicated resources on regular expressions.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/","title":"Unix File System Hierarchy","text":"<p>The Unix file system hierarchy is a standardized directory structure that organizes the files and directories on a Unix-based operating system. This hierarchical structure ensures consistency and predictability across different Unix-like systems, making it easier for users and applications to interact with the file system.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#the-root-directory","title":"The Root Directory (<code>/</code>)","text":"<p>The root directory, denoted by the forward slash (<code>/</code>), is the topmost directory in the Unix file system hierarchy. It serves as the starting point for all other directories and files.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#essential-user-command-binaries-bin","title":"Essential User Command Binaries (<code>/bin</code>)","text":"<p>The <code>/bin</code> directory contains essential user command binaries, which are executable files for common user-level commands, such as <code>bash</code>, <code>cat</code>, <code>chmod</code>, <code>date</code>, <code>echo</code>, <code>grep</code>, <code>gzip</code>, <code>hostname</code>, <code>kill</code>, <code>less</code>, <code>ls</code>, <code>mkdir</code>, <code>mount</code>, <code>mv</code>, <code>nano</code>, <code>open</code>, <code>ping</code>, <code>pwd</code>, <code>rm</code>, <code>sh</code>, <code>su</code>, <code>tar</code>, <code>touch</code>, and <code>umount</code>.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#system-configuration-files-etc","title":"System Configuration Files (<code>/etc</code>)","text":"<p>The <code>/etc</code> directory is the home for system configuration files, including <code>crontab</code> (scheduled tasks), <code>cups</code> (printing system), <code>fonts</code> (font files), <code>host.conf</code> (host name resolution configuration), <code>hostname</code> (system host name), <code>hosts</code> (hosts file for name resolution), <code>hosts.allow</code> and <code>hosts.deny</code> (network access control), <code>init</code> (system initialization), <code>issue</code> (message of the day), <code>machine-id</code> (unique machine ID), <code>mtab</code> (mounted file systems), <code>mtools.conf</code> (configuration for MTOOLS), <code>nanorc</code> (nano text editor configuration), <code>networks</code> (network name resolution), <code>passwd</code> (user account information), <code>profile</code> (system-wide environment and startup scripts), <code>protocols</code> (network protocols), <code>resolv.conf</code> (DNS resolver configuration), <code>rpc</code> (Remote Procedure Call configuration), <code>securetty</code> (secure TTY list), <code>services</code> (network services), <code>shells</code> (list of available shells), and <code>timezone</code> (system timezone information).</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#essential-system-binaries-sbin","title":"Essential System Binaries (<code>/sbin</code>)","text":"<p>The <code>/sbin</code> directory contains essential system binaries, which are executable files for system administration commands, such as <code>fdisk</code> (partition management), <code>fsck</code> (file system check and repair), <code>getty</code> (login process), <code>halt</code> (system shutdown), <code>ifconfig</code> (network interface configuration), <code>init</code> (system initialization), <code>mkfs</code> (file system creation), <code>mkswaP</code> (swap space creation), <code>reboot</code> (system reboot), and <code>route</code> (network routing configuration).</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#read-only-user-application-support-data-binaries-usr","title":"Read-Only User Application Support Data &amp; Binaries (<code>/usr</code>)","text":"<p>The <code>/usr</code> directory is the home for read-only user application support data and binaries, including:</p> <ul> <li><code>/usr/bin</code>: \"most user commands\"</li> <li><code>/usr/include</code>: \"standard include files for 'C' code\"</li> <li><code>/usr/lib</code>: \"obj, bin, lib files for coding &amp; packages\"</li> <li><code>/usr/local</code>: \"local software\" (including <code>/usr/local/bin</code>, <code>/usr/local/lib</code>, <code>/usr/local/man</code>, <code>/usr/local/sbin</code>, and <code>/usr/local/share</code>)</li> <li><code>/usr/share</code>: \"static data sharable across all architectures\"</li> <li><code>/usr/share/man</code>: \"manual pages\"</li> </ul>"},{"location":"resources/linux/unix-file-system-hierarachy/#variable-data-files-var","title":"Variable Data Files (<code>/var</code>)","text":"<p>The <code>/var</code> directory is the home for variable data files, including:</p> <ul> <li><code>/var/cache</code>: \"application cache data\"</li> <li><code>/var/lib</code>: \"data modified as programs run\"</li> <li><code>/var/lock</code>: \"lock files to track resources in use\"</li> <li><code>/var/log</code>: \"log files\"</li> <li><code>/var/opt</code>: \"variable data for optional packages\"</li> <li><code>/var/spool</code>: \"tasks waiting to be processed\"</li> <li><code>/var/tmp</code>: \"temporary files saved between reboots\"</li> </ul>"},{"location":"resources/linux/unix-file-system-hierarachy/#device-files-dev","title":"Device Files (<code>/dev</code>)","text":"<p>The <code>/dev</code> directory contains device files, which represent physical or virtual devices on the system, such as <code>/dev/null</code>, <code>/dev/zero</code>, and <code>/dev/random</code>.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#home-directories-home","title":"Home Directories (<code>/home</code>)","text":"<p>The <code>/home</code> directory is the location for user home directories, where users can store their personal files and configurations.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#mount-points-mnt","title":"Mount Points (<code>/mnt</code>)","text":"<p>The <code>/mnt</code> directory is used as a mount point for temporary file systems, typically used for mounting external storage devices or network file systems.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#process-kernel-information-files-proc","title":"Process &amp; Kernel Information Files (<code>/proc</code>)","text":"<p>The <code>/proc</code> directory is a virtual file system that provides access to information about running processes and the kernel, such as CPU, memory, and other system resources.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#root-user-home-directory-root","title":"Root User Home Directory (<code>/root</code>)","text":"<p>The <code>/root</code> directory is the home directory for the root user, the superuser with full administrative privileges.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#temporary-files-tmp","title":"Temporary Files (<code>/tmp</code>)","text":"<p>The <code>/tmp</code> directory is used for storing temporary files that are deleted between system reboots.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#system-libraries-kernel-modules-lib","title":"System Libraries &amp; Kernel Modules (<code>/lib</code>)","text":"<p>The <code>/lib</code> directory contains system libraries and kernel modules, which are essential for the proper functioning of the operating system.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#optional-software-applications-opt","title":"Optional Software Applications (<code>/opt</code>)","text":"<p>The <code>/opt</code> directory is used for installing optional software applications, which are not part of the core system.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#mount-points-for-temporary-filesystems-run","title":"Mount Points for Temporary Filesystems (<code>/run</code>)","text":"<p>The <code>/run</code> directory is used as a mount point for temporary file systems that are created and destroyed between system boots.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#system-boot-init-information-boot","title":"System Boot &amp; Init Information (<code>/boot</code>)","text":"<p>The <code>/boot</code> directory contains files essential for booting the operating system, such as the kernel image, initramfs, and boot loader configuration.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#system-logs-varlog","title":"System Logs (<code>/var/log</code>)","text":"<p>The <code>/var/log</code> directory is the location for system log files, which record various events and activities on the system.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#spool-directories-varspool","title":"Spool Directories (<code>/var/spool</code>)","text":"<p>The <code>/var/spool</code> directory is used for storing tasks that are waiting to be processed, such as print jobs, mail, and cron jobs.</p>"},{"location":"resources/linux/unix-file-system-hierarachy/#temporary-files-vartmp","title":"Temporary Files (<code>/var/tmp</code>)","text":"<p>The <code>/var/tmp</code> directory is used for storing temporary files that persist across system reboots, unlike the <code>/tmp</code> directory.</p>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/","title":"Neural Network Learning Resources","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#mathematics-fundamentals","title":"Mathematics Fundamentals","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#linear-algebra","title":"Linear Algebra","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#books","title":"Books","text":"<ul> <li>Linear Algebra and Its Applications - Gilbert Strang</li> <li>Linear Algebra Done Right - Sheldon Axler</li> <li>Matrix Analysis and Applied Linear Algebra - Carl D. Meyer</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#video-courses","title":"Video Courses","text":"<ul> <li>MIT OpenCourseWare Linear Algebra</li> <li>3Blue1Brown Essence of Linear Algebra</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#research-papers","title":"Research Papers","text":"<ul> <li>\"Fast Linear Algebra is Stable\" - arXiv:1405.7903</li> <li>\"Randomized Numerical Linear Algebra: Foundations &amp; Algorithms\" - arXiv:2002.01387</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#calculus","title":"Calculus","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#books_1","title":"Books","text":"<ul> <li>Calculus: Early Transcendentals - James Stewart</li> <li>Calculus Made Easy - Silvanus P. Thompson</li> <li>Advanced Calculus: A Differential Forms Approach - Harold M. Edwards</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#video-courses_1","title":"Video Courses","text":"<ul> <li>MIT Single Variable Calculus</li> <li>3Blue1Brown Essence of Calculus</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#research-papers_1","title":"Research Papers","text":"<ul> <li>\"The Calculus of Deep Learning\" - arXiv:2102.01454</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#statistics-probability","title":"Statistics &amp; Probability","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#books_2","title":"Books","text":"<ul> <li>Introduction to Probability - Dimitri P. Bertsekas</li> <li>All of Statistics - Larry Wasserman</li> <li>Probability Theory: The Logic of Science - E. T. Jaynes</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#video-courses_2","title":"Video Courses","text":"<ul> <li>Harvard Statistics 110</li> <li>MIT Probabilistic Systems Analysis</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#programming-fundamentals","title":"Programming Fundamentals","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#c-programming","title":"C Programming","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#books_3","title":"Books","text":"<ul> <li>Modern C - Jens Gustedt</li> <li>Expert C Programming: Deep C Secrets - Peter van der Linden</li> <li>C Programming: A Modern Approach - K.N. King</li> <li>21st Century C - Ben Klemens</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#online-resources","title":"Online Resources","text":"<ul> <li>C Programming Language Documentation</li> <li>GNU C Reference Manual</li> <li>C Programming Wikibook</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#neural-network-implementation","title":"Neural Network Implementation","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#foundational-resources","title":"Foundational Resources","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#books_4","title":"Books","text":"<ul> <li>Neural Networks and Deep Learning - Michael Nielsen</li> <li>Deep Learning - Ian Goodfellow, Yoshua Bengio, Aaron Courville</li> <li>Pattern Recognition and Machine Learning - Christopher Bishop</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#research-papers_2","title":"Research Papers","text":"<ul> <li>\"Training Deep Nets with Sublinear Memory Cost\" - arXiv:1604.06174</li> <li>\"Deep Learning Hardware: Past, Present, and Future\" - arXiv:1907.09423</li> <li>\"Efficient BackProp\" - Research Paper Link</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#advanced-implementation","title":"Advanced Implementation","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#online-courses","title":"Online Courses","text":"<ul> <li>Stanford CS231n</li> <li>Fast.ai Deep Learning Course</li> <li>CMU Deep Learning Course</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#code-repositories","title":"Code Repositories","text":"<ul> <li>Tiny-DNN</li> <li>Neural Networks in C</li> <li>CNet - Neural Network in C</li> <li>NNPACK</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#research-papers_3","title":"Research Papers","text":"<ul> <li>\"Random Search for Hyper-Parameter Optimization\" - arXiv:1803.09820</li> <li>\"A Disciplined Approach to Neural Network Hyper-Parameters\" - arXiv:1803.09820</li> <li>\"An Analysis of Deep Neural Network Models for Practical Applications\" - arXiv:1605.07678</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#performance-optimization","title":"Performance Optimization","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#system-level-optimization","title":"System Level Optimization","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#books_5","title":"Books","text":"<ul> <li>High Performance Computing</li> <li>Optimizing C++</li> <li>Computer Systems: A Programmer's Perspective - Bryant and O'Hallaron</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#research-papers_4","title":"Research Papers","text":"<ul> <li>\"Quantization and Training of Neural Networks for Efficient Integer-Arithmetic-Only Inference\" - arXiv:1712.05877</li> <li>\"Mixed Precision Training\" - arXiv:1710.03740</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#architecture-design","title":"Architecture Design","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#books_6","title":"Books","text":"<ul> <li>Clean Code</li> <li>The Art of UNIX Programming</li> <li>System Design Interview</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#research-papers_5","title":"Research Papers","text":"<ul> <li>\"A Hardware Architecture for Deep Learning\" - arXiv:1908.07748</li> <li>\"System Design for Large Scale Machine Learning\" - Paper Link</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#additional-resources","title":"Additional Resources","text":""},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#developer-tools","title":"Developer Tools","text":"<ul> <li>GDB Documentation</li> <li>Valgrind User Manual</li> <li>Perf Wiki</li> </ul>"},{"location":"resources/ml/underTheHoodOfNeuralNetwork/#community-resources","title":"Community Resources","text":"<ul> <li>Papers With Code</li> <li>ArXiv Machine Learning</li> <li>Reddit r/MachineLearning</li> </ul>"},{"location":"resources/operatingSystem/Readme/","title":"Overview","text":"<p>I. Introduction &amp; Fundamentals</p> <ol> <li>What is an Operating System? <ul> <li>Definition, Goals, and Purposes</li> <li>Types of Operating Systems (Batch, Time-Sharing, Real-Time, etc.)</li> <li>Examples of Operating Systems (Windows, Linux, macOS, Android)</li> </ul> </li> <li>Computer System Structure<ul> <li>Hardware Components (CPU, Memory, Storage, I/O Devices)</li> <li>Software Layers (Firmware, OS, Applications)</li> <li>Von Neumann Architecture</li> </ul> </li> <li>Operating System Structure<ul> <li>Monolithic Kernel, Layered Architecture, Microkernel, etc.</li> <li>System Calls and Interrupts</li> <li>Process Management Structures</li> </ul> </li> <li>Processes and Threads<ul> <li>Process Definition, States, and Transitions</li> <li>Process Control Block (PCB)</li> <li>Threads: Definition, Benefits, and Challenges</li> <li>Multithreading Models (Kernel-Level, User-Level)</li> </ul> </li> <li>Process Scheduling<ul> <li>Types of Schedulers (Long-Term, Short-Term, I/O)</li> <li>Scheduling Algorithms (FCFS, SJF, Round Robin, Priority, Multilevel Queue, etc.)</li> <li>Process Synchronization &amp; Communication</li> <li>Inter-Process Communication (IPC) Mechanisms (Shared Memory, Message Passing)</li> <li>Classical Synchronization Problems (Producer-Consumer, Reader-Writer, Dining Philosophers)</li> </ul> </li> </ol> <p>II. Memory Management</p> <ol> <li>Memory Hierarchy<ul> <li>Cache Memory (Levels, Organization, Policies)</li> <li>Main Memory (RAM)</li> <li>Secondary Storage (Hard Disk, SSD)</li> </ul> </li> <li>Logical vs. Physical Addresses<ul> <li>Address Binding</li> <li>Memory Management Unit (MMU)</li> </ul> </li> <li>Contiguous Memory Allocation<ul> <li>Fixed Partitioning</li> <li>Variable Partitioning (First-Fit, Best-Fit, Worst-Fit)</li> <li>External Fragmentation</li> </ul> </li> <li>Paging<ul> <li>Page Table, Frame Table</li> <li>Page Fault, Page Replacement Algorithms (FIFO, Optimal, LRU, etc.)</li> </ul> </li> <li>Segmentation<ul> <li>Segment Table, Segment Descriptors</li> <li>Combined Paging and Segmentation</li> </ul> </li> </ol> <p>III. Virtual Memory</p> <ol> <li>Concept of Virtual Memory<ul> <li>Demand Paging</li> <li>Page Fault Handling</li> <li>Working Set Model</li> </ul> </li> <li>Thrashing<ul> <li>Causes and Solutions</li> </ul> </li> <li>Page Replacement Algorithms (Advanced)<ul> <li>Clock Algorithm, Enhanced Second Chance, etc.</li> </ul> </li> <li>Memory-Mapped Files</li> </ol> <p>IV. Storage Management</p> <ol> <li>Disk Structure<ul> <li>Platters, Tracks, Sectors, Cylinders</li> <li>Disk Scheduling Algorithms (FCFS, SSTF, SCAN, C-SCAN, LOOK, C-LOOK)</li> </ul> </li> <li>File System<ul> <li>File Concept, Types, Attributes</li> <li>File System Structure (File Control Block, Directory Structure)</li> </ul> </li> <li>File System Implementation<ul> <li>Contiguous Allocation, Linked Allocation, Indexed Allocation</li> </ul> </li> <li>Free Space Management<ul> <li>Bit Vector, Linked List, Grouping</li> </ul> </li> <li>Disk Defragmentation</li> </ol> <p>V. I/O Systems</p> <ol> <li>I/O Hardware<ul> <li>I/O Controllers</li> <li>DMA (Direct Memory Access)</li> </ul> </li> <li>I/O Software<ul> <li>Device Drivers, Device-Independent I/O</li> <li>Spooling and Buffering</li> </ul> </li> <li>I/O Techniques<ul> <li>Programmed I/O, Interrupt-Driven I/O, DMA</li> </ul> </li> <li>Kernel I/O Subsystem</li> </ol> <p>VI. Deadlocks</p> <ol> <li>Deadlock Characterization<ul> <li>Necessary Conditions</li> </ul> </li> <li>Deadlock Prevention<ul> <li>Resource Allocation Strategies</li> </ul> </li> <li>Deadlock Avoidance<ul> <li>Banker's Algorithm</li> </ul> </li> <li>Deadlock Detection and Recovery</li> </ol> <p>VII. Security &amp; Protection</p> <ol> <li>Security Threats and Attacks<ul> <li>Malware, Trojans, Worms, Viruses</li> <li>Denial-of-Service Attacks</li> <li>Social Engineering</li> </ul> </li> <li>Security Mechanisms<ul> <li>Authentication and Authorization</li> <li>Access Control Lists (ACLs)</li> <li>Cryptography (Encryption, Hashing)</li> </ul> </li> <li>Protection in Operating Systems<ul> <li>Memory Protection</li> <li>File Protection</li> </ul> </li> </ol> <p>VIII. Case Studies &amp; Modern Operating Systems</p> <ol> <li>Linux Operating System<ul> <li>Kernel Structure, Modules, System Calls</li> <li>Process Management, Memory Management, File System</li> </ul> </li> <li>Windows Operating System<ul> <li>Kernel Architecture, System Processes, Services</li> <li>Memory Management, File System (NTFS)</li> </ul> </li> <li>Android Operating System<ul> <li>Linux Kernel, Dalvik Virtual Machine, App Framework</li> </ul> </li> <li>iOS Operating System<ul> <li>Darwin Kernel, Cocoa Touch Framework, App Sandbox</li> </ul> </li> <li>Virtualization and Cloud Computing<ul> <li>Hypervisors, Virtual Machines</li> <li>Cloud OS Architectures (IaaS, PaaS, SaaS)</li> </ul> </li> </ol> <p>IX. Advanced Topics</p> <ol> <li>Distributed Systems<ul> <li>Types of Distributed Systems, Architectural Models</li> <li>Distributed File Systems, Distributed Shared Memory</li> </ul> </li> <li>Real-Time Operating Systems<ul> <li>Hard Real-Time vs. Soft Real-Time Systems</li> <li>Scheduling Algorithms for Real-Time Systems</li> </ul> </li> <li>Embedded Operating Systems<ul> <li>Characteristics, Design Considerations</li> <li>Examples of Embedded OS (FreeRTOS, Contiki)</li> </ul> </li> <li>Operating System Design and Implementation<ul> <li>Design Principles, Kernel Programming</li> </ul> </li> <li>Performance Evaluation<ul> <li>Metrics, Benchmarking, Profiling Tools</li> </ul> </li> </ol> <p>X. Emerging Trends</p> <ol> <li>Mobile Operating Systems<ul> <li>Challenges and Future Directions</li> </ul> </li> <li>Internet of Things (IoT) Operating Systems<ul> <li>Lightweight OS, Security Considerations</li> </ul> </li> <li>Cloud Operating Systems<ul> <li>Scalability, Elasticity, Security in Cloud Environments</li> </ul> </li> <li>Containerization and Microservices<ul> <li>Docker, Kubernetes, Impact on OS Design</li> </ul> </li> <li>Quantum Operating Systems<ul> <li>Challenges and Opportunities for Managing Quantum Computers</li> </ul> </li> <li>Operating System Security and Privacy<ul> <li>New threats and advancements in security mechanisms.</li> </ul> </li> </ol> <p>XI. Learning Resources</p> <ul> <li>Textbooks:<ul> <li>Operating System Concepts by Abraham Silberschatz, Peter Baer Galvin, and Greg Gagne</li> <li>Modern Operating Systems by Andrew S. Tanenbaum</li> <li>Understanding the Linux Kernel by Daniel P. Bovet and Marco Cesati</li> </ul> </li> <li>Online Courses:<ul> <li>MIT OpenCourseware: Operating System Engineering</li> <li>Coursera: Operating Systems by University of Colorado</li> </ul> </li> <li>Websites and Blogs:<ul> <li>LWN (Linux Weekly News)</li> <li>Ars Technica: Operating Systems</li> <li>Stack Overflow (for technical questions and discussions)</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/","title":"Cache Memory","text":""},{"location":"resources/operatingSystem/cacheMemory/#introduction-to-cache-memory","title":"Introduction to Cache Memory","text":"<ul> <li>Cache Memory - GeeksforGeeks</li> <li>What is Cache Memory and How It Works - Computer Hope</li> <li>Cache Memory - Techopedia</li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#levels-of-cache-memory","title":"Levels of Cache Memory","text":"<ul> <li>Levels of Cache Memory (L1, L2, L3) - TechTarget</li> <li>L1, L2, L3 Cache - What are Levels of Cache Memory?</li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#cache-organization","title":"Cache Organization","text":"<ul> <li>Cache Mapping Techniques - Direct, Associative &amp; Set Associative Mapping</li> <li>Memory Hierarchy and Cache Organization - Tutorialspoint</li> <li>Cache Memory and Cache Mapping - Studytonight</li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#direct-mapped-cache","title":"Direct Mapped Cache","text":"<ul> <li>Direct Mapped Cache - Definition and Example</li> <li>Direct Mapped Cache Organization - Javatpoint</li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#associative-cache","title":"Associative Cache","text":"<ul> <li>Associative Cache Memory - TechTarget</li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#set-associative-cache","title":"Set Associative Cache","text":"<ul> <li>Set Associative Cache - Definition and Working</li> <li>Set Associative Mapping in Cache Memory - Gate Vidyalay </li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#cache-policies","title":"Cache Policies","text":"<ul> <li>Cache Replacement Policies - FIFO, LRU, Optimal &amp; Random</li> <li>Write Policies in Cache Memory - GeeksforGeeks</li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#cache-replacement-policies","title":"Cache Replacement Policies","text":"<ul> <li>First-In, First-Out (FIFO)</li> <li>Least Recently Used (LRU)</li> <li>Least Frequently Used (LFU)</li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#cache-write-policies","title":"Cache Write Policies","text":"<ul> <li>Write-Through Cache</li> <li>Write-Back Cache</li> </ul>"},{"location":"resources/operatingSystem/cacheMemory/#online-courses","title":"Online Courses","text":"<ul> <li>Computer Architecture - Coursera</li> <li>Computer Organization and Design - Udemy </li> </ul>"},{"location":"resources/operatingSystem/conceptOfVirtualMem/","title":"Concept of Virtual Memory","text":""},{"location":"resources/operatingSystem/conceptOfVirtualMem/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Documentation: Memory Management</li> <li>Link</li> <li>FreeBSD Handbook: Virtual Memory System</li> <li>Link</li> <li>Windows Memory Management</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/conceptOfVirtualMem/#research-papers","title":"Research Papers","text":"<ul> <li>\"Virtual Memory, Processes, and Sharing in MULTICS\" by R. C. Daley and J. B. Dennis (1968)</li> <li>Link</li> <li>\"The Evolution of Virtual Memory\" by Peter J. Denning (1996)</li> <li>Link</li> <li>\"Virtual Memory: Issues of Implementation\" by Peter J. Denning (1970)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/conceptOfVirtualMem/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Operating Systems: Three Easy Pieces - Virtual Memory</li> <li>Link</li> <li>GeeksforGeeks: Virtual Memory in Operating System</li> <li>Link</li> <li>Computerphile: Virtual Memory</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/conceptOfVirtualMem/#books","title":"Books","text":"<ul> <li>\"Understanding the Linux Virtual Memory Manager\" by Mel Gorman</li> <li>ISBN: 0131453483</li> <li>Provides an in-depth look at Linux's implementation of virtual memory.</li> <li>\"Modern Operating Systems\" by Andrew S. Tanenbaum and Herbert Bos</li> <li>ISBN: 013359162X</li> <li>Offers a comprehensive explanation of virtual memory concepts and implementation.</li> <li>\"Computer Architecture: A Quantitative Approach\" by John L. Hennessy and David A. Patterson</li> <li>ISBN: 0128119055</li> <li>Discusses virtual memory in the context of computer architecture and performance.</li> </ul>"},{"location":"resources/operatingSystem/conceptOfVirtualMem/#standards","title":"Standards","text":"<ul> <li>IEEE Std 1003.1-2017 (POSIX.1-2017)</li> <li>Includes specifications related to memory management in operating systems</li> </ul>"},{"location":"resources/operatingSystem/conceptOfVirtualMem/#online-courses","title":"Online Courses","text":"<ul> <li>MIT 6.004: Computation Structures</li> <li>Link</li> <li>Coursera: Operating Systems and You: Becoming a Power User</li> <li>Link</li> <li>edX: Computer Science 162, 001: Operating Systems and System Programming</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/contiguousMemAlloc/","title":"Contiguous Memory Allocation","text":""},{"location":"resources/operatingSystem/contiguousMemAlloc/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Memory Management Documentation</li> <li>Link</li> <li>FreeBSD Kernel Memory Management</li> <li>Link</li> <li>Windows Memory Management</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/contiguousMemAlloc/#research-papers","title":"Research Papers","text":"<ul> <li>\"The working set model for program behavior\" by Peter J. Denning (1968)</li> <li>Link</li> <li>\"A New Approach to the External Fragmentation Problem in Multiprogrammed Virtual Memory Systems\" by K. C. Knowlton (1965)</li> <li>Link</li> <li>\"The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling\" by R. Jain (1991)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/contiguousMemAlloc/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Operating Systems: Three Easy Pieces - Free Space Management</li> <li>Link</li> <li>GeeksforGeeks: Memory Allocation</li> <li>Link</li> <li>TutorialsPoint: OS Memory Management</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/contiguousMemAlloc/#books","title":"Books","text":"<ul> <li>\"Operating Systems: Principles and Practice\" by Thomas Anderson and Michael Dahlin</li> <li>ISBN: 0985673524</li> <li>Covers memory management techniques, including contiguous allocation.</li> <li>\"The Art of Multiprocessor Programming\" by Maurice Herlihy and Nir Shavit</li> <li>ISBN: 0123973376</li> <li>Discusses memory allocation in the context of multiprocessor systems.</li> <li>\"Understanding the Linux Kernel\" by Daniel P. Bovet and Marco Cesati</li> <li>ISBN: 0596005652</li> <li>Provides detailed explanations of Linux memory management, including allocation strategies.</li> </ul>"},{"location":"resources/operatingSystem/contiguousMemAlloc/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>Includes specifications for memory allocation functions</li> </ul>"},{"location":"resources/operatingSystem/contiguousMemAlloc/#online-courses","title":"Online Courses","text":"<ul> <li>Stanford CS140: Operating Systems</li> <li>Link</li> <li>Udacity: Introduction to Operating Systems</li> <li>Link</li> <li>Coursera: Introduction to Operating Systems by Georgia Tech</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/cpu/","title":"CPU (Central Processing Unit)","text":""},{"location":"resources/operatingSystem/cpu/#architecture-and-functionality","title":"Architecture and Functionality","text":"<ul> <li>Computer Organization and Design RISC-V Edition (Book):<ul> <li>ISBN: 978-0128122754</li> <li>Find Online</li> <li>Modern approach to computer architecture using the RISC-V ISA.</li> </ul> </li> <li>How CPUs Work - Computerphile (Video):<ul> <li>https://www.youtube.com/watch?v=cNN_tTXABUA</li> <li>Engaging explanation of CPU internals and execution cycle.</li> </ul> </li> <li>x86-64 Architecture Documentation (Intel):<ul> <li>https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html</li> <li>Extensive documentation on Intel's x86-64 architecture. </li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/cpu/#pipelining-and-superscalar-execution","title":"Pipelining and Superscalar Execution","text":"<ul> <li>Pipelining - Wikipedia:<ul> <li>https://en.wikipedia.org/wiki/Pipeline_(computing)</li> <li>Detailed overview of pipelining concepts and techniques.</li> </ul> </li> <li>Superscalar Processor Design - ResearchGate:<ul> <li>https://www.researchgate.net/publication/3827651_Superscalar_Processor_Design</li> <li>Research paper on the design and implementation of superscalar processors. </li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/cpu/#cache-memory-and-memory-hierarchy","title":"Cache Memory and Memory Hierarchy","text":"<ul> <li>*See \"Memory Hierarchy\" Section in \"Memory Management\" file. </li> <li>What Every Programmer Should Know About Memory (Paper):<ul> <li>https://people.freebsd.org/~lstewart/articles/cpumemory.pdf</li> <li>Classic and in-depth exploration of memory systems and their impact on performance.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/cpu/#multicore-and-multithreading","title":"Multicore and Multithreading","text":"<ul> <li>*See \"Threads: Definition, Benefits, and Challenges\" and \"Multithreading Models\" sections in \"Processes and Threads\" file.</li> </ul>"},{"location":"resources/operatingSystem/diskFragmentation/","title":"Disk Defragmentation","text":""},{"location":"resources/operatingSystem/diskFragmentation/#official-documentation","title":"Official Documentation","text":"<ul> <li>Microsoft Docs on Disk Defragmentation</li> <li>Link</li> <li>Linux Kernel Documentation on File Systems</li> <li>Link</li> <li>Oracle Documentation on File System Administration</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/diskFragmentation/#research-papers","title":"Research Papers","text":"<ul> <li>\"Defragmentation for Efficient Query Processing over Raw Data\" by Ioannis Alagiannis et al. (2015)</li> <li>Link</li> <li>\"Improving Disk I/O Performance on Linux\" by Mingming Cao et al. (2005)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/diskFragmentation/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>IBM Knowledge Center on Disk Fragmentation</li> <li>Link</li> <li>Red Hat Customer Portal on File System Fragmentation</li> <li>Link</li> <li>Symantec Tech Community on Disk Defragmentation</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/diskFragmentation/#books","title":"Books","text":"<ul> <li>\"Windows Internals, Part 1\" by Pavel Yosifovich et al.</li> <li>ISBN: 9780735684188</li> <li> <p>Provides detailed information about Windows file systems and disk management, including defragmentation.</p> </li> <li> <p>\"File System Forensic Analysis\" by Brian Carrier</p> </li> <li>ISBN: 9780321268174</li> <li> <p>While focused on forensics, this book provides insights into file system structures and fragmentation.</p> </li> <li> <p>\"The Art of Computer Systems Performance Analysis\" by Raj Jain</p> </li> <li>ISBN: 9780471503361</li> <li>Includes discussions on disk performance and the impact of fragmentation.</li> </ul>"},{"location":"resources/operatingSystem/diskFragmentation/#for-deep-dive-into-implementation","title":"For Deep Dive into Implementation","text":"<ul> <li>\"Operating Systems: Design and Implementation\" by Andrew S. Tanenbaum and Albert S. Woodhull</li> <li>ISBN: 9780131429383</li> <li> <p>Provides detailed explanations of file system implementation, including issues related to fragmentation.</p> </li> <li> <p>\"The Design and Implementation of the FreeBSD Operating System\" by Marshall Kirk McKusick et al.</p> </li> <li>ISBN: 9780321968975</li> <li>Offers insights into FreeBSD's file system implementation and maintenance, including defragmentation considerations.</li> </ul>"},{"location":"resources/operatingSystem/diskFragmentation/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>While not directly addressing defragmentation, this standard defines file system operations that impact fragmentation.</li> <li> <p>Not freely available, but it's an authoritative source on standardized file system interfaces.</p> </li> <li> <p>ISO/IEC 9945:2009 - Information technology -- Portable Operating System Interface (POSIX\u00ae)</p> </li> <li>This international standard is based on POSIX and includes specifications for file system operations.</li> <li>Not freely available, but useful for understanding standardized file system interfaces that may impact fragmentation.</li> </ul>"},{"location":"resources/operatingSystem/diskStructure/","title":"Disk Structure","text":""},{"location":"resources/operatingSystem/diskStructure/#official-documentation","title":"Official Documentation","text":"<ul> <li>IBM Knowledge Center on Disk Structure and Disk Geometry</li> <li>Link</li> <li>Microsoft Docs on Disk Concepts and Troubleshooting</li> <li>Link</li> <li>Linux Kernel Documentation on Disk Layout</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/diskStructure/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Study of Modern Linux API Usage and Compatibility: What to Support When You're Supporting\" by Chia-Che Tsai et al. (2016)</li> <li>Link</li> <li>\"Efficient and Scalable Disk Scheduling with Faircoop\" by Suleiman Souhlal et al. (2021)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/diskStructure/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>SNIA Technical White Paper on Solid State Storage</li> <li>Link</li> <li>Red Hat Customer Portal on Disk Partitions</li> <li>Link</li> <li>Oracle Documentation on Disk Concepts and Terminology</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/diskStructure/#books","title":"Books","text":"<ul> <li>\"Operating Systems: Three Easy Pieces\" by Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau</li> <li>ISBN: 9781985086593</li> <li> <p>This book provides a comprehensive overview of operating systems, including a detailed discussion on disk structure and management.</p> </li> <li> <p>\"Computer Organization and Design: The Hardware/Software Interface\" by David A. Patterson and John L. Hennessy</p> </li> <li>ISBN: 9780128017333</li> <li> <p>Offers insights into the lower-level aspects of computer systems, including disk organization and structure.</p> </li> <li> <p>\"Modern Operating Systems\" by Andrew S. Tanenbaum and Herbert Bos</p> </li> <li>ISBN: 9780133591620</li> <li>Includes a thorough examination of disk structure and its role in operating systems.</li> </ul>"},{"location":"resources/operatingSystem/diskStructure/#for-deep-dive-into-implementation","title":"For Deep Dive into Implementation","text":"<ul> <li>\"Operating System Concepts\" by Abraham Silberschatz, Peter Baer Galvin, and Greg Gagne</li> <li>ISBN: 9781119800361</li> <li> <p>Provides detailed explanations of disk structure implementation in various operating systems.</p> </li> <li> <p>\"Systems Performance: Enterprise and the Cloud\" by Brendan Gregg</p> </li> <li>ISBN: 9780136820154</li> <li>Offers advanced insights into disk performance and structure in enterprise and cloud environments.</li> </ul>"},{"location":"resources/operatingSystem/diskStructure/#standards","title":"Standards","text":"<ul> <li>ANSI INCITS 506-2013 (R2018) - SCSI Block Commands - 3 (SBC-3)</li> <li>This standard defines the command set extensions to control operation of SCSI block devices, including disk structure specifications.</li> <li> <p>Not freely available, but it's an authoritative source on SCSI disk structures.</p> </li> <li> <p>ISO/IEC 10861:1994 - Information technology -- 130 mm optical disk cartridges for information interchange -- Capacity: 2,6 Gbytes per cartridge</p> </li> <li>While dated, this standard provides insights into standardized disk structures for optical media.</li> <li>Not freely available, but useful for historical context on disk structure standards.</li> </ul>"},{"location":"resources/operatingSystem/distributedSystems/","title":"Distributed Systems","text":""},{"location":"resources/operatingSystem/distributedSystems/#official-documentation","title":"Official Documentation","text":"<ul> <li>Apache Hadoop Documentation</li> <li>Link</li> <li>Apache Kafka Documentation</li> <li>Link</li> <li>Kubernetes Documentation</li> <li>Link</li> <li>Docker Documentation</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/distributedSystems/#research-papers","title":"Research Papers","text":"<ul> <li>\"The Google File System\" by Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung (2003)</li> <li>Link</li> <li>\"MapReduce: Simplified Data Processing on Large Clusters\" by Jeffrey Dean and Sanjay Ghemawat (2004)</li> <li>Link</li> <li>\"Dynamo: Amazon's Highly Available Key-value Store\" by Giuseppe DeCandia et al. (2007)</li> <li>Link</li> <li>\"ZooKeeper: Wait-free coordination for Internet-scale systems\" by Patrick Hunt et al. (2010)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/distributedSystems/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Distributed Systems for Fun and Profit</li> <li>Link</li> <li>Designing Data-Intensive Applications by Martin Kleppmann</li> <li>Link</li> <li>MIT 6.824: Distributed Systems</li> <li>Link</li> <li>Awesome Distributed Systems</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/distributedSystems/#books","title":"Books","text":"<ul> <li>\"Designing Distributed Systems\" by Brendan Burns</li> <li>ISBN: 1491983647</li> <li>A practical guide to designing and implementing distributed systems using Kubernetes and other open source tools.</li> <li>\"Designing Data-Intensive Applications\" by Martin Kleppmann</li> <li>ISBN: 1449373321</li> <li>Explores the principles, algorithms, and trade-offs of data systems, with a focus on distributed architectures.</li> <li>\"Distributed Systems: Principles and Paradigms\" by Andrew S. Tanenbaum and Maarten van Steen</li> <li>ISBN: 153028175X</li> <li>A comprehensive introduction to the principles and paradigms underlying distributed systems.</li> <li>\"Building Microservices\" by Sam Newman</li> <li>ISBN: 1492034029</li> <li>Provides practical advice on how to design and implement distributed systems using microservices architecture.</li> </ul>"},{"location":"resources/operatingSystem/distributedSystems/#standards","title":"Standards","text":"<ul> <li>ISO/IEC/IEEE 60559:2020 Information technology \u2014 Microprocessor Systems \u2014 Floating-Point arithmetic</li> <li>Relevant for ensuring consistency in floating-point operations across distributed systems</li> <li>ISO/IEC 10746 Information technology \u2014 Open Distributed Processing</li> <li>Provides a framework for the standardization of open distributed processing</li> </ul>"},{"location":"resources/operatingSystem/distributedSystems/#online-courses","title":"Online Courses","text":"<ul> <li>Coursera: Cloud Computing Specialization by University of Illinois</li> <li>Link</li> <li>edX: Reliable Distributed Algorithms by KTH Royal Institute of Technology</li> <li>Link</li> <li>Udacity: Intro to Parallel Programming</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/embeddedOS/","title":"Embedded Operating Systems","text":""},{"location":"resources/operatingSystem/embeddedOS/#official-documentation","title":"Official Documentation","text":"<ul> <li>Embedded Linux Documentation</li> <li>Link</li> <li>ARM mbed OS Documentation</li> <li>Link</li> <li>TinyOS Documentation</li> <li>Link</li> <li>Contiki OS Documentation</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/embeddedOS/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Survey of Embedded Operating Systems\" by S. Baskiyar and N. Meghanathan (2005)</li> <li>Link</li> <li>\"Embedded Operating Systems for the Internet of Things\" by Oliver Hahm et al. (2016)</li> <li>Link</li> <li>\"A Survey on Operating Systems for Tiny Networked Sensors\" by Xiaofan Jiang et al. (2004)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/embeddedOS/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Embedded.com: Embedded Operating Systems</li> <li>Link</li> <li>Introduction to Embedded Systems - A Cyber-Physical Systems Approach</li> <li>Link</li> <li>Embedded Linux Learning Kit</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/embeddedOS/#books","title":"Books","text":"<ul> <li>\"Making Embedded Systems\" by Elecia White</li> <li>ISBN: 1449302149</li> <li>Provides practical guidance on designing and programming embedded systems.</li> <li>\"Programming Embedded Systems\" by Michael Barr and Anthony Massa</li> <li>ISBN: 0596009836</li> <li>Covers the fundamentals of embedded systems programming with a focus on practical applications.</li> <li>\"Real-Time Embedded Systems\" by Xiaocong Fan</li> <li>ISBN: 0128015071</li> <li>Explores the principles and practices of designing real-time embedded systems.</li> <li>\"Embedded Systems Architecture\" by Tammy Noergaard</li> <li>ISBN: 0123821967</li> <li>Offers a comprehensive view of embedded systems architecture and design processes.</li> </ul>"},{"location":"resources/operatingSystem/embeddedOS/#standards","title":"Standards","text":"<ul> <li>POSIX (IEEE 1003.1-2017)</li> <li>Relevant for embedded systems that aim for POSIX compliance</li> <li>MISRA C:2012</li> <li>Guidelines for the use of the C language in critical systems, often applied in embedded systems</li> </ul>"},{"location":"resources/operatingSystem/embeddedOS/#online-courses","title":"Online Courses","text":"<ul> <li>edX: Embedded Systems - Shape The World: Microcontroller Input/Output</li> <li>Link</li> <li>Coursera: Introduction to Embedded Systems Software and Development Environments</li> <li>Link</li> <li>Udemy: Embedded Systems Programming on ARM Cortex-M3/M4 Processor</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/fileSystem/","title":"File System","text":""},{"location":"resources/operatingSystem/fileSystem/#official-documentation","title":"Official Documentation","text":"<ul> <li>Microsoft Docs on File Systems</li> <li>Link</li> <li>Linux Kernel Documentation on Filesystems</li> <li>Link</li> <li>Apple Developer Documentation on File System Basics</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/fileSystem/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Study of Linux File System Evolution\" by Lanyue Lu et al. (2013)</li> <li>Link</li> <li>\"Understanding Metadata Latency with MDWorkbench\" by Dean Hildebrand et al. (2019)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/fileSystem/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>IBM Knowledge Center on File Systems</li> <li>Link</li> <li>Red Hat Customer Portal on File Systems</li> <li>Link</li> <li>SNIA Technical White Paper on File Systems</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/fileSystem/#books","title":"Books","text":"<ul> <li>\"The Design and Implementation of the FreeBSD Operating System\" by Marshall Kirk McKusick et al.</li> <li>ISBN: 9780321968975</li> <li> <p>Provides in-depth coverage of file system design and implementation in FreeBSD.</p> </li> <li> <p>\"Linux System Programming: Talking Directly to the Kernel and C Library\" by Robert Love</p> </li> <li>ISBN: 9781449339531</li> <li> <p>Offers insights into Linux file systems and how to interact with them programmatically.</p> </li> <li> <p>\"File System Forensic Analysis\" by Brian Carrier</p> </li> <li>ISBN: 9780321268174</li> <li>While focused on forensics, this book provides detailed information about various file system structures.</li> </ul>"},{"location":"resources/operatingSystem/fileSystem/#for-deep-dive-into-implementation","title":"For Deep Dive into Implementation","text":"<ul> <li>\"Unix and Linux System Administration Handbook\" by Evi Nemeth et al.</li> <li>ISBN: 9780134277554</li> <li> <p>Contains practical information on managing and understanding file systems in Unix and Linux environments.</p> </li> <li> <p>\"Windows Internals, Part 1\" by Pavel Yosifovich et al.</p> </li> <li>ISBN: 9780735684188</li> <li>Provides detailed information about Windows file systems and their implementation.</li> </ul>"},{"location":"resources/operatingSystem/fileSystem/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>This standard defines the interface between operating systems and applications, including file system operations.</li> <li> <p>Not freely available, but it's an authoritative source on standardized file system interfaces.</p> </li> <li> <p>ISO/IEC 9945:2009 - Information technology -- Portable Operating System Interface (POSIX\u00ae)</p> </li> <li>This international standard is based on POSIX and includes specifications for file system operations.</li> <li>Not freely available, but useful for understanding standardized file system interfaces.</li> </ul>"},{"location":"resources/operatingSystem/fileSystemImplementation/","title":"File System","text":""},{"location":"resources/operatingSystem/fileSystemImplementation/#official-documentation","title":"Official Documentation","text":"<ul> <li>Microsoft Docs on File Systems</li> <li>Link</li> <li>Linux Kernel Documentation on Filesystems</li> <li>Link</li> <li>Apple Developer Documentation on File System Basics</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/fileSystemImplementation/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Study of Linux File System Evolution\" by Lanyue Lu et al. (2013)</li> <li>Link</li> <li>\"Understanding Metadata Latency with MDWorkbench\" by Dean Hildebrand et al. (2019)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/fileSystemImplementation/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>IBM Knowledge Center on File Systems</li> <li>Link</li> <li>Red Hat Customer Portal on File Systems</li> <li>Link</li> <li>SNIA Technical White Paper on File Systems</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/fileSystemImplementation/#books","title":"Books","text":"<ul> <li>\"The Design and Implementation of the FreeBSD Operating System\" by Marshall Kirk McKusick et al.</li> <li>ISBN: 9780321968975</li> <li> <p>Provides in-depth coverage of file system design and implementation in FreeBSD.</p> </li> <li> <p>\"Linux System Programming: Talking Directly to the Kernel and C Library\" by Robert Love</p> </li> <li>ISBN: 9781449339531</li> <li> <p>Offers insights into Linux file systems and how to interact with them programmatically.</p> </li> <li> <p>\"File System Forensic Analysis\" by Brian Carrier</p> </li> <li>ISBN: 9780321268174</li> <li>While focused on forensics, this book provides detailed information about various file system structures.</li> </ul>"},{"location":"resources/operatingSystem/fileSystemImplementation/#for-deep-dive-into-implementation","title":"For Deep Dive into Implementation","text":"<ul> <li>\"Unix and Linux System Administration Handbook\" by Evi Nemeth et al.</li> <li>ISBN: 9780134277554</li> <li> <p>Contains practical information on managing and understanding file systems in Unix and Linux environments.</p> </li> <li> <p>\"Windows Internals, Part 1\" by Pavel Yosifovich et al.</p> </li> <li>ISBN: 9780735684188</li> <li>Provides detailed information about Windows file systems and their implementation.</li> </ul>"},{"location":"resources/operatingSystem/fileSystemImplementation/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>This standard defines the interface between operating systems and applications, including file system operations.</li> <li> <p>Not freely available, but it's an authoritative source on standardized file system interfaces.</p> </li> <li> <p>ISO/IEC 9945:2009 - Information technology -- Portable Operating System Interface (POSIX\u00ae)</p> </li> <li>This international standard is based on POSIX and includes specifications for file system operations.</li> <li>Not freely available, but useful for understanding standardized file system interfaces.</li> </ul>"},{"location":"resources/operatingSystem/freeSpaceManagement/","title":"Free Space Management","text":""},{"location":"resources/operatingSystem/freeSpaceManagement/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Documentation on Memory Management</li> <li>Link</li> <li>Microsoft Docs on Memory Management</li> <li>Link</li> <li>FreeBSD Handbook: Memory Management</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/freeSpaceManagement/#research-papers","title":"Research Papers","text":"<ul> <li>\"Understanding and Improving Virtual Memory Management in Virtualized Environments\" by Nadav Amit et al. (2015)</li> <li>Link</li> <li>\"Efficient Memory Management for Big Data Collection in Multicore Systems\" by Lu Fang et al. (2019)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/freeSpaceManagement/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Oracle Documentation on Memory Architecture</li> <li>Link</li> <li>IBM Knowledge Center on Memory Management</li> <li>Link</li> <li>Red Hat Customer Portal on System Memory</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/freeSpaceManagement/#books","title":"Books","text":"<ul> <li>\"Operating Systems: Three Easy Pieces\" by Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau</li> <li>ISBN: 9781985086593</li> <li> <p>Provides a comprehensive overview of operating systems, including detailed chapters on free space management.</p> </li> <li> <p>\"Modern Operating Systems\" by Andrew S. Tanenbaum and Herbert Bos</p> </li> <li>ISBN: 9780133591620</li> <li> <p>Includes thorough coverage of memory management techniques, including free space management.</p> </li> <li> <p>\"Computer Systems: A Programmer's Perspective\" by Randal E. Bryant and David R. O'Hallaron</p> </li> <li>ISBN: 9780134092669</li> <li>Offers insights into memory hierarchy and management from a programmer's perspective.</li> </ul>"},{"location":"resources/operatingSystem/freeSpaceManagement/#for-deep-dive-into-implementation","title":"For Deep Dive into Implementation","text":"<ul> <li>\"Understanding the Linux Kernel\" by Daniel P. Bovet and Marco Cesati</li> <li>ISBN: 9780596005658</li> <li> <p>Provides detailed explanations of Linux kernel internals, including memory management and free space handling.</p> </li> <li> <p>\"Windows Internals, Part 1\" by Pavel Yosifovich et al.</p> </li> <li>ISBN: 9780735684188</li> <li>Offers in-depth coverage of Windows memory management, including free space management techniques.</li> </ul>"},{"location":"resources/operatingSystem/freeSpaceManagement/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>While primarily focused on the interface, this standard includes specifications related to memory management that impact free space management.</li> <li> <p>Not freely available, but it's an authoritative source on standardized operating system interfaces.</p> </li> <li> <p>ISO/IEC 9899:2018 - Programming languages -- C</p> </li> <li>This standard defines the C programming language, including memory management functions that interact with free space management.</li> <li>Not freely available, but it's crucial for understanding low-level memory management in C programs.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputHardware/","title":"I/O Hardware","text":""},{"location":"resources/operatingSystem/inputOutputHardware/#official-documentation","title":"Official Documentation","text":"<ul> <li>Intel\u00ae 64 and IA-32 Architectures Software Developer's Manual</li> <li>Link</li> <li>ARM\u00ae Architecture Reference Manual</li> <li>Link</li> <li>PCI Express Base Specification</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputHardware/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Survey of Techniques for Improving Energy Efficiency in Embedded Computing Systems\" by M. Bambagini et al. (2016)</li> <li>Link</li> <li>\"The Future of I/O is Flow\" by Vijay Vasudevan et al. (2021)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputHardware/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>IBM Knowledge Center on I/O Concepts and Terms</li> <li>Link</li> <li>Red Hat Customer Portal on I/O Devices and Drivers</li> <li>Link</li> <li>Oracle Documentation on I/O Architecture</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputHardware/#books","title":"Books","text":"<ul> <li>\"Computer Architecture: A Quantitative Approach\" by John L. Hennessy and David A. Patterson</li> <li>ISBN: 9780128119051</li> <li> <p>Provides comprehensive coverage of computer architecture, including detailed discussions on I/O hardware.</p> </li> <li> <p>\"Computer Organization and Design: The Hardware/Software Interface\" by David A. Patterson and John L. Hennessy</p> </li> <li>ISBN: 9780128017333</li> <li> <p>Offers insights into the lower-level aspects of computer systems, including I/O hardware.</p> </li> <li> <p>\"Embedded Systems: Introduction to Arm\u00ae Cortex\u2122-M Microcontrollers\" by Jonathan W. Valvano</p> </li> <li>ISBN: 9781477508992</li> <li>Focuses on embedded systems and provides detailed information about I/O hardware in microcontrollers.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputHardware/#for-deep-dive-into-implementation","title":"For Deep Dive into Implementation","text":"<ul> <li>\"The Indispensable PC Hardware Book\" by Hans-Peter Messmer</li> <li>ISBN: 9780201596168</li> <li> <p>While somewhat dated, this book provides extremely detailed information about PC hardware, including I/O devices.</p> </li> <li> <p>\"USB Complete: The Developer's Guide\" by Jan Axelson</p> </li> <li>ISBN: 9781931448086</li> <li>Offers a comprehensive look at USB technology, a crucial part of modern I/O hardware.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputHardware/#standards","title":"Standards","text":"<ul> <li>IEEE 1394-2008 - IEEE Standard for a High-Performance Serial Bus</li> <li>This standard defines the FireWire interface, an important I/O technology.</li> <li> <p>Not freely available, but it's an authoritative source on FireWire specifications.</p> </li> <li> <p>USB 3.2 Specification</p> </li> <li>Defines the latest version of the Universal Serial Bus standard.</li> <li>Available from the USB Implementers Forum website.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputSoftware/","title":"I/O Software","text":""},{"location":"resources/operatingSystem/inputOutputSoftware/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Documentation on I/O</li> <li>Link</li> <li>Microsoft Docs on I/O Processing</li> <li>Link</li> <li>FreeBSD Handbook: Writing FreeBSD Device Drivers</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputSoftware/#research-papers","title":"Research Papers","text":"<ul> <li>\"Persistent Memory I/O Primitives\" by Jian Xu and Steven Swanson (2016)</li> <li>Link</li> <li>\"Understanding Modern Storage APIs: A systematic study of libaio, SPDK, DAOS, and Intel DCL\" by Manuel Sadowski et al. (2021)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputSoftware/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>IBM Knowledge Center on I/O Concepts and Programming</li> <li>Link</li> <li>Oracle Documentation on Device Driver Interfaces</li> <li>Link</li> <li>SNIA Technical White Paper on NVMe Technology</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputSoftware/#books","title":"Books","text":"<ul> <li>\"Linux Device Drivers\" by Jonathan Corbet, Alessandro Rubini, and Greg Kroah-Hartman</li> <li>ISBN: 9780596005900</li> <li> <p>Provides a comprehensive guide to writing device drivers for the Linux kernel.</p> </li> <li> <p>\"Windows Internals, Part 1\" by Pavel Yosifovich et al.</p> </li> <li>ISBN: 9780735684188</li> <li> <p>Offers detailed information about Windows I/O system and driver model.</p> </li> <li> <p>\"Operating Systems: Three Easy Pieces\" by Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau</p> </li> <li>ISBN: 9781985086593</li> <li>Includes chapters on I/O devices and I/O management in operating systems.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputSoftware/#for-deep-dive-into-implementation","title":"For Deep Dive into Implementation","text":"<ul> <li>\"Systems Programming in Unix/Linux\" by K.C. Wang</li> <li>ISBN: 9783319924281</li> <li> <p>Covers system programming in Unix/Linux, including detailed discussions on I/O programming.</p> </li> <li> <p>\"The Linux Programming Interface\" by Michael Kerrisk</p> </li> <li>ISBN: 9781593272203</li> <li>Provides a comprehensive guide to Linux and UNIX system programming, including I/O operations.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputSoftware/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>This standard defines the interface between operating systems and applications, including I/O operations.</li> <li> <p>Not freely available, but it's an authoritative source on standardized I/O interfaces.</p> </li> <li> <p>ISO/IEC 9945:2009 - Information technology -- Portable Operating System Interface (POSIX\u00ae)</p> </li> <li>This international standard is based on POSIX and includes specifications for I/O operations.</li> <li>Not freely available, but useful for understanding standardized I/O interfaces.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputTechniques/","title":"I/O Techniques","text":""},{"location":"resources/operatingSystem/inputOutputTechniques/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Documentation on I/O Schedulers</li> <li>Link</li> <li>Microsoft Docs on I/O Completion Ports</li> <li>Link</li> <li>FreeBSD Handbook: I/O Scheduling</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputTechniques/#research-papers","title":"Research Papers","text":"<ul> <li>\"Improving I/O Performance through Adaptive Caching and Prefetching\" by Ali R. Butt et al. (2005)</li> <li>Link</li> <li>\"Aerie: Flexible File-System Interfaces to Storage-Class Memory\" by Haris Volos et al. (2014)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputTechniques/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>IBM Knowledge Center on I/O Scheduling</li> <li>Link</li> <li>Oracle Documentation on I/O Management</li> <li>Link</li> <li>Red Hat Customer Portal on Tuning I/O Performance</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/inputOutputTechniques/#books","title":"Books","text":"<ul> <li>\"Systems Performance: Enterprise and the Cloud\" by Brendan Gregg</li> <li>ISBN: 9780133390094</li> <li> <p>Provides in-depth coverage of system performance, including various I/O techniques and optimizations.</p> </li> <li> <p>\"Database Internals: A Deep Dive into How Distributed Data Systems Work\" by Alex Petrov</p> </li> <li>ISBN: 9781492040347</li> <li> <p>Includes detailed discussions on I/O techniques in the context of database systems.</p> </li> <li> <p>\"High Performance MySQL\" by Baron Schwartz et al.</p> </li> <li>ISBN: 9781449314286</li> <li>While focused on MySQL, this book provides valuable insights into I/O optimization techniques applicable to various systems.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputTechniques/#for-deep-dive-into-implementation","title":"For Deep Dive into Implementation","text":"<ul> <li>\"Understanding the Linux Kernel\" by Daniel P. Bovet and Marco Cesati</li> <li>ISBN: 9780596005658</li> <li> <p>Offers detailed explanations of Linux kernel internals, including I/O scheduling and techniques.</p> </li> <li> <p>\"Windows Internals, Part 2\" by David A. Solomon et al.</p> </li> <li>ISBN: 9780735684188</li> <li>Provides in-depth coverage of Windows I/O system and advanced techniques.</li> </ul>"},{"location":"resources/operatingSystem/inputOutputTechniques/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>This standard defines the interface between operating systems and applications, including I/O operations.</li> <li> <p>Not freely available, but it's an authoritative source on standardized I/O interfaces.</p> </li> <li> <p>T10 SCSI Storage Interfaces</p> </li> <li>These standards define the SCSI protocol, which is crucial for many I/O techniques.</li> <li>Available from the T10 Technical Committee website.</li> </ul>"},{"location":"resources/operatingSystem/interrupts/","title":"Interrupts","text":""},{"location":"resources/operatingSystem/interrupts/#articlesblog-posts","title":"Articles/Blog Posts","text":"<ul> <li>Interrupt: </li> <li>Wikipedia</li> <li>What are Interrupts in Operating System?: </li> <li>GeeksforGeeks</li> <li>Hardware Interrupts - Types, Uses and How They Work: </li> <li>Tech Explained </li> </ul>"},{"location":"resources/operatingSystem/interrupts/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>Interrupts - Computer Organization and Architecture: </li> <li>YouTube - Gate Smashers</li> <li>Interrupt Explained - Computer Science:</li> <li>YouTube - Crash Course</li> </ul>"},{"location":"resources/operatingSystem/interrupts/#books","title":"Books","text":"<ul> <li>Computer Organization and Design: The Hardware/Software Interface (5th Edition) by David A. Patterson and John L. Hennessy: </li> <li>ISBN: 978-0134077263 </li> <li>Structured Computer Organization (6th Edition) by Andrew S. Tanenbaum and Todd Austin:</li> <li>ISBN: 978-0134077539</li> </ul>"},{"location":"resources/operatingSystem/interrupts/#related-concepts","title":"Related Concepts","text":"<ul> <li>Interrupt Handler (Interrupt Service Routine): </li> <li>Wikipedia</li> <li>Interrupt Latency:</li> <li>Techopedia</li> <li>Polling (Computer Science):</li> <li>Wikipedia (An alternative to interrupt-driven communication) </li> </ul>"},{"location":"resources/operatingSystem/kernelIOSubsystem/","title":"Kernel I/O Subsystem","text":""},{"location":"resources/operatingSystem/kernelIOSubsystem/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Documentation on I/O</li> <li>Link</li> <li>Microsoft Docs on Kernel-Mode Driver Architecture</li> <li>Link</li> <li>FreeBSD Handbook: FreeBSD Kernel</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/kernelIOSubsystem/#research-papers","title":"Research Papers","text":"<ul> <li>\"The Multikernel: A new OS architecture for scalable multicore systems\" by Andrew Baumann et al. (2009)</li> <li>Link</li> <li>\"IX: A Protected Dataplane Operating System for High Throughput and Low Latency\" by Adam Belay et al. (2014)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/kernelIOSubsystem/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>IBM Knowledge Center on Kernel Concepts</li> <li>Link</li> <li>Oracle Documentation on Kernel Memory Allocators</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/layeredArchitecture/","title":"Layered Architecture","text":""},{"location":"resources/operatingSystem/layeredArchitecture/#articlesblog-posts","title":"Articles/Blog Posts","text":"<ul> <li>Layered System Design:</li> <li>GeeksforGeeks</li> <li>The Layered Architecture:</li> <li>ScienceDirect</li> <li>Operating System Design: Layered Approach:</li> <li>Techopedia</li> <li>Layered architecture:</li> <li>Wikipedia</li> </ul>"},{"location":"resources/operatingSystem/layeredArchitecture/#books","title":"Books","text":"<ul> <li>Software Architecture in Practice (3rd Edition) by Bass, Clements, and Kazman:</li> <li>ISBN: 978-0321815736</li> </ul>"},{"location":"resources/operatingSystem/layeredArchitecture/#research-papers","title":"Research Papers","text":"<ul> <li>The THE Multiprogramming System:</li> <li>ACM Digital Library </li> </ul>"},{"location":"resources/operatingSystem/layeredArchitecture/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>Software Architecture Design - Layered Architecture:</li> <li>YouTube - Software Architecture &amp; Design</li> </ul>"},{"location":"resources/operatingSystem/layeredArchitecture/#additional-resources","title":"Additional Resources","text":"<ul> <li>The Onion Architecture: </li> <li>Jeffrey Palermo's Blog (Popular application of layered architecture)</li> </ul>"},{"location":"resources/operatingSystem/logicalVsPhysicalAddresses/","title":"Logical vs. Physical Addresses","text":""},{"location":"resources/operatingSystem/logicalVsPhysicalAddresses/#official-documentation","title":"Official Documentation","text":"<ul> <li>Intel\u00ae 64 and IA-32 Architectures Software Developer's Manual</li> <li>Link</li> <li>ARM\u00ae Architecture Reference Manual</li> <li>Link</li> <li>MIPS\u00ae Architecture Reference Manual</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/logicalVsPhysicalAddresses/#research-papers","title":"Research Papers","text":"<ul> <li>\"Virtual Memory: Issues of Implementation\" by Peter J. Denning (1970)</li> <li>Link</li> <li>\"Address Translation Mechanisms in Virtual Memory Systems\" by J. Fotheringham (1961)</li> <li>Link</li> <li>\"Memory Resource Management in VMware ESX Server\" by C. Waldspurger (2002)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/logicalVsPhysicalAddresses/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Operating Systems: Three Easy Pieces - Address Spaces</li> <li>Link</li> <li>GeeksforGeeks: Logical and Physical Address in Operating System</li> <li>Link</li> <li>Computerphile: Virtual Memory</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/logicalVsPhysicalAddresses/#books","title":"Books","text":"<ul> <li>\"Operating System Concepts\" by Abraham Silberschatz, Peter B. Galvin, and Greg Gagne</li> <li>ISBN: 1118063333</li> <li>Chapter 9 covers virtual memory, including logical and physical addresses.</li> <li>\"Modern Operating Systems\" by Andrew S. Tanenbaum and Herbert Bos</li> <li>ISBN: 013359162X</li> <li>Provides a comprehensive explanation of memory management, including address translation.</li> <li>\"Computer Architecture: A Quantitative Approach\" by John L. Hennessy and David A. Patterson</li> <li>ISBN: 0128119055</li> <li>Offers detailed insights into memory hierarchies and address translation mechanisms.</li> </ul>"},{"location":"resources/operatingSystem/logicalVsPhysicalAddresses/#standards","title":"Standards","text":"<ul> <li>IEEE Std 1003.1-2017 (POSIX.1-2017)</li> <li>Includes specifications related to memory management in operating systems</li> </ul>"},{"location":"resources/operatingSystem/logicalVsPhysicalAddresses/#online-courses","title":"Online Courses","text":"<ul> <li>MIT OpenCourseWare: 6.004 Computation Structures</li> <li>Link</li> <li>Coursera: Operating Systems and You: Becoming a Power User</li> <li>Link</li> <li>edX: Computer Science 162, 001: Operating Systems and System Programming</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/memoryMappedFiles/","title":"Memory-Mapped Files","text":""},{"location":"resources/operatingSystem/memoryMappedFiles/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Programmer's Manual: mmap(2)</li> <li>Link</li> <li>Windows API: Memory-Mapped Files</li> <li>Link</li> <li>POSIX Programmer's Manual: mmap</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/memoryMappedFiles/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Fast File System for UNIX\" by M. K. McKusick et al. (1984)</li> <li>Link</li> <li>\"The Design and Implementation of a Log-Structured File System\" by M. Rosenblum and J. K. Ousterhout (1992)</li> <li>Link</li> <li>\"Soft Updates: A Technique for Eliminating Most Synchronous Writes in the Fast Filesystem\" by G. R. Ganger and Y. N. Patt (1994)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/memoryMappedFiles/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Operating Systems: Three Easy Pieces - Memory-Mapped Files</li> <li>Link</li> <li>GeeksforGeeks: Memory Mapped I/O</li> <li>Link</li> <li>IBM Developer: Mapping files in memory</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/memoryMappedFiles/#books","title":"Books","text":"<ul> <li>\"The Linux Programming Interface\" by Michael Kerrisk</li> <li>ISBN: 1593272200</li> <li>Provides a comprehensive guide to Linux and UNIX system programming, including memory-mapped files.</li> <li>\"Advanced Programming in the UNIX Environment\" by W. Richard Stevens and Stephen A. Rago</li> <li>ISBN: 0321637739</li> <li>Offers in-depth coverage of UNIX programming, including memory-mapped file operations.</li> <li>\"Windows System Programming\" by Johnson M. Hart</li> <li>ISBN: 0134382250</li> <li>Covers Windows system programming, including detailed explanations of memory-mapped files.</li> </ul>"},{"location":"resources/operatingSystem/memoryMappedFiles/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>Includes specifications for memory-mapped file operations</li> </ul>"},{"location":"resources/operatingSystem/memoryMappedFiles/#online-courses","title":"Online Courses","text":"<ul> <li>MIT 6.828: Operating System Engineering</li> <li>Link</li> <li>Coursera: Operating Systems and You: Becoming a Power User</li> <li>Link</li> <li>Udacity: Advanced Operating Systems</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/microKernel/","title":"Microkernel","text":""},{"location":"resources/operatingSystem/microKernel/#articlesblog-posts","title":"Articles/Blog Posts","text":"<ul> <li>Microkernel:</li> <li>Wikipedia </li> <li>What is Microkernel? Types, Advantages &amp; Disadvantages:</li> <li>Guru99</li> <li>Microkernel vs. Monolithic Kernel: What's the Difference?:</li> <li>MakeUseOf</li> <li>Operating System - Microkernels:</li> <li>Tutorialspoint</li> </ul>"},{"location":"resources/operatingSystem/microKernel/#research-papers","title":"Research Papers","text":"<ul> <li>The MINIX 3 operating system: A platform for highly reliable and secure computing:</li> <li>ScienceDirect</li> </ul>"},{"location":"resources/operatingSystem/microKernel/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>Microkernel Operating System | Advantages and Disadvantages:</li> <li>YouTube - Knowledge Gate</li> </ul>"},{"location":"resources/operatingSystem/microKernel/#notable-examples","title":"Notable Examples","text":"<ul> <li>MINIX: </li> <li>MINIX Website </li> <li>QNX: </li> <li>QNX Software Systems</li> <li>L4 Family: </li> <li>L4 Microkernel Family</li> </ul>"},{"location":"resources/operatingSystem/monolithicKernel/","title":"Monolithic Kernel","text":""},{"location":"resources/operatingSystem/monolithicKernel/#articlesblog-posts","title":"Articles/Blog Posts","text":"<ul> <li>What is a Monolithic Kernel? Advantages and Disadvantages: </li> <li>GeeksforGeeks</li> <li>Monolithic Kernel - Definition, Architecture, Advantages, Disadvantages: </li> <li>Guru99</li> <li>Operating System - Monolithic Kernels: </li> <li>Tutorialspoint </li> <li>Monolithic kernel: </li> <li>Wikipedia</li> </ul>"},{"location":"resources/operatingSystem/monolithicKernel/#research-papers","title":"Research Papers","text":"<ul> <li>On the duality of operating system structures:</li> <li>ACM Digital Library</li> </ul>"},{"location":"resources/operatingSystem/monolithicKernel/#books","title":"Books","text":"<ul> <li>Operating System Concepts (10th Edition) by Silberschatz, Galvin, and Gagne:</li> <li>ISBN: 978-1292400451</li> </ul>"},{"location":"resources/operatingSystem/monolithicKernel/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>Monolithic Kernel (Part 1) | Process Management | Operating System: </li> <li>YouTube - Gate Smashers </li> </ul>"},{"location":"resources/operatingSystem/monolithicKernel/#comparison-with-other-architectures","title":"Comparison with Other Architectures","text":"<ul> <li>Microkernel vs. Monolithic Kernel: What's the Difference?: </li> <li>MakeUseOf</li> <li>Comparison of operating system kernels:</li> <li>Wikipedia </li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/","title":"Operating System Design and Implementation","text":""},{"location":"resources/operatingSystem/osDesignAndImplementation/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Documentation</li> <li>Link</li> <li>FreeBSD Documentation</li> <li>Link</li> <li>ReactOS Documentation</li> <li>Link</li> <li>seL4 Microkernel Documentation</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/#research-papers","title":"Research Papers","text":"<ul> <li>\"Exokernel: An Operating System Architecture for Application-Level Resource Management\" by Dawson R. Engler et al. (1995)</li> <li>Link</li> <li>\"The Performance of \u00b5-Kernel-Based Systems\" by H\u00e4rtig et al. (1997)</li> <li>Link</li> <li>\"Singularity: Rethinking the Software Stack\" by Galen C. Hunt and James R. Larus (2007)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>OSDev.org</li> <li>Link</li> <li>The Little Book About OS Development</li> <li>Link</li> <li>Writing a Simple Operating System from Scratch</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/#books","title":"Books","text":"<ul> <li>\"Operating Systems: Design and Implementation\" by Andrew S. Tanenbaum and Albert S. Woodhull</li> <li>ISBN: 0131429388</li> <li>A comprehensive guide to OS design and implementation, using MINIX as a case study.</li> <li>\"Modern Operating Systems\" by Andrew S. Tanenbaum and Herbert Bos</li> <li>ISBN: 013359162X</li> <li>Covers both the principles and practice of modern operating systems design.</li> <li>\"Operating System Concepts\" by Abraham Silberschatz, Peter B. Galvin, and Greg Gagne</li> <li>ISBN: 1118063333</li> <li>Provides a comprehensive overview of operating system concepts and design.</li> <li>\"The Design and Implementation of the FreeBSD Operating System\" by Marshall Kirk McKusick et al.</li> <li>ISBN: 0321968972</li> <li>Offers an in-depth look at the design and implementation of the FreeBSD operating system.</li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/#standards","title":"Standards","text":"<ul> <li>POSIX (IEEE 1003.1-2017)</li> <li>Defines the standard operating system interface and environment</li> <li>Single UNIX Specification</li> <li>Link</li> <li>Extends POSIX standards to include additional APIs for a standard Unix-like operating system</li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/#online-courses","title":"Online Courses","text":"<ul> <li>MIT 6.828: Operating System Engineering</li> <li>Link</li> <li>CS 162: Operating Systems and Systems Programming at UC Berkeley</li> <li>Link</li> <li>Udacity: Introduction to Operating Systems</li> <li>Link</li> <li>edX: Computer Science 162, 001: Operating Systems and System Programming</li> <li>Link</li> <li>Coursera: Operating Systems and You: Becoming a Power User</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>Operating Systems: Crash Course Computer Science</li> <li>Link</li> <li>Operating System Basics</li> <li>Link</li> <li>How to Make an Operating System</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/#github-repositories","title":"GitHub Repositories","text":"<ul> <li>The Linux Kernel</li> <li>Link</li> <li>xv6, a simple Unix-like teaching operating system</li> <li>Link</li> <li>ToaruOS, a hobby operating system</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/osDesignAndImplementation/#forums-and-communities","title":"Forums and Communities","text":"<ul> <li>Operating Systems: Three Easy Pieces</li> <li>Link</li> <li>OS Dev Forums</li> <li>Link</li> <li>Reddit: r/osdev</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/pageReplacementAlgo/","title":"Page Replacement Algorithms","text":""},{"location":"resources/operatingSystem/pageReplacementAlgo/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Documentation: Page Frame Reclamation</li> <li>Link</li> <li>FreeBSD Kernel Developer's Manual: VM Swapping Subsystem</li> <li>Link</li> <li>Windows Memory Management: Memory Pools</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/pageReplacementAlgo/#research-papers","title":"Research Papers","text":"<ul> <li>\"The Clock Algorithm for Page Replacement\" by F. J. Corbat\u00f3 (1968)</li> <li>Link</li> <li>\"ARC: A Self-Tuning, Low Overhead Replacement Cache\" by N. Megiddo and D. S. Modha (2003)</li> <li>Link</li> <li>\"LIRS: An Efficient Low Inter-reference Recency Set Replacement Policy to Improve Buffer Cache Performance\" by S. Jiang and X. Zhang (2002)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/pageReplacementAlgo/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Operating Systems: Three Easy Pieces - Paging: Smaller Tables</li> <li>Link</li> <li>GeeksforGeeks: Page Replacement Algorithms in Operating Systems</li> <li>Link</li> <li>Computerphile: Page Replacement Algorithms</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/pageReplacementAlgo/#books","title":"Books","text":"<ul> <li>\"Systems Performance: Enterprise and the Cloud\" by Brendan Gregg</li> <li>ISBN: 0136820158</li> <li>Discusses advanced memory management techniques, including page replacement.</li> <li>\"Understanding the Linux Kernel\" by Daniel P. Bovet and Marco Cesati</li> <li>ISBN: 0596005652</li> <li>Provides detailed explanations of Linux memory management, including page replacement algorithms.</li> <li>\"The Art of Computer Systems Performance Analysis\" by Raj Jain</li> <li>ISBN: 0471503363</li> <li>Offers insights into evaluating and optimizing system performance, including memory management.</li> </ul>"},{"location":"resources/operatingSystem/pageReplacementAlgo/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>Includes specifications for memory management functions</li> </ul>"},{"location":"resources/operatingSystem/pageReplacementAlgo/#online-courses","title":"Online Courses","text":"<ul> <li>MIT 6.828: Operating System Engineering</li> <li>Link</li> <li>Coursera: Advanced Operating Systems</li> <li>Link</li> <li>edX: Computer Science 162, 001: Operating Systems and System Programming</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/paging/","title":"Paging","text":""},{"location":"resources/operatingSystem/paging/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Memory Management Documentation</li> <li>Link</li> <li>FreeBSD Handbook: Virtual Memory System</li> <li>Link</li> <li>Windows Internals: Virtual Memory Manager</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/paging/#research-papers","title":"Research Papers","text":"<ul> <li>\"Paging in Modern Operating System\" by S. Venkataraman and R. Padmanabhan (1987)</li> <li>Link</li> <li>\"Shadow Paging Is Feasible\" by R. A. Lorie (1977)</li> <li>Link</li> <li>\"Analysis of the FIFO Page Replacement Algorithm\" by J. Banerjee et al. (1978)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/paging/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Operating Systems: Three Easy Pieces - Paging</li> <li>Link</li> <li>GeeksforGeeks: Paging in Operating System</li> <li>Link</li> <li>Computerphile: Page Tables</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/paging/#books","title":"Books","text":"<ul> <li>\"Operating Systems: Three Easy Pieces\" by Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau</li> <li>ISBN: 198508659X</li> <li>Provides a comprehensive explanation of paging and virtual memory.</li> <li>\"Computer Systems: A Programmer's Perspective\" by Randal E. Bryant and David R. O'Hallaron</li> <li>ISBN: 013409266X</li> <li>Offers insights into memory hierarchy and paging from a programmer's perspective.</li> <li>\"Operating System Design: The Xinu Approach\" by Douglas Comer</li> <li>ISBN: 1498712436</li> <li>Discusses paging in the context of a real operating system implementation.</li> </ul>"},{"location":"resources/operatingSystem/paging/#standards","title":"Standards","text":"<ul> <li>Intel\u00ae 64 and IA-32 Architectures Software Developer's Manual</li> <li>Provides detailed information about paging mechanisms in Intel processors</li> </ul>"},{"location":"resources/operatingSystem/paging/#online-courses","title":"Online Courses","text":"<ul> <li>MIT 6.828: Operating System Engineering</li> <li>Link</li> <li>Coursera: Operating Systems and You: Becoming a Power User</li> <li>Link</li> <li>edX: Computer Science 162, 001: Operating Systems and System Programming</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/processAndThreads/","title":"Processes and Threads","text":""},{"location":"resources/operatingSystem/processAndThreads/#processes","title":"Processes","text":""},{"location":"resources/operatingSystem/processAndThreads/#what-is-a-process","title":"What is a Process?","text":"<ul> <li>Definition and Explanation:</li> <li>Wikipedia: Process (computing)</li> <li> <p>GeeksforGeeks: Process in Operating System</p> </li> <li> <p>Process vs. Program:</p> </li> <li>What is the difference between a process and a program? (Stack Overflow) </li> </ul>"},{"location":"resources/operatingSystem/processAndThreads/#process-management","title":"Process Management","text":"<ul> <li>Process Lifecycle and States:<ul> <li>Wikipedia: Process state</li> <li>GeeksforGeeks: Process States in Operating System </li> </ul> </li> <li>Process Control Block (PCB):<ul> <li>Wikipedia: Process control block</li> <li>Tutorialspoint: Process Control Block</li> </ul> </li> <li>Process Scheduling:<ul> <li>Tutorialspoint: CPU Scheduling</li> <li>GeeksforGeeks: CPU Scheduling Algorithms</li> </ul> </li> <li>Inter-process Communication (IPC):<ul> <li>Wikipedia: Inter-process communication</li> <li>Tutorialspoint: Inter Process Communication</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processAndThreads/#threads","title":"Threads","text":""},{"location":"resources/operatingSystem/processAndThreads/#what-is-a-thread","title":"What is a Thread?","text":"<ul> <li>Definition and Explanation:</li> <li>Wikipedia: Thread (computing)</li> <li>GeeksforGeeks: Threads in Operating System </li> <li>Threads vs. Processes:</li> <li>Programiz: Difference Between Process and Thread</li> <li>Stack Overflow: What is the difference between a thread and a process?</li> </ul>"},{"location":"resources/operatingSystem/processAndThreads/#thread-management","title":"Thread Management","text":"<ul> <li>Thread Creation and Management:<ul> <li>Java Threads - Tutorialspoint (Example for Java)</li> <li>POSIX Threads - Tutorialspoint (Example for C/C++)</li> </ul> </li> <li>Thread Synchronization:<ul> <li>Wikipedia: Thread synchronization</li> <li>Tutorialspoint: Thread Synchronization</li> </ul> </li> <li>Types of Threads (Kernel-level, User-level):<ul> <li>GeeksforGeeks: Types of Threads</li> </ul> </li> <li>Thread Pools:<ul> <li>Oracle Java Documentation: Thread Pools</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processAndThreads/#concurrency-and-parallelism","title":"Concurrency and Parallelism","text":"<ul> <li>Concurrency (computer science):</li> <li>Wikipedia: Concurrency (computer science) </li> <li>Parallel Computing: </li> <li>Wikipedia: Parallel computing</li> </ul>"},{"location":"resources/operatingSystem/processAndThreads/#books","title":"Books","text":"<ul> <li>Operating System Concepts by Silberschatz, Galvin, and Gagne: (ISBN: 978-1292400451)</li> <li>Excellent coverage of processes, threads, and concurrency.</li> <li>Modern Operating Systems by Andrew S. Tanenbaum: (ISBN: 978-0133591620)</li> <li>In-depth explanations of operating system concepts, including process and thread management. </li> </ul>"},{"location":"resources/operatingSystem/processManagementStructures/","title":"Process Management Structures","text":""},{"location":"resources/operatingSystem/processManagementStructures/#core-concepts","title":"Core Concepts","text":"<ul> <li>Process:<ul> <li>Wikipedia: Process (computing)</li> <li>An instance of a program in execution.</li> </ul> </li> <li>Process Management:<ul> <li>GeeksforGeeks: Process Management in Operating System</li> <li>The tasks performed by an operating system to manage processes.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processManagementStructures/#key-data-structures","title":"Key Data Structures","text":"<ul> <li>Process Control Block (PCB):<ul> <li>Wikipedia: Process control block</li> <li>A data structure that stores information about a process, such as its process ID, state, program counter, register values, memory allocation details, and more.</li> </ul> </li> <li>Process Table:<ul> <li>Techopedia: Process Table</li> <li>A table maintained by the operating system that contains entries (usually PCBs) for each active process.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processManagementStructures/#process-states","title":"Process States","text":"<ul> <li>Process State:<ul> <li>Wikipedia: Process state</li> <li>Represents the current activity of a process, such as running, ready, blocked (waiting), etc.</li> </ul> </li> <li>Process State Diagram:<ul> <li>GeeksforGeeks: Process States in Operating System </li> <li>Illustrates the possible states of a process and transitions between them.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processManagementStructures/#process-scheduling","title":"Process Scheduling","text":"<ul> <li>Process Scheduling:<ul> <li>Tutorialspoint: CPU Scheduling</li> <li>The mechanism by which the operating system determines which process gets access to the CPU and for how long.</li> </ul> </li> <li>Scheduling Algorithms:<ul> <li>GeeksforGeeks: CPU Scheduling Algorithms</li> <li>Various algorithms like First-Come, First-Served (FCFS), Shortest Job First (SJF), Priority Scheduling, Round Robin, etc., used to determine the execution order of processes.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processManagementStructures/#inter-process-communication-ipc","title":"Inter-process Communication (IPC)","text":"<ul> <li>Inter-process Communication:<ul> <li>Wikipedia: Inter-process communication</li> <li>Mechanisms that allow processes to communicate and synchronize with each other. Examples include:<ul> <li>Pipes: Wikipedia: Pipeline (Unix)</li> <li>Message Queues: Wikipedia: Message queue</li> <li>Shared Memory: Wikipedia: Shared memory</li> <li>Sockets: Wikipedia: Network socket</li> </ul> </li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processManagementStructures/#threads-and-concurrency","title":"Threads and Concurrency","text":"<ul> <li>Thread (computing):<ul> <li>Wikipedia: Thread (computing)</li> <li>A lightweight process that shares resources with other threads within the same process.</li> </ul> </li> <li>Concurrency (computer science):<ul> <li>Wikipedia: Concurrency (computer science)</li> <li>Dealing with multiple tasks seemingly at the same time.</li> </ul> </li> <li>Thread Synchronization:<ul> <li>Tutorialspoint: Thread Synchronization</li> <li>Mechanisms (like mutexes, semaphores, etc.) to prevent race conditions and ensure data consistency when multiple threads access shared resources.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processManagementStructures/#additional-resources","title":"Additional Resources","text":"<ul> <li>Books:<ul> <li>Operating System Concepts by Silberschatz, Galvin, and Gagne (ISBN: 978-1292400451)</li> <li>Modern Operating Systems by Andrew S. Tanenbaum (ISBN: 978-0133591620)</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/processScheduling/","title":"Process Scheduling","text":""},{"location":"resources/operatingSystem/processScheduling/#fundamentals-of-operating-systems","title":"Fundamentals of Operating Systems","text":"<ul> <li>Operating System Concepts (Book):</li> <li>ISBN: 978-1292233423 </li> <li>Modern Operating Systems (Book): </li> <li>ISBN: 978-0133591620</li> <li>Operating Systems: Internals and Design Principles (Book):</li> <li>ISBN: 978-0134670959</li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#process-scheduling-concepts","title":"Process Scheduling Concepts","text":"<ul> <li>Process Scheduling (GeeksforGeeks):</li> <li>https://www.geeksforgeeks.org/process-scheduling-in-operating-system/</li> <li>Scheduling Algorithms in Operating Systems (Tutorialspoint):</li> <li>https://www.tutorialspoint.com/operating_system/os_process_scheduling_algorithms.htm</li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#scheduling-algorithms","title":"Scheduling Algorithms","text":""},{"location":"resources/operatingSystem/processScheduling/#first-come-first-served-fcfs","title":"First-Come, First-Served (FCFS)","text":"<ul> <li>FCFS Scheduling (Gate Vidyalay):</li> <li>https://www.gatevidyalay.com/fcfs-scheduling-algorithm-operating-system/</li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#shortest-job-next-sjn-shortest-job-first-sjf","title":"Shortest Job Next (SJN) / Shortest Job First (SJF)","text":"<ul> <li>Shortest Job First (SJF) CPU Scheduling (GeeksforGeeks):</li> <li>https://www.geeksforgeeks.org/shortest-job-first-sjf-cpu-scheduling-algorithms/ </li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#priority-scheduling","title":"Priority Scheduling","text":"<ul> <li>Priority Scheduling (Tutorialspoint):</li> <li>https://www.tutorialspoint.com/operating_system/os_priority_scheduling.htm</li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#round-robin-scheduling","title":"Round Robin Scheduling","text":"<ul> <li>Round Robin Scheduling (GeeksforGeeks):</li> <li>https://www.geeksforgeeks.org/round-robin-scheduling-algorithm/</li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#multilevel-queue-scheduling","title":"Multilevel Queue Scheduling","text":"<ul> <li>Multilevel Queue Scheduling (TechTarget):</li> <li>https://www.techtarget.com/searchstorage/definition/multilevel-queue-scheduling-algorithm </li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#multilevel-feedback-queue-scheduling","title":"Multilevel Feedback Queue Scheduling","text":"<ul> <li>Multilevel Feedback Queue Scheduling (Guru99):</li> <li>https://www.guru99.com/multilevel-feedback-queue-scheduling.html</li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#process-scheduling-in-linux","title":"Process Scheduling in Linux","text":"<ul> <li>Process Scheduling in Linux (Linux Handbook):</li> <li>https://linuxhandbook.com/process-scheduling-linux/ </li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#process-scheduling-in-windows","title":"Process Scheduling in Windows","text":"<ul> <li>Thread Scheduling and Priorities (Microsoft Docs):</li> <li>https://learn.microsoft.com/en-us/windows/win32/procthread/thread-scheduling-and-priorities</li> </ul>"},{"location":"resources/operatingSystem/processScheduling/#online-courses","title":"Online Courses","text":"<ul> <li>Operating Systems from Scratch (Udemy):</li> <li>https://www.udemy.com/course/operating-systems-from-scratch/</li> <li>Introduction to Operating Systems (Coursera):</li> <li>https://www.coursera.org/learn/os-intro</li> </ul> <p>This resource list provides a good starting point for understanding process scheduling. Happy learning! </p>"},{"location":"resources/operatingSystem/protectionInOS/","title":"Protection in Operating Systems","text":""},{"location":"resources/operatingSystem/protectionInOS/#official-documentation","title":"Official Documentation","text":"<ul> <li>SELinux Project</li> <li>Link</li> <li>AppArmor Documentation</li> <li>Link</li> <li>Windows Security Documentation</li> <li>Link</li> <li>Linux Kernel Security Documentation</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/protectionInOS/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Comparison of Secure Multi-tenancy Architectures for Filesystem Storage Clouds\" by M. Factor et al. (2013)</li> <li>Link</li> <li>\"Secure Virtual Architecture: A Safe Execution Environment for Commodity Operating Systems\" by J. Criswell et al. (2007)</li> <li>Link</li> <li>\"TRESOR Runs Encryption Securely Outside RAM\" by T. M\u00fcller et al. (2011)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/protectionInOS/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>The Linux Security Module Framework</li> <li>Link</li> <li>OpenBSD Security Features</li> <li>Link</li> <li>Qubes OS: A reasonably secure operating system</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/protectionInOS/#books","title":"Books","text":"<ul> <li>\"Operating System Security\" by Trent Jaeger</li> <li>ISBN: 1598292129</li> <li>Provides a comprehensive overview of security in operating systems.</li> <li>\"Linux Security Cookbook\" by Daniel J. Barrett, Richard E. Silverman, and Robert G. Byrnes</li> <li>ISBN: 0596003919</li> <li>Offers practical solutions for enhancing Linux system security.</li> <li>\"Windows Internals, Part 1\" by Pavel Yosifovich, Alex Ionescu, Mark E. Russinovich, and David A. Solomon</li> <li>ISBN: 0735684189</li> <li>Covers the internals of Windows operating systems, including security mechanisms.</li> <li>\"The Design and Implementation of the FreeBSD Operating System\" by Marshall Kirk McKusick, George V. Neville-Neil, and Robert N.M. Watson</li> <li>ISBN: 0321968972</li> <li>Includes detailed information on FreeBSD's security features and implementation.</li> </ul>"},{"location":"resources/operatingSystem/protectionInOS/#standards","title":"Standards","text":"<ul> <li>Common Criteria for Information Technology Security Evaluation (ISO/IEC 15408)</li> <li>International standard for computer security certification</li> <li>NIST Special Publication 800-123: Guide to General Server Security</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/protectionInOS/#online-courses","title":"Online Courses","text":"<ul> <li>Coursera: Operating Systems Security by University of Colorado</li> <li>Link</li> <li>edX: Computer Systems Security</li> <li>Link</li> <li>Udacity: Security in Computing Systems</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/realTimeOS/","title":"Real-Time Operating Systems","text":""},{"location":"resources/operatingSystem/realTimeOS/#official-documentation","title":"Official Documentation","text":"<ul> <li>FreeRTOS Documentation</li> <li>Link</li> <li>VxWorks Documentation</li> <li>Link</li> <li>QNX Neutrino RTOS Documentation</li> <li>Link</li> <li>Zephyr Project Documentation</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/realTimeOS/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Survey of Real-Time Operating Systems\" by Akram A. Bayoumi (2014)</li> <li>Link</li> <li>\"A Survey of Real-Time Operating Systems - Preliminary Draft\" by Nicholas Mc Guire (2007)</li> <li>Link</li> <li>\"Real-Time Systems: Design Principles for Distributed Embedded Applications\" by Hermann Kopetz (2011)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/realTimeOS/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Real-Time Operating Systems (RTOS) 101</li> <li>Link</li> <li>Introduction to Real-Time Operating Systems</li> <li>Link</li> <li>Embedded.com: RTOS Fundamentals</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/realTimeOS/#books","title":"Books","text":"<ul> <li>\"Real-Time Concepts for Embedded Systems\" by Qing Li and Caroline Yao</li> <li>ISBN: 1578201241</li> <li>Provides a comprehensive introduction to real-time operating systems for embedded applications.</li> <li>\"Operating Systems: Design and Implementation\" by Andrew S. Tanenbaum and Albert S. Woodhull</li> <li>ISBN: 0131429388</li> <li>While not exclusively about RTOSes, it provides valuable insights into OS design principles applicable to real-time systems.</li> <li>\"Real-Time Systems\" by Jane W. S. Liu</li> <li>ISBN: 0130996513</li> <li>Covers the fundamental concepts of real-time systems, including scheduling algorithms and resource management.</li> <li>\"Hard Real-Time Computing Systems: Predictable Scheduling Algorithms and Applications\" by Giorgio C. Buttazzo</li> <li>ISBN: 1461406757</li> <li>Focuses on scheduling algorithms and their applications in hard real-time systems.</li> </ul>"},{"location":"resources/operatingSystem/realTimeOS/#standards","title":"Standards","text":"<ul> <li>POSIX.1b Real-time extensions (IEEE Std 1003.1b-1993)</li> <li>Defines the real-time extensions to the POSIX standard</li> <li>AUTOSAR (AUTomotive Open System ARchitecture)</li> <li>Link</li> <li>Standardizes software architecture for automotive electronic control units</li> </ul>"},{"location":"resources/operatingSystem/realTimeOS/#online-courses","title":"Online Courses","text":"<ul> <li>edX: Real-Time Bluetooth Networks - Shape the World</li> <li>Link</li> <li>Udemy: FreeRTOS From Ground Up\u2122 on ARM Processors</li> <li>Link</li> <li>Coursera: Real-Time Systems</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityMechanism/","title":"Security Mechanisms","text":""},{"location":"resources/operatingSystem/securityMechanism/#official-documentation","title":"Official Documentation","text":"<ul> <li>NIST Special Publications</li> <li>Link</li> <li>IETF Security Area</li> <li>Link</li> <li>W3C Web Security Context</li> <li>Link</li> <li>OWASP Cheat Sheet Series</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityMechanism/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Survey of Access Control Models\" by R. Sandhu and P. Samarati (1994)</li> <li>Link</li> <li>\"The Evolution of Access Control Models\" by D. Ferraiolo and D. Kuhn (2009)</li> <li>Link</li> <li>\"A Survey of Trust and Reputation Systems for Online Service Provision\" by A. J\u00f8sang et al. (2007)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityMechanism/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Cryptography and Security on ArXiv</li> <li>Link</li> <li>Mozilla Web Security Guidelines</li> <li>Link</li> <li>SANS Reading Room</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityMechanism/#books","title":"Books","text":"<ul> <li>\"Cryptography and Network Security: Principles and Practice\" by William Stallings</li> <li>ISBN: 0134444280</li> <li>Provides a comprehensive overview of the principles and practices of cryptography and network security.</li> <li>\"Computer Security: Principles and Practice\" by William Stallings and Lawrie Brown</li> <li>ISBN: 0134794109</li> <li>Offers a broad introduction to the various aspects of computer security.</li> <li>\"Security Engineering: A Guide to Building Dependable Distributed Systems\" by Ross Anderson</li> <li>ISBN: 0470068523</li> <li>Covers a wide range of security mechanisms and their applications in various systems.</li> <li>\"Applied Cryptography: Protocols, Algorithms, and Source Code in C\" by Bruce Schneier</li> <li>ISBN: 1119096723</li> <li>Provides an in-depth look at cryptographic algorithms and protocols.</li> </ul>"},{"location":"resources/operatingSystem/securityMechanism/#standards","title":"Standards","text":"<ul> <li>ISO/IEC 27002:2013 Code of practice for information security controls</li> <li>Provides best practice recommendations on information security controls</li> <li>FIPS 140-3 Security Requirements for Cryptographic Modules</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityMechanism/#online-courses","title":"Online Courses","text":"<ul> <li>Coursera: Cryptography I by Stanford University</li> <li>Link</li> <li>edX: Introduction to Cybersecurity</li> <li>Link</li> <li>Udacity: Applied Cryptography</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityThreatsAndAttacks/","title":"Security Threats and Attacks","text":""},{"location":"resources/operatingSystem/securityThreatsAndAttacks/#official-documentation","title":"Official Documentation","text":"<ul> <li>NIST Computer Security Resource Center</li> <li>Link</li> <li>OWASP (Open Web Application Security Project)</li> <li>Link</li> <li>US-CERT (United States Computer Emergency Readiness Team)</li> <li>Link</li> <li>MITRE ATT&amp;CK Framework</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityThreatsAndAttacks/#research-papers","title":"Research Papers","text":"<ul> <li>\"A Survey of Coordinated Attacks and Collaborative Intrusion Detection\" by F. Gong (2003)</li> <li>Link</li> <li>\"A Survey of Insider Attack Detection Research\" by M. Salem et al. (2008)</li> <li>Link</li> <li>\"A Survey of Botnet and Botnet Detection\" by M. Feily et al. (2009)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityThreatsAndAttacks/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Cybersecurity &amp; Infrastructure Security Agency (CISA) Resources</li> <li>Link</li> <li>SANS Internet Storm Center</li> <li>Link</li> <li>Krebs on Security</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityThreatsAndAttacks/#books","title":"Books","text":"<ul> <li>\"The Art of Attack: Attacker Mindset for Security Professionals\" by Maxie Reynolds</li> <li>ISBN: 1119805465</li> <li>Provides insights into the mindset and strategies of attackers to help defenders improve their security posture.</li> <li>\"Threat Modeling: Designing for Security\" by Adam Shostack</li> <li>ISBN: 1118809998</li> <li>Offers a comprehensive approach to identifying and mitigating potential security threats in system design.</li> <li>\"Hacking: The Art of Exploitation\" by Jon Erickson</li> <li>ISBN: 1593271441</li> <li>Explores various hacking techniques and attacks, providing a deep understanding of how they work.</li> <li>\"The Web Application Hacker's Handbook: Finding and Exploiting Security Flaws\" by Dafydd Stuttard and Marcus Pinto</li> <li>ISBN: 1118026470</li> <li>Focuses on web application security, covering a wide range of attacks and defense strategies.</li> </ul>"},{"location":"resources/operatingSystem/securityThreatsAndAttacks/#standards","title":"Standards","text":"<ul> <li>ISO/IEC 27001:2013 Information Security Management</li> <li>Provides requirements for an information security management system (ISMS)</li> <li>NIST Special Publication 800-53 Security and Privacy Controls for Information Systems and Organizations</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/securityThreatsAndAttacks/#online-courses","title":"Online Courses","text":"<ul> <li>Coursera: Cybersecurity Specialization by University of Maryland</li> <li>Link</li> <li>edX: Cybersecurity Fundamentals</li> <li>Link</li> <li>Udacity: Security Analyst Nanodegree</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/segmentation/","title":"Segmentation","text":""},{"location":"resources/operatingSystem/segmentation/#official-documentation","title":"Official Documentation","text":"<ul> <li>Intel\u00ae 64 and IA-32 Architectures Software Developer's Manual</li> <li>Link</li> <li>AMD64 Architecture Programmer's Manual</li> <li>Link</li> <li>GNU Assembler Manual: Segments and Memory</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/segmentation/#research-papers","title":"Research Papers","text":"<ul> <li>\"The Multics Virtual Memory: Concepts and Design\" by R. C. Daley and J. B. Dennis (1968)</li> <li>Link</li> <li>\"Protection in Operating Systems\" by J. H. Saltzer and M. D. Schroeder (1975)</li> <li>Link</li> <li>\"Towards a Theory of Memory Management\" by P. J. Denning (1970)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/segmentation/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Operating Systems: Three Easy Pieces - Segmentation</li> <li>Link</li> <li>GeeksforGeeks: Segmentation in Operating System</li> <li>Link</li> <li>OS Dev Wiki: Segmentation</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/segmentation/#books","title":"Books","text":"<ul> <li>\"Modern Operating Systems\" by Andrew S. Tanenbaum and Herbert Bos</li> <li>ISBN: 013359162X</li> <li>Provides a comprehensive explanation of segmentation and its role in memory management.</li> <li>\"Operating Systems: Internals and Design Principles\" by William Stallings</li> <li>ISBN: 0134670957</li> <li>Offers detailed insights into segmentation and other memory management techniques.</li> <li>\"The Design of the UNIX Operating System\" by Maurice J. Bach</li> <li>ISBN: 0132017997</li> <li>Discusses segmentation in the context of the UNIX operating system.</li> </ul>"},{"location":"resources/operatingSystem/segmentation/#standards","title":"Standards","text":"<ul> <li>IEEE Std 1003.1-2017 (POSIX.1-2017)</li> <li>Includes specifications related to memory management in operating systems</li> </ul>"},{"location":"resources/operatingSystem/segmentation/#online-courses","title":"Online Courses","text":"<ul> <li>MIT OpenCourseWare: 6.828 Operating System Engineering</li> <li>Link</li> <li>Udacity: GT - Refresher - Advanced OS</li> <li>Link</li> <li>Coursera: Introduction to Operating Systems by Georgia Tech</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/softwareLayers/","title":"Software Layers (Firmware, OS, Applications)","text":""},{"location":"resources/operatingSystem/softwareLayers/#firmware","title":"Firmware","text":"<ul> <li>Firmware Explained: What It Is, Types &amp; Examples</li> <li>Firmware vs. Software: What's the Difference? </li> <li>Introduction to Embedded Systems </li> <li>What is BIOS?</li> <li>UEFI BIOS vs. Legacy BIOS </li> </ul>"},{"location":"resources/operatingSystem/softwareLayers/#operating-systems-os","title":"Operating Systems (OS)","text":"<ul> <li>Operating system</li> <li>Types of Operating Systems</li> <li>Kernel (operating system)</li> <li>Linux</li> <li>Microsoft Windows </li> <li>Apple macOS</li> <li>Android</li> <li>iOS</li> <li>Operating System Concepts (Silberschatz, Galvin, Gagne) (ISBN: 978-1292233477)</li> </ul>"},{"location":"resources/operatingSystem/softwareLayers/#applications","title":"Applications","text":"<ul> <li>Application Software</li> <li>Types of Application Software</li> <li>Programming Languages</li> <li>What is an API?</li> <li>Apple App Store</li> <li>Google Play Store</li> </ul>"},{"location":"resources/operatingSystem/softwareLayers/#interaction-between-layers","title":"Interaction Between Layers","text":"<ul> <li>System call</li> <li>Device driver </li> <li>Abstraction layer </li> </ul>"},{"location":"resources/operatingSystem/systemCalls/","title":"System Calls","text":""},{"location":"resources/operatingSystem/systemCalls/#articlesblog-posts","title":"Articles/Blog Posts","text":"<ul> <li>System call: </li> <li>Wikipedia</li> <li>What are System Calls in OS? Types &amp; Examples:</li> <li>Guru99</li> <li>Understanding User Space and Kernel Space in Linux:</li> <li>DigitalOcean (Explains the context of system calls)</li> </ul>"},{"location":"resources/operatingSystem/systemCalls/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>System Calls - Operating System: </li> <li>YouTube - Neso Academy</li> <li>System Call in Operating System:</li> <li>YouTube - Gate Smashers</li> </ul>"},{"location":"resources/operatingSystem/systemCalls/#documentationexamples","title":"Documentation/Examples","text":"<ul> <li>Linux System Call Reference:</li> <li>Linux man pages  (Detailed documentation of Linux system calls)</li> <li>Windows System Call Table:</li> <li>j00ru's Blog (Information on Windows system calls)</li> </ul>"},{"location":"resources/operatingSystem/systemCalls/#books","title":"Books","text":"<ul> <li>Operating System Concepts (10th Edition) by Silberschatz, Galvin, and Gagne: </li> <li>ISBN: 978-1292400451 </li> <li>Modern Operating Systems (4th Edition) by Andrew S. Tanenbaum:</li> <li>ISBN: 978-0133591620  </li> </ul>"},{"location":"resources/operatingSystem/systemCalls/#related-concepts","title":"Related Concepts","text":"<ul> <li>Application Programming Interface (API):</li> <li>Wikipedia </li> <li>System calls are often accessed through higher-level APIs.</li> </ul>"},{"location":"resources/operatingSystem/thrashing/","title":"Thrashing","text":""},{"location":"resources/operatingSystem/thrashing/#official-documentation","title":"Official Documentation","text":"<ul> <li>Linux Kernel Documentation: OOM Killer</li> <li>Link</li> <li>Windows Memory Management: Paging</li> <li>Link</li> <li>Oracle Solaris 11.4 Tunable Parameters Reference Manual</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/thrashing/#research-papers","title":"Research Papers","text":"<ul> <li>\"Thrashing: Its Causes and Prevention\" by Peter J. Denning (1968)</li> <li>Link</li> <li>\"The Working Set Model for Program Behavior\" by Peter J. Denning (1968)</li> <li>Link</li> <li>\"Prevention of Thrashing in Computer Systems\" by R. L. Mattson et al. (1970)</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/thrashing/#additional-online-resources","title":"Additional Online Resources","text":"<ul> <li>Operating Systems: Three Easy Pieces - Thrashing</li> <li>Link</li> <li>GeeksforGeeks: Thrashing in Operating System</li> <li>Link</li> <li>TutorialsPoint: OS - Virtual Memory</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/thrashing/#books","title":"Books","text":"<ul> <li>\"Operating System Concepts\" by Abraham Silberschatz, Peter B. Galvin, and Greg Gagne</li> <li>ISBN: 1118063333</li> <li>Provides a comprehensive explanation of thrashing and its prevention.</li> <li>\"Advanced Programming in the UNIX Environment\" by W. Richard Stevens and Stephen A. Rago</li> <li>ISBN: 0321637739</li> <li>Discusses memory management issues, including thrashing, in UNIX systems.</li> <li>\"Systems Performance: Enterprise and the Cloud\" by Brendan Gregg</li> <li>ISBN: 0136820158</li> <li>Offers insights into performance issues, including thrashing, in modern systems.</li> </ul>"},{"location":"resources/operatingSystem/thrashing/#standards","title":"Standards","text":"<ul> <li>POSIX.1-2017 (IEEE Std 1003.1-2017)</li> <li>Includes specifications for memory management functions</li> </ul>"},{"location":"resources/operatingSystem/thrashing/#online-courses","title":"Online Courses","text":"<ul> <li>Stanford CS140: Operating Systems</li> <li>Link</li> <li>Udacity: Introduction to Operating Systems</li> <li>Link</li> <li>Coursera: Introduction to Operating Systems by Georgia Tech</li> <li>Link</li> </ul>"},{"location":"resources/operatingSystem/vonNeumannArchitecture/","title":"Von Neumann Architecture","text":""},{"location":"resources/operatingSystem/vonNeumannArchitecture/#basic-concepts","title":"Basic Concepts","text":"<ul> <li>Von Neumann Architecture - Wikipedia:<ul> <li>https://en.wikipedia.org/wiki/Von_Neumann_architecture</li> <li>Comprehensive overview of the architecture, its history, and key characteristics.</li> </ul> </li> <li>Von Neumann Architecture - Techopedia: <ul> <li>https://www.techopedia.com/definition/1390/von-neumann-architecture </li> <li>Simplified explanation of the architecture and its components.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/vonNeumannArchitecture/#key-components-and-their-roles","title":"Key Components and Their Roles","text":"<ul> <li>CPU (Central Processing Unit): <ul> <li>See \"CPU\" section for detailed resources on CPU architecture and functionality. </li> </ul> </li> <li>Memory (Main Memory):<ul> <li>See \"Memory\" section for resources on memory hierarchy and organization.</li> </ul> </li> <li>Input/Output Devices:<ul> <li>See \"I/O Devices\" section for details on various I/O devices and their interfaces.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/vonNeumannArchitecture/#instruction-cycle-and-program-execution","title":"Instruction Cycle and Program Execution","text":"<ul> <li>The Fetch-Execute Cycle - BBC Bitesize:<ul> <li>https://www.bbc.co.uk/bitesize/guides/zws8d2p/revision/3 </li> <li>Simple explanation of how instructions are fetched and executed in a Von Neumann machine.</li> </ul> </li> <li>Computer Organization and Design RISC-V Edition (Book - Chapter 1):<ul> <li>ISBN: 978-0128122754</li> <li>Find Online</li> <li>Introduces the stored-program concept and its implications.</li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/vonNeumannArchitecture/#advantages-and-disadvantages","title":"Advantages and Disadvantages","text":"<ul> <li>Von Neumann vs. Harvard Architecture - GeeksforGeeks: <ul> <li>https://www.geeksforgeeks.org/von-neumann-vs-harvard-architecture/ </li> <li>Compares and contrasts the Von Neumann architecture with the Harvard architecture, highlighting their pros and cons. </li> </ul> </li> </ul>"},{"location":"resources/operatingSystem/vonNeumannArchitecture/#alternatives-and-modern-architectures","title":"Alternatives and Modern Architectures","text":"<ul> <li>Harvard Architecture - Wikipedia:<ul> <li>https://en.wikipedia.org/wiki/Harvard_architecture </li> <li>Explanation of the Harvard architecture and its differences from the Von Neumann model.</li> </ul> </li> <li>Modified Harvard Architecture - Wikipedia:<ul> <li>https://en.wikipedia.org/wiki/Modified_Harvard_architecture</li> <li>Describes the modified Harvard architecture, a hybrid approach combining elements of both Von Neumann and Harvard models.</li> </ul> </li> <li>Beyond Von Neumann - Computer Architecture Research Directions:<ul> <li>https://cacm.acm.org/magazines/2021/10/256524-there-is-plenty-of-room-at-the-top/fulltext </li> <li>Article discussing research directions in computer architecture that aim to overcome limitations of the Von Neumann model. </li> </ul> </li> </ul>"},{"location":"resources/programming/c/","title":"C Programming Language Cheatsheet","text":""},{"location":"resources/programming/c/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic Structure</li> <li>Variables and Data Types</li> <li>Memory Management</li> <li>Binary Operators</li> <li>Assignment Shortcuts</li> <li>Standard Input/Output Functions</li> <li>Standard Library Functions</li> <li>Best Practices</li> <li>Advanced Topics</li> </ul>"},{"location":"resources/programming/c/#basic-structure","title":"Basic Structure","text":""},{"location":"resources/programming/c/#program-template","title":"Program Template","text":"<pre><code>/* comment to describe the program */\n#include &lt;stdio.h&gt;\n/* definitions */\n\nint main(int argc, char **argv) {\n    /* variable declarations */\n    /* program statements */\n}\n</code></pre>"},{"location":"resources/programming/c/#naming-conventions","title":"Naming Conventions","text":"<p>Variable names must follow these rules: - Can contain uppercase letters (A to Z) - Can contain lowercase letters (a to z) - Can contain numbers (0 to 9) - Can contain underscores (_) - Cannot start with a number - Are case-sensitive</p>"},{"location":"resources/programming/c/#variables-and-data-types","title":"Variables and Data Types","text":""},{"location":"resources/programming/c/#basic-data-types","title":"Basic Data Types","text":"Data Type Description Example Usage int Integer values <code>int count = -1;</code> char Character values <code>char letter = 'A';</code> float Floating point numbers <code>float pi = 3.141f;</code> double Double precision numbers <code>double precise_pi = 3.14159265359;</code>"},{"location":"resources/programming/c/#variable-declaration-examples","title":"Variable Declaration Examples","text":"<pre><code>int age;\nchar initial;\nfloat temperature;\ndouble precise_measurement;\nint *pointer_to_int;\nchar string_array[50];\n</code></pre>"},{"location":"resources/programming/c/#memory-management","title":"Memory Management","text":""},{"location":"resources/programming/c/#dynamic-memory-allocation","title":"Dynamic Memory Allocation","text":"<pre><code>// Allocating memory\nint *array = (int *) malloc(sizeof(int) * 10);\nif (array == NULL) {\n    /* handle allocation failure */\n}\n\n// Resizing memory\nint *newarray = (int *) realloc(array, sizeof(int) * 20);\nif (newarray == NULL) {\n    /* handle reallocation failure */\n}\narray = newarray;\n\n// Freeing memory\nfree(array);\n</code></pre>"},{"location":"resources/programming/c/#memory-management-best-practices","title":"Memory Management Best Practices","text":"<ol> <li>Always check for NULL after malloc/realloc</li> <li>Always free allocated memory when no longer needed</li> <li>Never free memory more than once</li> <li>Update pointers after reallocation</li> <li>Initialize pointers to NULL when declaring</li> </ol>"},{"location":"resources/programming/c/#binary-operators","title":"Binary Operators","text":""},{"location":"resources/programming/c/#bitwise-operations","title":"Bitwise Operations","text":"Operator Description Example a &amp; b Bitwise AND <code>result = 5 &amp; 3;</code> a | b Bitwise OR <code>result = 5 \\| 3;</code> a ^ b Bitwise XOR <code>result = 5 ^ 3;</code> a &lt;&lt; n Left shift <code>result = 5 &lt;&lt; 2;</code> a &gt;&gt; n Right shift <code>result = 5 &gt;&gt; 2;</code>"},{"location":"resources/programming/c/#assignment-shortcuts","title":"Assignment Shortcuts","text":""},{"location":"resources/programming/c/#compound-assignment-operators","title":"Compound Assignment Operators","text":"Operator Equivalent Example += a = a + b <code>a += b;</code> -= a = a - b <code>a -= b;</code> *= a = a * b <code>a *= b;</code> /= a = a / b <code>a /= b;</code> %= a = a % b <code>a %= b;</code>"},{"location":"resources/programming/c/#standard-inputoutput-functions","title":"Standard Input/Output Functions","text":""},{"location":"resources/programming/c/#standard-streams","title":"Standard Streams","text":"Stream Description Usage stdin Standard input Reading user input stdout Standard output Normal program output stderr Standard error Error messages"},{"location":"resources/programming/c/#file-operations","title":"File Operations","text":"<pre><code>FILE *fopen(char *filename, char *mode);\nsize_t fread(void *ptr, size_t size, size_t nitems, FILE *stream);\nint fclose(FILE *stream);\n</code></pre>"},{"location":"resources/programming/c/#inputoutput-functions","title":"Input/Output Functions","text":"<pre><code>// String output\nint puts(char *string);\nint printf(char *format, ...);\nint fprintf(FILE *stream, char *format);\nint sprintf(char *string, char *format);\n\n// Character input/output\nint getc(FILE *stream);\nint putc(int ch, FILE *stream);\nint getchar(void);\nint putchar(int ch);\n</code></pre>"},{"location":"resources/programming/c/#standard-library-functions","title":"Standard Library Functions","text":""},{"location":"resources/programming/c/#memory-management-functions","title":"Memory Management Functions","text":"<pre><code>void *malloc(size_t size);\nvoid *realloc(void *ptr, size_t newsize);\nvoid free(void *ptr);\n</code></pre>"},{"location":"resources/programming/c/#sorting-and-searching","title":"Sorting and Searching","text":"<pre><code>void qsort(void *array, size_t nitems, size_t size, \n           int (*compar)(void *a, void *b));\nvoid *bsearch(void *key, void *array, size_t nitems, \n              size_t size, int (*compar)(void *a, void *b));\n</code></pre>"},{"location":"resources/programming/c/#random-number-generation","title":"Random Number Generation","text":"<pre><code>void srand(unsigned int seed);\nint rand(void);\n</code></pre>"},{"location":"resources/programming/c/#best-practices","title":"Best Practices","text":""},{"location":"resources/programming/c/#memory-management-guidelines","title":"Memory Management Guidelines","text":"<ol> <li>Always initialize variables before use</li> <li>Check return values from memory allocation functions</li> <li>Free dynamically allocated memory</li> <li>Avoid memory leaks</li> <li>Use appropriate data types for variables</li> </ol>"},{"location":"resources/programming/c/#code-organization","title":"Code Organization","text":"<ol> <li>Include necessary header files at the start</li> <li>Define constants and macros after headers</li> <li>Declare global variables (if needed) after definitions</li> <li>Define functions before use or provide prototypes</li> <li>Use meaningful variable and function names</li> </ol>"},{"location":"resources/programming/c/#error-handling","title":"Error Handling","text":"<ol> <li>Always check return values of system calls</li> <li>Use stderr for error messages</li> <li>Implement proper error recovery mechanisms</li> <li>Clean up resources in error conditions</li> <li>Use appropriate error codes</li> </ol>"},{"location":"resources/programming/c/#advanced-topics","title":"Advanced Topics","text":""},{"location":"resources/programming/c/#function-pointers","title":"Function Pointers","text":"<pre><code>// Declaration of a function pointer\nint (*operation)(int, int);\n\n// Example usage\nint add(int a, int b) {\n    return a + b;\n}\n\noperation = &amp;add;\nint result = (*operation)(5, 3);\n</code></pre>"},{"location":"resources/programming/c/#structures-and-unions","title":"Structures and Unions","text":"<pre><code>struct Point {\n    int x;\n    int y;\n};\n\nunion Data {\n    int i;\n    float f;\n    char str[20];\n};\n</code></pre>"},{"location":"resources/programming/c/#preprocessor-directives","title":"Preprocessor Directives","text":"<pre><code>#define MAX_SIZE 100\n#define SQUARE(x) ((x) * (x))\n#ifdef DEBUG\n    // Debug code\n#endif\n#ifndef HEADER_H\n#define HEADER_H\n    // Header content\n#endif\n</code></pre>"},{"location":"resources/programming/c/#type-definitions","title":"Type Definitions","text":"<pre><code>typedef unsigned long ulong;\ntypedef struct Point Point;\ntypedef void (*CallbackFunc)(void *data);\n</code></pre>"},{"location":"resources/programming/c/#bit-fields","title":"Bit Fields","text":"<pre><code>struct Flags {\n    unsigned int is_active : 1;\n    unsigned int is_urgent : 1;\n    unsigned int priority : 3;\n};\n</code></pre>"},{"location":"resources/programming/c/#common-programming-patterns","title":"Common Programming Patterns","text":""},{"location":"resources/programming/c/#buffer-management","title":"Buffer Management","text":"<pre><code>#define BUFFER_SIZE 1024\n\nchar buffer[BUFFER_SIZE];\nsize_t bytes_read;\n\n// Safe reading\nif ((bytes_read = fread(buffer, 1, BUFFER_SIZE - 1, file)) &gt; 0) {\n    buffer[bytes_read] = '\\0';\n}\n</code></pre>"},{"location":"resources/programming/c/#string-manipulation","title":"String Manipulation","text":"<pre><code>// String copy with bounds checking\nchar dest[50];\nconst char *src = \"Hello, World!\";\nstrncpy(dest, src, sizeof(dest) - 1);\ndest[sizeof(dest) - 1] = '\\0';\n</code></pre>"},{"location":"resources/programming/c/#command-line-arguments","title":"Command Line Arguments","text":"<pre><code>int main(int argc, char **argv) {\n    for (int i = 1; i &lt; argc; i++) {\n        printf(\"Argument %d: %s\\n\", i, argv[i]);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"resources/programming/c/#debugging-tips","title":"Debugging Tips","text":""},{"location":"resources/programming/c/#common-debugging-techniques","title":"Common Debugging Techniques","text":"<ol> <li>Use printf debugging</li> <li>Check return values</li> <li>Validate pointer operations</li> <li>Monitor memory usage</li> <li>Use assert statements</li> </ol>"},{"location":"resources/programming/c/#assert-usage","title":"Assert Usage","text":"<pre><code>#include &lt;assert.h&gt;\n\nvoid process_data(int *data, size_t size) {\n    assert(data != NULL);\n    assert(size &gt; 0);\n    // Process data\n}\n</code></pre>"},{"location":"resources/programming/c/#performance-optimization","title":"Performance Optimization","text":""},{"location":"resources/programming/c/#optimization-techniques","title":"Optimization Techniques","text":"<ol> <li>Use appropriate data structures</li> <li>Minimize memory allocation</li> <li>Optimize loops</li> <li>Use bitwise operations when applicable</li> <li>Consider cache efficiency</li> </ol>"},{"location":"resources/programming/c/#example-optimizations","title":"Example Optimizations","text":"<pre><code>// Optimized loop\nfor (int i = 0; i &lt; size; i++) {\n    // Cache the value to avoid multiple array accesses\n    int temp = array[i];\n    if (temp &gt; max) {\n        max = temp;\n    }\n}\n</code></pre>"},{"location":"resources/programming/emacs/","title":"GNU Emacs Cheatsheet","text":""},{"location":"resources/programming/emacs/#emacs-commands-relation-diagram","title":"Emacs Commands Relation Diagram","text":""},{"location":"resources/programming/emacs/#key-notation","title":"Key Notation","text":"<ul> <li><code>C-</code> means hold the Control key</li> <li><code>M-</code> means hold the Alt key (Meta) or press and release Escape</li> <li><code>C-x</code> means press Control and 'x' together</li> <li><code>M-x</code> means press Alt and 'x' together or press Escape then 'x'</li> </ul>"},{"location":"resources/programming/emacs/#file-operations","title":"File Operations","text":"Command Description <code>C-x C-f</code> Open a file <code>C-x C-s</code> Save current file <code>C-x C-w</code> Save as... <code>C-x C-k</code> Close file <code>C-x C-c</code> Quit Emacs"},{"location":"resources/programming/emacs/#text-selection","title":"Text Selection","text":"Command Description <code>C-&lt;space&gt;</code> or <code>C-@</code> Start selection <code>C-g</code> Deselect"},{"location":"resources/programming/emacs/#navigation-commands","title":"Navigation Commands","text":""},{"location":"resources/programming/emacs/#line-navigation","title":"Line Navigation","text":"Command Description <code>C-p</code> Move to previous line <code>C-n</code> Move to next line"},{"location":"resources/programming/emacs/#character-navigation","title":"Character Navigation","text":"Command Description <code>C-b</code> Move back one character <code>C-f</code> Move forward one character"},{"location":"resources/programming/emacs/#word-navigation","title":"Word Navigation","text":"Command Description <code>M-b</code> Move back one word <code>M-f</code> Move forward one word"},{"location":"resources/programming/emacs/#line-boundaries","title":"Line Boundaries","text":"Command Description <code>C-a</code> Go to start of line <code>C-e</code> Go to end of line"},{"location":"resources/programming/emacs/#copy-paste-operations","title":"Copy &amp; Paste Operations","text":""},{"location":"resources/programming/emacs/#traditional-emacs-style","title":"Traditional Emacs Style","text":"Command Description <code>C-w</code> Cut (Kill) <code>M-w</code> Copy <code>C-y</code> Paste (Yank) <code>C-k</code> Cut line after cursor <code>M-d</code> Cut word after cursor"},{"location":"resources/programming/emacs/#modern-style-cua-mode","title":"Modern Style (CUA Mode)","text":"Command Description <code>M-x cua-mode</code> Activate modern copy &amp; paste <code>C-x</code> Cut <code>C-c</code> Copy <code>C-v</code> Paste"},{"location":"resources/programming/emacs/#undo-operations","title":"Undo Operations","text":"Command Description <code>C-/</code> or <code>C-x u</code> Undo last operation"},{"location":"resources/programming/emacs/#windows-frames-and-buffers","title":"Windows, Frames, and Buffers","text":""},{"location":"resources/programming/emacs/#split-operations","title":"Split Operations","text":"Command Description <code>C-3</code> Split window vertically <code>C-2</code> Split window horizontally <code>C-1</code> Remove all splits (single window) <code>C-0</code> Remove current window"},{"location":"resources/programming/emacs/#buffer-management","title":"Buffer Management","text":"Command Description <code>C-x &lt;arrow&gt;</code> Cycle through active buffers <code>C-o</code> Visit other split window"},{"location":"resources/programming/emacs/#frame-management","title":"Frame Management","text":"Command Description <code>C-x 52</code> Open a new frame"},{"location":"resources/programming/emacs/#emergency-commands","title":"Emergency Commands","text":"Command Description <code>C-g</code> Cancel current operation/command"},{"location":"resources/programming/emacs/#help-system","title":"Help System","text":"Command Description <code>C-h k &lt;key combo&gt;</code> Show key combination binding <code>C-h b</code> Display all key bindings"},{"location":"resources/programming/emacs/#package-management","title":"Package Management","text":"Command Description <code>M-x list-packages</code> List all available packages <code>M-x describe-package</code> Describe package at cursor <code>M-x package-menu-mark-install</code> Mark package for installation <code>M-x package-install-selected-packages</code> Install marked packages"},{"location":"resources/programming/emacs/#important-concepts","title":"Important Concepts","text":"<ol> <li>Buffer: Holds a process or file content</li> <li>Window: Your view of a buffer</li> <li>Frame: The desktop window containing Emacs</li> </ol>"},{"location":"resources/programming/emacs/#additional-navigation-methods","title":"Additional Navigation Methods","text":"<ul> <li>Use arrow keys for cursor movement if available</li> <li>Use mouse to click and drag for text selection</li> </ul>"},{"location":"resources/programming/emacs/#tips-for-new-users","title":"Tips for New Users","text":"<ol> <li>Start with basic file operations and navigation</li> <li>Learn the help system commands early</li> <li>Consider using CUA mode if coming from other editors</li> <li>Practice emergency cancel (<code>C-g</code>) for when things go wrong</li> <li>Use package management to extend functionality</li> </ol>"},{"location":"resources/programming/emacs/#customization-basics","title":"Customization Basics","text":"<pre><code>;; Add to your .emacs file or init.el\n;; Enable CUA mode for familiar copy-paste\n(cua-mode t)\n\n;; Enable line numbers\n(global-display-line-numbers-mode)\n\n;; Enable syntax highlighting\n(global-font-lock-mode t)\n</code></pre>"},{"location":"resources/programming/emacs/#common-workflows","title":"Common Workflows","text":""},{"location":"resources/programming/emacs/#file-management-workflow","title":"File Management Workflow","text":"<ol> <li>Open Emacs</li> <li>Use <code>C-x C-f</code> to find file</li> <li>Edit content</li> <li>Save with <code>C-x C-s</code></li> <li>Close with <code>C-x C-k</code> or quit Emacs with <code>C-x C-c</code></li> </ol>"},{"location":"resources/programming/emacs/#text-editing-workflow","title":"Text Editing Workflow","text":"<ol> <li>Navigate to location</li> <li>Start selection with <code>C-&lt;space&gt;</code></li> <li>Move cursor to select text</li> <li>Cut/copy as needed</li> <li>Navigate to new location</li> <li>Paste content</li> </ol>"},{"location":"resources/programming/emacs/#window-management-workflow","title":"Window Management Workflow","text":"<ol> <li>Split window as needed (<code>C-2</code> or <code>C-3</code>)</li> <li>Open different files in splits</li> <li>Use <code>C-o</code> to switch between splits</li> <li>Close splits when done (<code>C-0</code> or <code>C-1</code>)</li> </ol>"},{"location":"resources/programming/emacs/#best-practices","title":"Best Practices","text":"<ol> <li>Learn the help system first</li> <li>Practice navigation commands</li> <li>Use package management for extensions</li> <li>Learn buffer management</li> <li>Master window splitting</li> <li>Understand the difference between kill/yank and modern copy/paste</li> <li>Keep emergency commands in mind</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/","title":"Essential Resources for Binary Exploitation and Reverse Engineering","text":""},{"location":"resources/reverse-engineering/re-and-be/#mathematical-foundations","title":"Mathematical Foundations","text":"<ol> <li>\"Linear Algebra and Its Applications\" by Gilbert Strang</li> <li> <p>MIT OpenCourseWare Linear Algebra</p> </li> <li> <p>\"Mathematics for Computer Science\"</p> </li> <li> <p>MIT OpenCourseWare Course Materials</p> </li> <li> <p>Research Paper: \"Applications of Linear Algebra in Computer Science\"</p> </li> <li>DOI: 10.1007/978-3-642-20556-9_15</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#computer-architecture-and-systems","title":"Computer Architecture and Systems","text":"<ol> <li>\"Computer Systems: A Programmer's Perspective\" (CS:APP)</li> <li> <p>CMU Course Page</p> </li> <li> <p>\"Computer Organization and Design RISC-V Edition\"</p> </li> <li> <p>RISC-V Resources</p> </li> <li> <p>\"Digital Design and Computer Architecture: ARM Edition\"</p> </li> <li> <p>Companion Site</p> </li> <li> <p>Research Paper: \"The Case for RISC-V in Computer Architecture Education\"</p> </li> <li>DOI: 10.1145/3338698.3338892</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#assembly-language-and-low-level-programming","title":"Assembly Language and Low-Level Programming","text":"<ol> <li>\"Low-Level Programming: C, Assembly, and Program Execution\"</li> <li> <p>Author's Resources</p> </li> <li> <p>\"Assembly Language Step by Step\"</p> </li> <li> <p>x86 Assembly Reference</p> </li> <li> <p>Research Papers:</p> </li> <li>\"Understanding the Relationship Between Modern Optimizing Compilers and Assembly Code\"      DOI: 10.1145/3316482.3326351</li> <li>\"A Survey of Reverse Engineering and Program Analysis Techniques\"      DOI: 10.1109/MC.2019.2914799</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#reverse-engineering-tools-and-techniques","title":"Reverse Engineering Tools and Techniques","text":"<ol> <li>\"Practical Binary Analysis\"</li> <li> <p>Author's Website</p> </li> <li> <p>\"The IDA Pro Book\"</p> </li> <li> <p>Official IDA Resources</p> </li> <li> <p>\"Ghidra: The Definitive Guide\"</p> </li> <li> <p>NSA Ghidra GitHub</p> </li> <li> <p>Research Paper: \"Dynamic Binary Analysis and Instrumentation\"</p> </li> <li>DOI: 10.1145/2786805.2803178</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#binary-exploitation","title":"Binary Exploitation","text":"<ol> <li>\"Hacking: The Art of Exploitation\"</li> <li> <p>Author's Resources</p> </li> <li> <p>\"The Shellcoder's Handbook\"</p> </li> <li> <p>Wiley Resource Center</p> </li> <li> <p>Research Papers:</p> </li> <li>\"A Survey of Control-Flow Integrity Methods\"      DOI: 10.1145/3054924</li> <li>\"Modern Binary Exploitation Techniques\"      DOI: 10.1109/SP.2019.00074</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#memory-management-and-protection","title":"Memory Management and Protection","text":"<ol> <li>\"Understanding the Linux Virtual Memory Manager\"</li> <li> <p>Kernel Documentation</p> </li> <li> <p>\"Understanding and Exploiting Memory Corruptions\"</p> </li> <li> <p>MIT CSAIL Publications</p> </li> <li> <p>Research Paper: \"Memory Safety in Modern Systems Programming Languages\"</p> </li> <li>DOI: 10.1145/3293883.3295702</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#advanced-topics","title":"Advanced Topics","text":"<ol> <li>\"Automated Software Testing for Program Analysis\"</li> <li> <p>CMU SEI Resources</p> </li> <li> <p>\"Operating Systems: Three Easy Pieces\"</p> </li> <li> <p>Free Online Book</p> </li> <li> <p>Research Papers:</p> </li> <li>\"Advances in Automated Software Vulnerability Detection\"      DOI: 10.1145/3293882.3330579</li> <li>\"Modern Approaches to Binary Instrumentation\"      DOI: 10.1109/SP.2020.00074</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#online-courses-and-video-resources","title":"Online Courses and Video Resources","text":"<ol> <li> <p>MIT 6.858 Computer Systems Security</p> </li> <li> <p>Stanford CS155: Computer and Network Security</p> </li> <li> <p>LiveOverflow YouTube Channel</p> </li> <li> <p>Modern Binary Exploitation - RPISEC</p> </li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#practice-platforms","title":"Practice Platforms","text":"<ol> <li>CTFtime</li> <li>Pwnable.kr</li> <li>Root-Me</li> <li>Exploit Exercises</li> </ol>"},{"location":"resources/reverse-engineering/re-and-be/#development-tools-and-references","title":"Development Tools and References","text":"<ol> <li>Compiler Explorer</li> <li>x86 Assembly Reference</li> <li>DWARF Debugging Standard</li> <li>Binary Ninja Documentation</li> </ol>"},{"location":"resources/univCourses/univ/","title":"Top University Courses in Systems Programming, Compilers, and Low-Level Computing","text":""},{"location":"resources/univCourses/univ/#compilers-language-design","title":"Compilers &amp; Language Design","text":"<ol> <li>MIT 6.035 - Computer Language Engineering</li> <li>Course Materials: MIT OCW</li> <li> <p>Projects: Course Projects Repository</p> </li> <li> <p>Stanford CS143 - Compilers</p> </li> <li>Course Videos: YouTube Playlist</li> <li>Course Materials: Stanford EDU</li> <li> <p>Additional Resources: Course Reader</p> </li> <li> <p>Berkeley CS164 - Programming Languages and Compilers</p> </li> <li>Course Materials: Berkeley Course Page</li> <li>Video Lectures: Berkeley Webcasts</li> <li> <p>Projects Repository: GitHub</p> </li> <li> <p>CMU 15-411 - Compiler Design</p> </li> <li>Course Materials: CMU Course Page</li> <li>Lectures: YouTube Playlist</li> <li> <p>Lab Resources: Course Labs</p> </li> <li> <p>Cornell CS4120 - Introduction to Compilers</p> </li> <li>Course Website: Cornell Course Page</li> <li>Lecture Notes: Course Materials</li> </ol>"},{"location":"resources/univCourses/univ/#operating-systems","title":"Operating Systems","text":"<ol> <li>MIT 6.828 - Operating System Engineering</li> <li>Course Materials: MIT OCW</li> <li>Video Lectures: YouTube Playlist</li> <li> <p>xv6 Resources: xv6 Book</p> </li> <li> <p>Stanford CS140 - Operating Systems</p> </li> <li>Course Materials: Stanford EDU</li> <li>Reference Documentation: Course Reader</li> <li> <p>PintOS Project: Project Repository</p> </li> <li> <p>Berkeley CS162 - Operating Systems and System Programming</p> </li> <li>Course Materials: Berkeley Course Page</li> <li>Video Lectures: YouTube Playlist</li> <li> <p>Projects: CS162 GitHub</p> </li> <li> <p>Harvard CS161 - Operating Systems</p> </li> <li>Course Materials: Harvard EDU</li> <li> <p>OS/161 Resources: OS/161 Documentation</p> </li> <li> <p>MIT 6.S081 - Operating System Engineering (RISC-V Focus)</p> <ul> <li>Course Materials: MIT Course Page</li> <li>Video Lectures: YouTube Playlist</li> <li>Lab Assignments: Course Labs</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#computer-architecture-assembly","title":"Computer Architecture &amp; Assembly","text":"<ol> <li> <p>MIT 6.004 - Computation Structures</p> <ul> <li>Course Materials: MIT OCW</li> <li>Video Lectures: YouTube Playlist</li> <li>Lab Assignments: Course Labs</li> </ul> </li> <li> <p>Berkeley CS61C - Great Ideas in Computer Architecture</p> <ul> <li>Course Materials: Berkeley Course Page</li> <li>Video Lectures: YouTube Playlist</li> <li>Labs &amp; Projects: Course Resources</li> </ul> </li> <li> <p>CMU 15-213 - Introduction to Computer Systems</p> <ul> <li>Course Materials: CMU Course Page</li> <li>Video Lectures: YouTube Playlist</li> <li>Lab Assignments: Course Labs</li> </ul> </li> <li> <p>Stanford CS107 - Computer Organization &amp; Systems</p> <ul> <li>Course Materials: Stanford EDU</li> <li>Course Reader: CS107 Reader</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#performance-engineering-systems-optimization","title":"Performance Engineering &amp; Systems Optimization","text":"<ol> <li> <p>MIT 6.172 - Performance Engineering of Software Systems</p> <ul> <li>Course Materials: MIT OCW</li> <li>Video Lectures: YouTube Playlist</li> <li>Projects: Course Projects</li> </ul> </li> <li> <p>Stanford CS315A - Parallel Computer Architecture and Programming</p> <ul> <li>Course Materials: Stanford Course Page</li> <li>Additional Resources: Course Notes</li> </ul> </li> <li> <p>CMU 15-418 - Parallel Computer Architecture and Programming</p> <ul> <li>Course Materials: CMU Course Page</li> <li>Video Lectures: YouTube Playlist</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#distributed-systems","title":"Distributed Systems","text":"<ol> <li> <p>MIT 6.824 - Distributed Systems</p> <ul> <li>Course Materials: MIT Course Page</li> <li>Video Lectures: YouTube Playlist</li> <li>Labs: Course Labs</li> </ul> </li> <li> <p>Stanford CS244b - Distributed Systems</p> <ul> <li>Course Materials: Stanford Course Page</li> <li>Reading List: Course Readings</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#security-systems","title":"Security &amp; Systems","text":"<ol> <li> <p>MIT 6.858 - Computer Systems Security</p> <ul> <li>Course Materials: MIT Course Page</li> <li>Video Lectures: YouTube Playlist</li> <li>Labs: Security Labs</li> </ul> </li> <li> <p>Stanford CS155 - Computer and Network Security</p> <ul> <li>Course Materials: Stanford Course Page</li> <li>Projects: Course Projects</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#systems-programming-low-level-programming","title":"Systems Programming &amp; Low-Level Programming","text":"<ol> <li> <p>Harvard CS50 - Introduction to Computer Science (Heavy C Focus)</p> <ul> <li>Course Materials: CS50 Website</li> <li>Video Lectures: YouTube Playlist</li> <li>Problem Sets: CS50 Problems</li> </ul> </li> <li> <p>Stanford CS107E - Computer Systems from the Ground Up</p> <ul> <li>Course Materials: Stanford Course Page</li> <li>Labs: Course Labs</li> </ul> </li> <li> <p>CMU 15-123 - Principles of Imperative Computation</p> <ul> <li>Course Materials: CMU Course Page</li> <li>Resources: Course Resources</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#advanced-topics","title":"Advanced Topics","text":"<ol> <li>Stanford CS240 - Advanced Topics in Operating Systems<ul> <li>Course Materials: Stanford EDU</li> <li>Reading List: Course Readings</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#complete-systems-programming-educational-resources","title":"Complete Systems Programming Educational Resources","text":""},{"location":"resources/univCourses/univ/#additional-learning-resources","title":"Additional Learning Resources","text":""},{"location":"resources/univCourses/univ/#free-textbooks-online-books","title":"Free Textbooks &amp; Online Books","text":"<ol> <li>Operating Systems: Three Easy Pieces</li> <li>Online Book</li> <li> <p>GitHub Resources</p> </li> <li> <p>Computer Systems: A Programmer's Perspective</p> </li> <li>Course Website</li> <li> <p>Lab Assignments</p> </li> <li> <p>The Craft of Programming</p> </li> <li>Online Book</li> <li> <p>Practice Problems</p> </li> <li> <p>xv6: a simple, Unix-like teaching operating system</p> </li> <li>RISC-V Book</li> <li>x86 Book</li> <li> <p>Source Code</p> </li> <li> <p>Programming from the Ground Up</p> </li> <li>PDF Book</li> <li>Source Code</li> </ol>"},{"location":"resources/univCourses/univ/#development-environments-virtual-machines","title":"Development Environments &amp; Virtual Machines","text":"<ol> <li>MIT JOS Operating System Lab</li> <li>Setup Instructions</li> <li> <p>VM Image</p> </li> <li> <p>Stanford PintOS</p> </li> <li>Project Resources</li> <li> <p>Setup Guide</p> </li> <li> <p>Harvard OS/161</p> </li> <li>Setup Guide</li> <li> <p>System Guide</p> </li> <li> <p>Berkeley RISC-V Toolchain</p> </li> <li>Installation Guide</li> <li>Docker Image</li> </ol>"},{"location":"resources/univCourses/univ/#practice-problems-assignments","title":"Practice Problems &amp; Assignments","text":"<ol> <li>CMU Computer Systems Performance Problems</li> <li>Problem Sets</li> <li> <p>Solutions Manual</p> </li> <li> <p>MIT OCW Problem Sets</p> </li> <li>6.004 Problems</li> <li> <p>6.828 Problems</p> </li> <li> <p>Stanford Practice Problems</p> </li> <li>CS107 Practice</li> <li>CS110 Problems</li> </ol>"},{"location":"resources/univCourses/univ/#advanced-architecture-computer-systems","title":"Advanced Architecture &amp; Computer Systems","text":"<ol> <li> <p>University of Washington CSE351 - The Hardware/Software Interface</p> <ul> <li>Course Materials: Course Website</li> <li>Labs: Course Labs</li> </ul> </li> <li> <p>EPFL CS-323 - Introduction to Operating Systems</p> <ul> <li>Course Materials: Course Website</li> <li>Projects: Course Projects</li> </ul> </li> <li> <p>UC Berkeley CS152 - Computer Architecture and Engineering</p> <ul> <li>Course Materials: Course Website</li> <li>Labs: RISC-V Labs</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#systems-programming-performance","title":"Systems Programming &amp; Performance","text":"<ol> <li> <p>UIUC CS241 - System Programming</p> <ul> <li>Course Materials: Course Website</li> <li>Projects: Course Projects</li> </ul> </li> <li> <p>UW-Madison CS537 - Introduction to Operating Systems</p> <ul> <li>Course Materials: Course Website</li> <li>Projects: Course Projects</li> </ul> </li> <li> <p>ETH Z\u00fcrich - Systems Programming and Computer Architecture</p> <ul> <li>Course Materials: Course Website</li> <li>Projects: Course Projects</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#embedded-systems-real-time-computing","title":"Embedded Systems &amp; Real-Time Computing","text":"<ol> <li> <p>MIT 6.111 - Introductory Digital Systems Laboratory</p> <ul> <li>Course Materials: MIT OCW</li> <li>Labs: Lab Materials</li> </ul> </li> <li> <p>Stanford CS341 - Embedded Systems Workshop</p> <ul> <li>Course Materials: Course Website</li> <li>Projects: Project Resources</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#advanced-topics_1","title":"Advanced Topics","text":"<ol> <li> <p>MIT 6.826 - Principles of Computer Systems</p> <ul> <li>Course Materials: Course Website</li> <li>Reading List: Course Readings</li> </ul> </li> <li> <p>Berkeley CS262A - Advanced Topics in Computer Systems</p> <ul> <li>Course Materials: Course Website</li> <li>Reading List: Research Papers</li> </ul> </li> </ol>"},{"location":"resources/univCourses/univ/#online-learning-platforms-with-systems-programming-courses","title":"Online Learning Platforms with Systems Programming Courses","text":"<ol> <li>Coursera</li> <li>Computer Architecture</li> <li> <p>Operating Systems and You</p> </li> <li> <p>edX</p> </li> <li>Computer Science: Programming with a Purpose</li> <li>Computation Structures</li> </ol>"},{"location":"resources/univCourses/univ/#github-repositories-with-learning-resources","title":"GitHub Repositories with Learning Resources","text":"<ol> <li>The Missing Semester of Your CS Education</li> <li>Command-line tools</li> <li>Version control</li> <li> <p>Debugging tools</p> </li> <li> <p>OS-Study</p> </li> <li>Curated list of free courses</li> <li>Project-based learning</li> <li> <p>Community support</p> </li> <li> <p>Awesome C</p> </li> <li>Frameworks</li> <li>Libraries</li> <li> <p>Resources</p> </li> <li> <p>Awesome Low Level Programming</p> </li> <li>Assembly</li> <li>Operating Systems</li> <li>Compiler Construction</li> </ol>"},{"location":"resources/univCourses/univ/#development-tools-resources","title":"Development Tools &amp; Resources","text":"<ol> <li>Debugging Tools</li> <li>GDB Tutorial: Guide</li> <li>Valgrind: Documentation</li> <li> <p>LLDB: Tutorial</p> </li> <li> <p>Performance Analysis Tools</p> </li> <li>Perf: Tutorial</li> <li>VTune: Guide</li> <li> <p>DTrace: Documentation</p> </li> <li> <p>Compiler Tools</p> </li> <li>LLVM: Getting Started</li> <li>GCC: Documentation</li> </ol>"},{"location":"resources/univCourses/univ/#practice-projects","title":"Practice Projects","text":"<ol> <li>Build Your Own X</li> <li>Operating System</li> <li>Compiler</li> <li> <p>Shell</p> </li> <li> <p>System Programming Projects</p> </li> <li>Mini Redis</li> <li>Mini Shell</li> <li>HTTP Server</li> </ol>"},{"location":"resources/univCourses/univ/#community-resources","title":"Community Resources","text":"<ol> <li>Forums &amp; Discussion</li> <li>OS Dev</li> <li>Low Level Programming Subreddit</li> <li> <p>Systems Programming Subreddit</p> </li> <li> <p>Conferences &amp; Workshops</p> </li> <li>USENIX OSDI</li> <li>SOSP</li> <li>EuroSys</li> </ol>"},{"location":"resources/univCourses/univ/#important-notes","title":"Important Notes","text":"<ol> <li>Course availability and materials may vary by semester</li> <li>Some resources might require university credentials</li> <li>Always check for the most recent version of course materials</li> <li>Many courses update their materials yearly</li> <li>Some resources might be architecture-specific (x86, ARM, RISC-V)</li> <li>Practice proper security when downloading virtual machines or tools</li> <li>Consider contributing back to open-source educational resources</li> </ol>"},{"location":"roadmap/dsa/dsa/","title":"Table of Content","text":"<ol> <li>Language-Agnostic DSA Roadmap</li> <li>Language-Agnostic DSA Resources</li> </ol>"},{"location":"roadmap/dsa/dsa/#language-agnostic-dsa-roadmap","title":"Language-Agnostic DSA Roadmap","text":""},{"location":"roadmap/dsa/dsa/#learning-path-visualization","title":"Learning Path Visualization","text":""},{"location":"roadmap/dsa/dsa/#detailed-breakdown","title":"Detailed Breakdown","text":""},{"location":"roadmap/dsa/dsa/#foundation-2-3-weeks","title":"Foundation (2-3 weeks)","text":"<ul> <li>Time &amp; Space Complexity</li> <li>Big O Notation</li> <li>Memory concepts</li> <li>Basic programming constructs</li> <li>Problem-solving methodology</li> </ul>"},{"location":"roadmap/dsa/dsa/#core-concepts-8-10-weeks","title":"Core Concepts (8-10 weeks)","text":"<ol> <li>Basic Data Structures</li> <li>Arrays</li> <li>Linked Lists</li> <li>Stacks</li> <li>Queues</li> <li>Hash Tables</li> <li> <p>Basic Trees</p> </li> <li> <p>Basic Algorithms</p> </li> <li>Searching</li> <li>Sorting</li> <li>Recursion</li> <li>Two Pointers</li> <li>Sliding Window</li> </ol>"},{"location":"roadmap/dsa/dsa/#advanced-topics-10-12-weeks","title":"Advanced Topics (10-12 weeks)","text":"<ol> <li>Advanced Data Structures</li> <li>Advanced Trees</li> <li>Graphs</li> <li>Heaps</li> <li>Tries</li> <li>Segment Trees</li> <li> <p>Bloom Filters</p> </li> <li> <p>Advanced Algorithms</p> </li> <li>Dynamic Programming</li> <li>Greedy Algorithms</li> <li>Backtracking</li> <li>Graph Algorithms</li> <li>String Algorithms</li> </ol>"},{"location":"roadmap/dsa/dsa/#mastery-ongoing","title":"Mastery (Ongoing)","text":"<ol> <li>Problem Solving Patterns</li> <li>Pattern recognition</li> <li>Optimization techniques</li> <li>System design basics</li> <li> <p>Interview preparation</p> </li> <li> <p>Specialized Topics</p> </li> <li>Computational Geometry</li> <li>Network Flow</li> <li>Advanced String Algorithms</li> <li>Parallel Algorithms</li> </ol>"},{"location":"roadmap/dsa/dsa/#language-agnostic-dsa-resources","title":"Language-Agnostic DSA Resources","text":""},{"location":"roadmap/dsa/dsa/#online-courses","title":"Online Courses","text":"<ol> <li>Algorithms Part I - Princeton</li> <li>Fundamental algorithms</li> <li>Theoretical foundation</li> <li> <p>Programming assignments</p> </li> <li> <p>Algorithm Specialization - Stanford</p> </li> <li>Comprehensive coverage</li> <li>Advanced topics</li> <li>Real-world applications</li> </ol>"},{"location":"roadmap/dsa/dsa/#books","title":"Books","text":"<ol> <li>\"Introduction to Algorithms\" (CLRS)</li> <li>Comprehensive coverage</li> <li>Theoretical foundation</li> <li> <p>Problem sets</p> </li> <li> <p>\"Algorithm Design Manual\" by Skiena</p> </li> <li>Practical approach</li> <li>Real-world examples</li> <li> <p>Problem-solving strategies</p> </li> <li> <p>\"Grokking Algorithms\" by Bhargava</p> </li> <li>Visual explanations</li> <li>Simple examples</li> <li>Beginner-friendly</li> </ol>"},{"location":"roadmap/dsa/dsa/#online-platforms","title":"Online Platforms","text":"<ol> <li>LeetCode</li> <li>Structured problems</li> <li>Company-specific lists</li> <li> <p>Discussion forums</p> </li> <li> <p>AlgoExpert</p> </li> <li>Curated problems</li> <li>Video explanations</li> <li> <p>Interview preparation</p> </li> <li> <p>InterviewBit</p> </li> <li>Programming interview focus</li> <li>Company-wise problems</li> <li>Mock interviews</li> </ol>"},{"location":"roadmap/dsa/dsa/#websites","title":"Websites","text":"<ol> <li>Visualgo</li> <li>Algorithm visualization</li> <li>Interactive learning</li> <li> <p>Step-by-step execution</p> </li> <li> <p>USACO Guide</p> </li> <li>Competitive programming</li> <li>Comprehensive tutorials</li> <li>Practice problems</li> </ol>"},{"location":"roadmap/dsa/dsa/#youtube-channels","title":"YouTube Channels","text":"<ol> <li>Back To Back SWE</li> <li>Detailed explanations</li> <li>Visual presentations</li> <li> <p>Interview preparation</p> </li> <li> <p>Abdul Bari</p> </li> <li>Algorithm explanations</li> <li>Mathematical approach</li> <li>Theoretical foundation</li> </ol>"},{"location":"roadmap/dsa/dsa/#practice-platforms","title":"Practice Platforms","text":"<ol> <li>AtCoder</li> <li>Regular contests</li> <li>Various difficulty levels</li> <li> <p>Active community</p> </li> <li> <p>SPOJ</p> </li> <li>Classical problems</li> <li>Judge system</li> <li>Multiple languages</li> </ol>"},{"location":"roadmap/dsa/dsa/#github-resources","title":"GitHub Resources","text":"<ol> <li>Coding Interview University</li> <li>Complete study plan</li> <li>Resource compilation</li> <li> <p>Interview preparation</p> </li> <li> <p>JavaScript Algorithms</p> </li> <li>DSA implementations</li> <li>Explanations</li> <li>Examples</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/","title":"Table of Contents","text":"<ol> <li>C Language DSA Roadmap</li> <li>C Language DSA Resources</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#c-language-dsa-roadmap","title":"C Language DSA Roadmap","text":""},{"location":"roadmap/dsa/dsaUsingC/#learning-path-visualization","title":"Learning Path Visualization","text":""},{"location":"roadmap/dsa/dsaUsingC/#detailed-breakdown","title":"Detailed Breakdown","text":""},{"location":"roadmap/dsa/dsaUsingC/#phase-1-c-fundamentals-2-3-weeks","title":"Phase 1: C Fundamentals (2-3 weeks)","text":"<ul> <li>Pointers and pointer arithmetic</li> <li>Dynamic memory allocation</li> <li>Structures and unions</li> <li>File handling</li> <li>Preprocessor directives</li> <li>Makefile creation</li> </ul>"},{"location":"roadmap/dsa/dsaUsingC/#phase-2-memory-management-2-weeks","title":"Phase 2: Memory Management (2 weeks)","text":"<ul> <li>Stack vs Heap</li> <li>Memory leaks</li> <li>Buffer overflows</li> <li>Pointer safety</li> <li>Valgrind usage</li> <li>GDB debugging</li> </ul>"},{"location":"roadmap/dsa/dsaUsingC/#phase-3-core-dsa-8-10-weeks","title":"Phase 3: Core DSA (8-10 weeks)","text":"<ol> <li>Basic Data Structures</li> <li>Arrays and strings</li> <li>Linked lists (single, double, circular)</li> <li>Stacks</li> <li>Queues</li> <li> <p>Hash tables</p> </li> <li> <p>Advanced Data Structures</p> </li> <li>Trees (Binary, BST, AVL)</li> <li>Graphs (Adjacency matrix/list)</li> <li>Heaps</li> <li>Tries</li> <li> <p>Disjoint sets</p> </li> <li> <p>Basic Algorithms</p> </li> <li>Searching (Linear, Binary)</li> <li>Sorting (Bubble, Selection, Insertion)</li> <li>Recursion</li> <li>Basic graph traversals</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#phase-4-advanced-topics-8-10-weeks","title":"Phase 4: Advanced Topics (8-10 weeks)","text":"<ol> <li>Advanced Algorithms</li> <li>Advanced sorting (Quicksort, Mergesort, Heapsort)</li> <li>Dynamic Programming</li> <li>Greedy Algorithms</li> <li>Advanced graph algorithms</li> <li> <p>String algorithms</p> </li> <li> <p>Problem Solving</p> </li> <li>LeetCode problems</li> <li>Competitive programming</li> <li>System design basics</li> <li>Code optimization</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#c-language-dsa-resources","title":"C Language DSA Resources","text":""},{"location":"roadmap/dsa/dsaUsingC/#online-platforms","title":"Online Platforms","text":"<ol> <li>GeeksforGeeks C Programming</li> <li>Extensive C tutorials</li> <li>DSA implementations in C</li> <li> <p>Practice problems</p> </li> <li> <p>CodeForces</p> </li> <li>Competitive programming platform</li> <li>Many solutions in C</li> <li> <p>Regular contests</p> </li> <li> <p>HackerRank C Practice</p> </li> <li>Structured C programming tasks</li> <li>Gradually increasing difficulty</li> <li>Immediate feedback</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#books","title":"Books","text":"<ol> <li>\"Data Structures Using C\" by Reema Thareja</li> <li>Comprehensive coverage</li> <li>Practical examples</li> <li> <p>Exercise problems</p> </li> <li> <p>\"The C Programming Language\" by Kernighan and Ritchie</p> </li> <li>Fundamental C concepts</li> <li>Written by C's creators</li> <li> <p>Essential reference</p> </li> <li> <p>\"Mastering Algorithms with C\" by Kyle Loudon</p> </li> <li>Focus on implementation</li> <li>Performance analysis</li> <li>Real-world applications</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#github-repositories","title":"GitHub Repositories","text":"<ol> <li>C Data Structures</li> <li>Common DSA implementations</li> <li>Well-documented code</li> <li> <p>Testing included</p> </li> <li> <p>C Programming Resources</p> </li> <li>Curated list of resources</li> <li>Frameworks and libraries</li> <li>Learning materials</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#interactive-learning","title":"Interactive Learning","text":"<ol> <li>CS50x</li> <li>Harvard's intro course</li> <li>Strong C foundation</li> <li> <p>Hands-on projects</p> </li> <li> <p>Learn-C.org</p> </li> <li>Interactive tutorials</li> <li>Practice exercises</li> <li>Immediate feedback</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#online-platforms_1","title":"Online Platforms","text":"<ol> <li>LeetCode</li> <li>Structured problems</li> <li>Company-specific lists</li> <li> <p>Discussion forums</p> </li> <li> <p>AlgoExpert</p> </li> <li>Curated problems</li> <li>Video explanations</li> <li> <p>Interview preparation</p> </li> <li> <p>InterviewBit</p> </li> <li>Programming interview focus</li> <li>Company-wise problems</li> <li>Mock interviews</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#websites","title":"Websites","text":"<ol> <li>Visualgo</li> <li>Algorithm visualization</li> <li>Interactive learning</li> <li> <p>Step-by-step execution</p> </li> <li> <p>USACO Guide</p> </li> <li>Competitive programming</li> <li>Comprehensive tutorials</li> <li>Practice problems</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#youtube-channels","title":"YouTube Channels","text":"<ol> <li>Back To Back SWE</li> <li>Detailed explanations</li> <li>Visual presentations</li> <li> <p>Interview preparation</p> </li> <li> <p>Abdul Bari</p> </li> <li>Algorithm explanations</li> <li>Mathematical approach</li> <li>Theoretical foundation</li> </ol>"},{"location":"roadmap/dsa/dsaUsingC/#practice-platforms","title":"Practice Platforms","text":"<ol> <li>AtCoder</li> <li>Regular contests</li> <li>Various difficulty levels</li> <li> <p>Active community</p> </li> <li> <p>SPOJ</p> </li> <li>Classical problems</li> <li>Judge system</li> <li>Multiple languages</li> </ol>"},{"location":"roadmap/ml/neuralNetsWithC/","title":"Neural Networks with C","text":""},{"location":"roadmap/os-dev/knowC/","title":"Advanced Operating System Development Roadmap","text":""},{"location":"roadmap/os-dev/knowC/#how-to-follow","title":"How to Follow?","text":""},{"location":"roadmap/os-dev/knowC/#prerequisites-review-deep-dive","title":"Prerequisites Review &amp; Deep Dive","text":""},{"location":"roadmap/os-dev/knowC/#advanced-c-programming","title":"Advanced C Programming","text":"<ul> <li>Advanced Memory Management: Advanced C Memory Guide</li> <li>Inline Assembly in C: GCC Inline Assembly Guide</li> <li>Volatile &amp; Atomic Operations: C Atomics Guide</li> <li>Bit Manipulation Techniques: Bit Twiddling Hacks</li> </ul>"},{"location":"roadmap/os-dev/knowC/#x86x64-assembly-mastery","title":"x86/x64 Assembly Mastery","text":"<ul> <li>CPU Modes &amp; Privileges: Intel Software Developer Manual</li> <li>SIMD Instructions: x86 SIMD Programming</li> <li>Modern x86 Features: AMD64 Architecture Guide</li> <li>Assembly Optimization: Agner's Assembly Optimization</li> </ul>"},{"location":"roadmap/os-dev/knowC/#computer-architecture-foundations","title":"Computer Architecture Foundations","text":"<ul> <li>Cache Architecture: CPU Cache Tutorial</li> <li>Pipelining &amp; Superscalar: Modern Processor Design</li> <li>Memory Hierarchy: Memory Systems Cache, DRAM, Disk</li> </ul>"},{"location":"roadmap/os-dev/knowC/#phase-1-os-development-fundamentals","title":"Phase 1: OS Development Fundamentals","text":""},{"location":"roadmap/os-dev/knowC/#11-boot-process-deep-dive","title":"1.1 Boot Process Deep Dive","text":"<ul> <li>UEFI Programming: UEFI Programming Guide</li> <li>Secure Boot Implementation: OSDev Secure Boot</li> <li>Multiboot Specification: GNU Multiboot</li> <li>ACPI Implementation: ACPI Specification</li> <li>Early Hardware Init: OSDev Hardware Initialization</li> </ul>"},{"location":"roadmap/os-dev/knowC/#12-advanced-memory-management","title":"1.2 Advanced Memory Management","text":"<ul> <li>Paging Structures: Intel Paging Guide</li> <li>Virtual Memory Implementation: Understanding Virtual Memory</li> <li>Memory Allocators: Memory Allocator Designs</li> <li>NUMA Architecture: Linux NUMA Guide</li> <li>TLB Management: TLB Management Guide</li> </ul>"},{"location":"roadmap/os-dev/knowC/#13-process-management","title":"1.3 Process Management","text":"<ul> <li>Advanced Scheduling: Linux Scheduler Implementation</li> <li>Real-time Scheduling: RT-Linux Guide</li> <li>Context Switching: Low-Level Context Switch</li> <li>Thread Implementation: Threading Building Blocks</li> <li>Process Synchronization: Advanced Synchronization Primitives</li> </ul>"},{"location":"roadmap/os-dev/knowC/#phase-2-core-os-components","title":"Phase 2: Core OS Components","text":""},{"location":"roadmap/os-dev/knowC/#21-kernel-development","title":"2.1 Kernel Development","text":"<ul> <li>Microkernel Design: L4 Microkernel Guide</li> <li>Monolithic Implementation: Linux Kernel Guide</li> <li>Hybrid Approaches: XNU Kernel Architecture</li> <li>System Calls: Syscall Implementation</li> <li>Interrupt Handling: Advanced IRQ Management</li> </ul>"},{"location":"roadmap/os-dev/knowC/#22-file-systems","title":"2.2 File Systems","text":"<ul> <li>VFS Layer: Linux VFS Guide</li> <li>Journaling: Ext4 Journaling</li> <li>Cache Management: Page Cache</li> <li>Modern FS Features: BTRFS Design</li> <li>Network FS: NFS Implementation</li> </ul>"},{"location":"roadmap/os-dev/knowC/#23-device-drivers","title":"2.3 Device Drivers","text":"<ul> <li>Driver Framework: Linux Driver Model</li> <li>USB Stack: USB Driver Guide</li> <li>GPU Drivers: DRM/KMS Guide</li> <li>Network Drivers: Network Driver Programming</li> <li>Block Devices: Block Layer Guide</li> </ul>"},{"location":"roadmap/os-dev/knowC/#phase-3-advanced-topics","title":"Phase 3: Advanced Topics","text":""},{"location":"roadmap/os-dev/knowC/#31-security-protection","title":"3.1 Security &amp; Protection","text":"<ul> <li>Secure Boot Chain: Chain of Trust Implementation</li> <li>Memory Protection: KASLR Implementation</li> <li>Access Control: SELinux Architecture</li> <li>Trusted Execution: Intel SGX Programming</li> <li>Virtualization Security: KVM Security Features</li> </ul>"},{"location":"roadmap/os-dev/knowC/#32-networking-ipc","title":"3.2 Networking &amp; IPC","text":"<ul> <li>TCP/IP Stack: Network Stack Implementation</li> <li>Zero-copy Networking: DPDK Architecture</li> <li>IPC Mechanisms: System V IPC</li> <li>Socket Programming: Network Programming Guide</li> <li>Protocol Implementation: Networking Concepts</li> </ul>"},{"location":"roadmap/os-dev/knowC/#33-performance-optimization","title":"3.3 Performance &amp; Optimization","text":"<ul> <li>CPU Scheduler Tuning: CFS Scheduler Tuning</li> <li>Memory Subsystem: Memory Optimization</li> <li>I/O Scheduling: Block I/O Optimization</li> <li>Profile-guided Optimization: Kernel Profiling Guide</li> <li>System Tuning: Performance Tuning Guide</li> </ul>"},{"location":"roadmap/os-dev/knowC/#research-papers","title":"Research Papers","text":"<ol> <li>\"Exokernel: An Operating System Architecture for Application-Level Resource Management\"</li> <li>\"The Performance of \u00b5-Kernel-Based Systems\"</li> <li>\"Unikernels: Library Operating Systems for the Cloud\"</li> <li>\"The Linux Scheduler: A Decade of Wasted Cores\"</li> <li>\"Understanding and Designing New Server Architectures for Emerging Warehouse-Computing Environments\"</li> <li>\"The Multikernel: A New OS Architecture for Scalable Multicore Systems\"</li> <li>\"Efficient Memory Management in OS Kernels\"</li> <li>\"The Design and Implementation of a Log-Structured File System\"</li> <li>\"KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs\"</li> <li>\"seL4: Formal Verification of an OS Kernel\"</li> </ol>"},{"location":"roadmap/os-dev/knowC/#books","title":"Books","text":"<ol> <li>\"Modern Operating Systems\" by Andrew S. Tanenbaum</li> <li>\"Operating System Concepts\" by Silberschatz, Galvin, and Gagne</li> <li>\"Linux Kernel Development\" by Robert Love</li> <li>\"Understanding the Linux Kernel\" by Daniel P. Bovet</li> <li>\"Operating Systems: Three Easy Pieces\" by Remzi H. Arpaci-Dusseau</li> <li>\"The Design and Implementation of the FreeBSD Operating System\" by McKusick</li> <li>\"Linux Device Drivers\" by Jonathan Corbet</li> <li>\"OS: Design and Implementation\" by Andrew S. Tanenbaum</li> <li>\"Advanced Programming in the UNIX Environment\" by W. Richard Stevens</li> <li>\"System Programming with C and Unix\" by Adam Hoover</li> </ol>"},{"location":"roadmap/os-dev/knowC/#online-courses","title":"Online Courses","text":"<ol> <li>MIT 6.828: Operating System Engineering</li> <li>Stanford CS140: Operating Systems</li> <li>Berkeley CS162: Operating Systems</li> <li>Harvard CS161: Operating Systems</li> <li>Georgia Tech CS6200: Graduate Introduction to Operating Systems</li> <li>Coursera: Operating Systems and You</li> <li>edX: LinuxFoundationX: Introduction to Linux</li> <li>Udacity: Advanced Operating Systems</li> </ol>"},{"location":"roadmap/os-dev/knowC/#development-tools","title":"Development Tools","text":"<ul> <li>Cross Compiler: Cross Linux From Scratch</li> <li>Debugging Tools: GDB Guide</li> <li>Emulators: QEMU Documentation</li> <li>Performance Tools: Linux Perf Tools</li> <li>Static Analysis: Coverity Scan</li> <li>Dynamic Analysis: Valgrind Tools</li> </ul>"},{"location":"roadmap/os-dev/knowC/#final-projects","title":"Final Projects","text":"<ol> <li>Implement a microkernel OS</li> <li>Build a real-time operating system</li> <li>Create a specialized IoT operating system</li> <li>Develop a secure hypervisor</li> <li>Design a distributed operating system</li> </ol>"},{"location":"roadmap/os-dev/knowC/#additional-resources","title":"Additional Resources","text":"<ul> <li>OSDev Wiki</li> <li>The Linux Documentation Project</li> <li>Linux Kernel Newbies</li> <li>Linux Weekly News</li> <li>ACM SIGOPS</li> <li>USENIX</li> </ul>"},{"location":"roadmap/os-dev/noC/","title":"Operating System Development Roadmap (Beginner Path)","text":""},{"location":"roadmap/os-dev/noC/#how-to-follow","title":"How to Follow?","text":""},{"location":"roadmap/os-dev/noC/#phase-1-programming-fundamentals","title":"Phase 1: Programming Fundamentals","text":""},{"location":"roadmap/os-dev/noC/#11-c-programming-basics","title":"1.1 C Programming Basics","text":"<ul> <li>Introduction to Programming</li> <li>CS50's Introduction to Programming</li> <li>Learn C - Interactive Tutorial</li> <li> <p>C Programming at LearnCpp</p> </li> <li> <p>Basic Syntax and Control Structures</p> </li> <li>C Programming Language Tutorial</li> <li>W3Schools C Tutorial</li> <li> <p>C Language Cheat Sheet</p> </li> <li> <p>Variables and Data Types</p> </li> <li>C Data Types Guide</li> <li>Variables in C Programming</li> <li>Practice: Create programs using different data types</li> </ul>"},{"location":"roadmap/os-dev/noC/#12-intermediate-c-programming","title":"1.2 Intermediate C Programming","text":"<ul> <li>Functions and Program Structure</li> <li>Functions in C</li> <li>Program Structure Tutorial</li> <li> <p>Practice: Create modular programs</p> </li> <li> <p>Arrays and Strings</p> </li> <li>Array Operations in C</li> <li>String Handling</li> <li> <p>Practice: String manipulation programs</p> </li> <li> <p>Pointers Basics</p> </li> <li>Understanding Pointers</li> <li>Pointer Tutorial</li> <li>Practice: Basic pointer operations</li> </ul>"},{"location":"roadmap/os-dev/noC/#13-advanced-c-programming","title":"1.3 Advanced C Programming","text":"<ul> <li>Advanced Pointer Concepts</li> <li>Pointer to Pointer</li> <li>Function Pointers</li> <li> <p>Practice: Complex pointer programs</p> </li> <li> <p>Memory Management</p> </li> <li>Dynamic Memory Allocation</li> <li>Memory Layout</li> <li> <p>Practice: Memory allocation programs</p> </li> <li> <p>File Operations</p> </li> <li>File Handling in C</li> <li>Binary File Operations</li> <li>Practice: File handling programs</li> </ul>"},{"location":"roadmap/os-dev/noC/#14-data-structures","title":"1.4 Data Structures","text":"<ul> <li>Basic Data Structures</li> <li>Arrays and Linked Lists</li> <li>Stack and Queue</li> <li> <p>Practice: Implement basic data structures</p> </li> <li> <p>Advanced Data Structures</p> </li> <li>Trees and Graphs</li> <li>Hash Tables</li> <li>Practice: Implement complex data structures</li> </ul>"},{"location":"roadmap/os-dev/noC/#15-assembly-language-basics","title":"1.5 Assembly Language Basics","text":"<ul> <li>Introduction to Assembly</li> <li>NASM Tutorial</li> <li>x86 Assembly Guide</li> <li> <p>Practice: Basic assembly programs</p> </li> <li> <p>CPU Architecture</p> </li> <li>CPU Registers</li> <li>Instruction Set Reference</li> <li> <p>Practice: Register manipulation</p> </li> <li> <p>Memory Addressing</p> </li> <li>Memory Addressing Modes</li> <li>Segmentation</li> <li>Practice: Memory access programs</li> </ul>"},{"location":"roadmap/os-dev/noC/#phase-2-computer-architecture","title":"Phase 2: Computer Architecture","text":""},{"location":"roadmap/os-dev/noC/#21-basic-computer-organization","title":"2.1 Basic Computer Organization","text":"<ul> <li>CPU Components</li> <li>CPU Architecture</li> <li> <p>Instruction Pipeline</p> </li> <li> <p>Memory System</p> </li> <li>Memory Hierarchy</li> <li>Cache Memory</li> </ul>"},{"location":"roadmap/os-dev/noC/#22-io-systems","title":"2.2 I/O Systems","text":"<ul> <li>Basic I/O Concepts</li> <li>I/O Architecture</li> <li> <p>Device Controllers</p> </li> <li> <p>Interrupt Handling</p> </li> <li>Interrupt Basics</li> <li>PIC Programming</li> </ul>"},{"location":"roadmap/os-dev/noC/#phase-3-operating-system-concepts","title":"Phase 3: Operating System Concepts","text":""},{"location":"roadmap/os-dev/noC/#31-os-basics","title":"3.1 OS Basics","text":"<ul> <li>OS Structure</li> <li>OS Components</li> <li> <p>System Calls</p> </li> <li> <p>Process Management</p> </li> <li>Process Concepts</li> <li>Thread Management</li> </ul>"},{"location":"roadmap/os-dev/noC/#32-memory-management","title":"3.2 Memory Management","text":"<ul> <li>Virtual Memory</li> <li>Virtual Memory Concepts</li> <li> <p>Page Tables</p> </li> <li> <p>Memory Allocation</p> </li> <li>Memory Allocation Algorithms</li> <li>Paging Implementation</li> </ul>"},{"location":"roadmap/os-dev/noC/#phase-4-os-development-basics","title":"Phase 4: OS Development Basics","text":""},{"location":"roadmap/os-dev/noC/#41-development-environment","title":"4.1 Development Environment","text":"<ul> <li>Tool Setup</li> <li>Cross Compiler Setup</li> <li> <p>QEMU Installation</p> </li> <li> <p>Debugging Tools</p> </li> <li>GDB Basics</li> <li>OS Debugging Tips</li> </ul>"},{"location":"roadmap/os-dev/noC/#42-bootloader-development","title":"4.2 Bootloader Development","text":"<ul> <li>BIOS Programming</li> <li>BIOS Interrupts</li> <li> <p>Real Mode</p> </li> <li> <p>Protected Mode</p> </li> <li>Protected Mode</li> <li>GDT Setup</li> </ul>"},{"location":"roadmap/os-dev/noC/#43-basic-kernel-development","title":"4.3 Basic Kernel Development","text":"<ul> <li>Kernel Entry</li> <li>Kernel Basics</li> <li> <p>Linking Script</p> </li> <li> <p>Basic Drivers</p> </li> <li>VGA Text Mode</li> <li>Keyboard Driver</li> </ul>"},{"location":"roadmap/os-dev/noC/#beginner-projects-in-order","title":"Beginner Projects (In Order)","text":"<ol> <li>Hello World in Assembly</li> <li> <p>Assembly Hello World</p> </li> <li> <p>Basic Bootloader</p> </li> <li> <p>Bootloader Tutorial</p> </li> <li> <p>Simple Kernel</p> </li> <li> <p>Bare Bones</p> </li> <li> <p>Memory Management</p> </li> <li> <p>Writing a PMM</p> </li> <li> <p>Basic Shell</p> </li> <li>Writing a Shell</li> </ol>"},{"location":"roadmap/os-dev/noC/#online-courses","title":"Online Courses","text":"<ol> <li>CS50: Introduction to Computer Science</li> <li>Nand2Tetris</li> <li>Introduction to Operating Systems by Georgia Tech</li> <li>MIT OCW 6.828: Operating System Engineering</li> </ol>"},{"location":"roadmap/os-dev/noC/#books","title":"Books","text":"<ol> <li>\"C Programming Language\" by Kernighan and Ritchie</li> <li>\"Modern Operating Systems\" by Andrew S. Tanenbaum</li> <li>\"Operating Systems: Three Easy Pieces\" by Remzi H. Arpaci-Dusseau</li> <li>\"Computer Organization and Design\" by Patterson and Hennessy</li> <li>\"Operating System Concepts\" by Silberschatz, Galvin, and Gagne</li> </ol>"},{"location":"roadmap/os-dev/noC/#research-papers","title":"Research Papers","text":"<ol> <li>\"The Evolution of Operating Systems\"</li> <li>\"Understanding the Linux Virtual Memory Manager\"</li> <li>\"The Design of the Unix Operating System\"</li> <li>\"An Overview of the Singularity Project\"</li> <li>\"Interrupts and Interrupt Handling\"</li> </ol>"},{"location":"roadmap/os-dev/noC/#additional-resources","title":"Additional Resources","text":"<ul> <li>OSDev Wiki</li> <li>Linux From Scratch</li> <li>xv6 Teaching Operating System</li> <li>OS Development Series</li> </ul>"},{"location":"roadmap/os-dev/noC/#community-resources","title":"Community Resources","text":"<ul> <li>OSDev Forums</li> <li>Stack Overflow OS Development Tag</li> <li>Reddit r/osdev</li> <li>OS Development Discord</li> </ul>"},{"location":"roadmap/os-dev/noC/#development-tools","title":"Development Tools","text":"<ol> <li>Text Editors/IDEs</li> <li>Visual Studio Code with C/C++ extension</li> <li>Eclipse CDT</li> <li> <p>CLion</p> </li> <li> <p>Debugging Tools</p> </li> <li>GDB</li> <li>BOCHS Debugger</li> <li> <p>QEMU Monitor</p> </li> <li> <p>Build Tools</p> </li> <li>Make</li> <li>CMake</li> <li> <p>NASM/YASM</p> </li> <li> <p>Testing Tools</p> </li> <li>Unit Testing Frameworks</li> <li>QEMU for OS Testing</li> <li>VirtualBox for Testing</li> </ol>"},{"location":"roadmap/os-dev/noC/#next-steps-after-completion","title":"Next Steps After Completion","text":"<ol> <li>Study existing OS codebases</li> <li>Contribute to open-source OS projects</li> <li>Explore advanced topics:</li> <li>Real-time operating systems</li> <li>Embedded systems</li> <li>Distributed systems</li> </ol>"},{"location":"roadmap/reverse-engineering/reverse-engineering/","title":"Reverse Engineering","text":""}]}